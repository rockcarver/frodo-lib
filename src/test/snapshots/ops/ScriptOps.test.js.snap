// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ScriptOps createScriptExportTemplate() 1: Create script export template 1`] = `
{
  "meta": Any<Object>,
  "script": {},
}
`;

exports[`ScriptOps exportScript() 1: Export script by id c9cb4b1e-1cd3-4e5b-8f56-140f83ba9f6d 1`] = `
{
  "meta": Any<Object>,
  "script": {
    "c9cb4b1e-1cd3-4e5b-8f56-140f83ba9f6d": {
      "_id": "c9cb4b1e-1cd3-4e5b-8f56-140f83ba9f6d",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Check if username has already been collected.",
      "evaluatorVersion": "1.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "FrodoTestScript1",
      "script": [
        "/* Check Username",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Check if username has already been collected.",
        " * Return "known" if yes, "unknown" otherwise.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - known",
        " * - unknown",
        " */",
        "(function () {",
        "    if (null != sharedState.get("username")) {",
        "        outcome = "known";",
        "    }",
        "    else {",
        "        outcome = "unknown";",
        "    }",
        "}());",
      ],
    },
  },
}
`;

exports[`ScriptOps exportScriptByName() 1: Export script by name FrodoTestScript1 1`] = `
{
  "meta": Any<Object>,
  "script": {
    "c9cb4b1e-1cd3-4e5b-8f56-140f83ba9f6d": {
      "_id": "c9cb4b1e-1cd3-4e5b-8f56-140f83ba9f6d",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Check if username has already been collected.",
      "evaluatorVersion": "1.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "FrodoTestScript1",
      "script": [
        "/* Check Username",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Check if username has already been collected.",
        " * Return "known" if yes, "unknown" otherwise.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - known",
        " * - unknown",
        " */",
        "(function () {",
        "    if (null != sharedState.get("username")) {",
        "        outcome = "known";",
        "    }",
        "    else {",
        "        outcome = "unknown";",
        "    }",
        "}());",
      ],
    },
  },
}
`;

exports[`ScriptOps exportScripts() 1: Export all scripts 1`] = `
{
  "meta": Any<Object>,
  "script": {
    "07ee6240-d106-4e25-a781-5fcabc477d22": {
      "_id": "07ee6240-d106-4e25-a781-5fcabc477d22",
      "context": "SAML2_SP_ADAPTER",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "evaluatorVersion": "1.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "FrodoSPAdapter",
      "script": [
        "/*",
        " * Copyright 2023 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        " * The script has these top level functions that could be executed during a SAML2 flow.",
        " *      - preSingleSignOnRequest",
        " *      - preSingleSignOnProcess",
        " *      - postSingleSignOnSuccess",
        " *      - postSingleSignOnFailure",
        " *      - postNewNameIDSuccess",
        " *      - postTerminateNameIDSuccess",
        " *      - preSingleLogoutProcess",
        " *      - postSingleLogoutSuccess",
        " *",
        " * Please see the JavaDoc for the interface for more information about these methods.",
        " * https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/org/forgerock/openam/saml2/plugins/SPAdapter.html",
        " * Note that the initialize method is not supported in the scripts.",
        " *",
        " * Defined variables. Check the documentation on the respective functions for the variables available to it.",
        " *",
        " * hostedEntityId - String",
        " *     Entity ID for the hosted IDP",
        " * realm - String",
        " *     Realm of the hosted IDP",
        " * idpEntityId - String",
        " *     The entity ID for the Identity Provider for which the sign-on request will be sent.",
        " * request - HttpServletRequest (1)",
        " *     Servlet request object",
        " * response - HttpServletResponse (2)",
        " *     Servlet response object",
        " * authnRequest - AuthnRequest (3)",
        " *     The authentication request sent that is sent from the Service Provider.",
        " * session - SSOToken (4)",
        " *     The single sign-on session. The reference type of this is Object and would need to be casted to SSOToken.",
        " * res - Response (5)",
        " *     The SSO Response received from the Identity Provider.",
        " * profile - String",
        " *     The protocol profile that is used, this will be one of the following values from SAML2Constants (6):",
        " *          - SAML2Constants.HTTP_POST",
        " *          - SAML2Constants.HTTP_ARTIFACT",
        " *          - SAML2Constants.PAOS",
        " * out - PrintWriter (7)",
        " *     The PrintWriter that can be used to write to.",
        " * isFederation - boolean",
        " *     Set to true if using federation, otherwise false.",
        " * failureCode - int",
        " *     An integer holding the failure code when an error has occurred. For potential values see SPAdapter.",
        " * userId - String",
        " *     The unique universal ID of the user with whom the new name identifier request was performed.",
        " * idRequest - ManageNameIDRequest (8)",
        " *     The new name identifier request, this will be null if the request object is not available",
        " * idResponse - ManageNameIDResponse (9)",
        " *     The new name identifier response, this will be null if the response object is not available",
        " * binding - String",
        " *     The binding used for the new name identifier request. This will be one of the following values:",
        " *          - SAML2Constants.SOAP",
        " *          - SAML2Constants.HTTP_REDIRECT",
        " * logoutRequest - LogoutRequest (10)",
        " *     The single logout request.",
        " * logoutResponse - LogoutResponse (11)",
        " *     The single logout response.",
        " * spAdapterScriptHelper - SpAdapterScriptHelper (12)",
        " *     An instance of SpAdapterScriptHelper containing helper methods. See Javadoc for more details.",
        " * logger - Logger instance",
        " *     https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.",
        " *     Corresponding log files will be prefixed with: scripts.<script name>",
        " *",
        " * Throws SAML2Exception (13):",
        " *     for any exceptions occurring in the adapter. The federation process will continue",
        " *",
        " * Class reference:",
        " * (1) HttpServletRequest - https://tomcat.apache.org/tomcat-7.0-doc/servletapi/javax/servlet/http/HttpServletRequest.html.",
        " * (2) HttpServletResponse - https://tomcat.apache.org/tomcat-7.0-doc/servletapi/javax/servlet/http/HttpServletResponse.html.",
        " * (3) AuthnRequest - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/protocol/AuthnRequest.html.",
        " * (4) SSOToken - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/iplanet/sso/SSOToken.html.",
        " * (5) Response - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/protocol/Response.html",
        " * (6) SAML2Constants - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/common/SAML2Constants.html",
        " * (7) PrintWriter - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/PrintWriter.html",
        " * (8) ManageNameIDRequest - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/protocol/ManageNameIDRequest.html",
        " * (9) ManageNameIDResponse - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/protocol/ManageNameIDResponse.html",
        " * (10) LogoutRequest - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/protocol/LogoutRequest.html",
        " * (11) LogoutResponse - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/protocol/LogoutResponse.html",
        " * (12) SpAdapterScriptHelper - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/plugins/scripted/SpAdapterScriptHelper.html.",
        " * (13) SAML2Exception - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/common/SAML2Exception.html.",
        " */",
        "",
        "/*",
        " * Template/default script for SAML2 SP Adapter scripted plugin.",
        " */",
        "",
        "/*",
        " * Available variables for preSingleSignOnRequest:",
        " *     hostedEntityId",
        " *     idpEntityId",
        " *     realm",
        " *     request",
        " *     response",
        " *     authnRequest",
        " *     spAdapterScriptHelper",
        " *     logger",
        " */",
        "function preSingleSignOnRequest() {",
        "}",
        "",
        "/*",
        " * Available variables for preSingleSignOnProcess:",
        " *     hostedEntityId",
        " *     realm",
        " *     request",
        " *     response",
        " *     authnRequest",
        " *     res",
        " *     profile",
        " *     spAdapterScriptHelper",
        " *     logger",
        " */",
        "function preSingleSignOnProcess() {",
        "}",
        "",
        "/*",
        " * Available variables for postSingleSignOnSuccess:",
        " *     hostedEntityId",
        " *     realm",
        " *     request",
        " *     response",
        " *     out",
        " *     session",
        " *     authnRequest",
        " *     res",
        " *     profile",
        " *     isFederation",
        " *     spAdapterScriptHelper",
        " *     logger",
        " *",
        " * Return - true if response is being redirected, false if not. Default to false.",
        " */",
        "function postSingleSignOnSuccess() {",
        "    return false;",
        "}",
        "",
        "/*",
        " * Available variables for postSingleSignOnFailure:",
        " *     hostedEntityId",
        " *     realm",
        " *     request",
        " *     response",
        " *     authnRequest",
        " *     res",
        " *     profile",
        " *     failureCode",
        " *     spAdapterScriptHelper",
        " *     logger",
        " *",
        " * Return - true if response is being redirected, false if not. Default to false.",
        " */",
        "function postSingleSignOnFailure() {",
        "    return false;",
        "}",
        "",
        "/*",
        " * Available variables for postNewNameIDSuccess:",
        " *     hostedEntityId",
        " *     realm",
        " *     request",
        " *     response",
        " *     userId",
        " *     idRequest",
        " *     idResponse",
        " *     binding",
        " *     spAdapterScriptHelper",
        " *     logger",
        " */",
        "function postNewNameIDSuccess() {",
        "}",
        "",
        "/*",
        " * Available variables for postTerminateNameIDSuccess:",
        " *     hostedEntityId",
        " *     realm",
        " *     request",
        " *     response",
        " *     userId",
        " *     idRequest",
        " *     idResponse",
        " *     binding",
        " *     spAdapterScriptHelper",
        " *     logger",
        " */",
        "function postTerminateNameIDSuccess() {",
        "}",
        "",
        "/*",
        " * Available variables for preSingleLogoutProcess:",
        " *     hostedEntityId",
        " *     realm",
        " *     request",
        " *     response",
        " *     userId",
        " *     logoutRequest",
        " *     logoutResponse",
        " *     binding",
        " *     spAdapterScriptHelper",
        " *     logger",
        " */",
        "function preSingleLogoutProcess() {",
        "}",
        "",
        "/*",
        " * Available variables for postSingleLogoutSuccess:",
        " *     hostedEntityId",
        " *     realm",
        " *     request",
        " *     response",
        " *     userId",
        " *     logoutRequest",
        " *     logoutResponse",
        " *     binding",
        " *     spAdapterScriptHelper",
        " *     logger",
        " */",
        "function postSingleLogoutSuccess() {",
        "}",
      ],
    },
    "10643e95-873a-4ec0-b713-a7f56760d179": {
      "_id": "10643e95-873a-4ec0-b713-a7f56760d179",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Check if username has already been collected.",
      "evaluatorVersion": "1.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "FrodoTestScript4",
      "script": [
        "/* Check Username",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Check if username has already been collected.",
        " * Return "known" if yes, "unknown" otherwise.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - known",
        " * - unknown",
        " */",
        "(function () {",
        "    if (null != sharedState.get("username")) {",
        "        outcome = "known";",
        "    }",
        "    else {",
        "        outcome = "unknown";",
        "    }",
        "}());",
      ],
    },
    "1b52a7e0-4019-40fa-958a-15a49870e901": {
      "_id": "1b52a7e0-4019-40fa-958a-15a49870e901",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "set the same shared state variable",
      "evaluatorVersion": "1.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "shared",
      "script": [
        "(function () {",
        "  outcome = 'true';",
        "  var level = nodeState.get('level').asInteger();",
        "  sharedState.put('sharedValue', 'Level ' + level + ': This is a longer string value shared across all nested journeys. It contains an indicator in which level it was last set.');",
        "}());",
      ],
    },
    "207f172f-ffb5-439d-b7df-e8e80408830b": {
      "_id": "207f172f-ffb5-439d-b7df-e8e80408830b",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Normalizes raw profile data from GitHub",
      "evaluatorVersion": "1.0",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "GitHub Profile Normalization (VS) - imported (1)",
      "script": [
        "/*",
        " * Copyright 2020 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "logger.warning("GitHub rawProfile: "+rawProfile)",
        "",
        "return json(object(",
        "        field("id", rawProfile.id),",
        "        field("displayName", rawProfile.name),",
        "        field("givenName", rawProfile.first_name),",
        "        field("familyName", rawProfile.last_name),",
        "        field("photoUrl", rawProfile.picture.data.url),",
        "        field("email", rawProfile.email),",
        "        field("username", rawProfile.email)))",
      ],
    },
    "223739f3-9c54-43b7-9572-3c5338786145": {
      "_id": "223739f3-9c54-43b7-9572-3c5338786145",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "evaluatorVersion": "1.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Format Username",
      "script": [
        "var username = sharedState.get("username");",
        "",
        "sharedState.put("displayName", username);",
        "outcome = "continue";",
      ],
    },
    "23143919-6b78-40c3-b25e-beca19b229e0": {
      "_id": "23143919-6b78-40c3-b25e-beca19b229e0",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Normalizes raw profile data from GitHub",
      "evaluatorVersion": "1.0",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "GitHub Profile Normalization (VS)",
      "script": [
        ""/*\\n * Copyright 2020 ForgeRock AS. All Rights Reserved\\n *\\n * Use of this code requires a commercial software license with ForgeRock AS.\\n * or with one of its affiliates. All use shall be exclusively subject\\n * to such license between the licensee and ForgeRock AS.\\n */\\n\\nimport static org.forgerock.json.JsonValue.field\\nimport static org.forgerock.json.JsonValue.json\\nimport static org.forgerock.json.JsonValue.object\\n\\nlogger.warning(\\"GitHub rawProfile: \\"+rawProfile)\\n\\nreturn json(object(\\n        field(\\"id\\", rawProfile.id),\\n        field(\\"displayName\\", rawProfile.name),\\n        field(\\"givenName\\", rawProfile.first_name),\\n        field(\\"familyName\\", rawProfile.last_name),\\n        field(\\"photoUrl\\", rawProfile.picture.data.url),\\n        field(\\"email\\", rawProfile.email),\\n        field(\\"username\\", rawProfile.email)))"",
      ],
    },
    "2c38c998-aec0-4e56-8d46-bff6e24a704e": {
      "_id": "2c38c998-aec0-4e56-8d46-bff6e24a704e",
      "context": "LIBRARY",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "My Example Library",
      "evaluatorVersion": "2.0",
      "exports": [
        {
          "id": "MSG",
          "type": "String",
        },
        {
          "arity": 1,
          "id": "add",
          "type": "Function",
        },
        {
          "arity": 1,
          "id": "logTotal",
          "type": "Function",
        },
        {
          "arity": 2,
          "id": "logTotalWithMessage",
          "type": "Function",
        },
      ],
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "My Example Library",
      "script": [
        "var i = 0;",
        "",
        "function add(j) {i += j};",
        "function logTotal(log) { log.info("Total: " + i) };",
        "",
        "// export constant",
        "exports.MSG = 'Final sum';",
        "",
        "// export functions",
        "exports.add = add;",
        "exports.logTotal = logTotal;",
        "",
        "//direct export using an inline declaration",
        "exports.logTotalWithMessage = (log, message) => log.info(message + ": " + i);",
      ],
    },
    "39c08084-1238-43e8-857f-2e11005eac49": {
      "_id": "39c08084-1238-43e8-857f-2e11005eac49",
      "context": "OAUTH2_ACCESS_TOKEN_MODIFICATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Default alpha realm script for OAuth2 Access Token Modification",
      "evaluatorVersion": "1.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Alpha OAuth2 Access Token Modification Script",
      "script": [
        "/*",
        " * Copyright 2019-2021 ForgeRock AS. All Rights Reserved.",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        " * This script lets you modify information associated with an OAuth2 access token",
        " * with methods provided by the AccessToken (1) interface.",
        " * The changes made to OAuth2 access tokens will directly impact the size of the CTS tokens,",
        " * and, similarly, the size of the JWTs if client-based OAuth2 tokens are utilized.",
        " * When adding/updating fields make sure that the token size remains within client/user-agent limits.",
        " *",
        " * Defined variables:",
        " * accessToken - AccessToken (1).",
        " *               The access token to be updated.",
        " *               Mutable object, all changes to the access token will be reflected.",
        " * scopes - Set<String> (6).",
        " *          Always present, the requested scopes.",
        " * requestProperties - Unmodifiable Map (5).",
        " *                     Always present, contains a map of request properties:",
        " *                     requestUri - The request URI.",
        " *                     realm - The realm that the request relates to.",
        " *                     requestParams - A map of the request params and/or posted data.",
        " *                                     Each value is a list of one or more properties.",
        " *                                     Please note that these should be handled in accordance with OWASP best practices:",
        " *                                     https://owasp.org/www-community/vulnerabilities/Unsafe_use_of_Reflection.",
        " * clientProperties - Unmodifiable Map (5).",
        " *                    Present if the client specified in the request was identified, contains a map of client properties:",
        " *                    clientId - The client's URI for the request locale.",
        " *                    allowedGrantTypes - List of the allowed grant types (org.forgerock.oauth2.core.GrantType) for the client.",
        " *                    allowedResponseTypes - List of the allowed response types for the client.",
        " *                    allowedScopes - List of the allowed scopes for the client.",
        " *                    customProperties - A map of the custom properties of the client.",
        " *                                       Lists or maps will be included as sub-maps; for example:",
        " *                                       customMap[Key1]=Value1 will be returned as customMap -> Key1 -> Value1.",
        " *                                       To add custom properties to a client, update the Custom Properties field",
        " *                                       in AM Console > Realm Name > Applications > OAuth 2.0 > Clients > Client ID > Advanced.",
        " * identity - AMIdentity (3).",
        " *            Always present, the identity of the resource owner.",
        " * session - SSOToken (4).",
        " *           Present if the request contains the session cookie, the user's session object.",
        " * scriptName - String (primitive).",
        " *              Always present, the display name of the script.",
        " * logger - Always present, the "OAuth2Provider" debug logger instance:",
        " *          https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.",
        " *          Corresponding log files will be prefixed with: scripts.OAUTH2_ACCESS_TOKEN_MODIFICATION.",
        " * httpClient - HTTP Client (8).",
        " *              Always present, the HTTP Client instance:",
        " *              https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-http-client.html#scripting-api-global-http-client.",
        " *",
        " * Return - no value is expected, changes shall be made to the accessToken parameter directly.",
        " *",
        " * Class reference:",
        " * (1) AccessToken - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/oauth2/core/AccessToken.html.",
        " * (3) AMIdentity - https://backstage.forgerock.com/docs/am/7/apidocs/com/sun/identity/idm/AMIdentity.html.",
        " * (4) SSOToken - https://backstage.forgerock.com/docs/am/7/apidocs/com/iplanet/sso/SSOToken.html.",
        " * (5) Map - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashMap.html,",
        " *           or https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/LinkedHashMap.html.",
        " * (6) Set - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashSet.html.",
        " * (8) Client - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/http/Client.html.",
        " */",
        "",
        "/* EXAMPLE",
        "(function () {",
        "    var frJava = JavaImporter(",
        "        org.forgerock.http.protocol.Request,",
        "        org.forgerock.http.protocol.Response",
        "    );",
        "",
        "    // Always includes this field in the token.",
        "    accessToken.setField('key1', 'value1');",
        "",
        "    // Receives and adds to the access token additional values by performing a REST call to an external service.",
        "    // WARNING: Below, you will find a reference to a third-party site, which is provided only as an example.",
        "    var uri = 'https://jsonplaceholder.typicode.com/posts';",
        "",
        "    try {",
        "        var request = new frJava.Request();",
        "",
        "        // You can chain methods that return the request object.",
        "        request.setUri(uri)",
        "            .setMethod('POST')",
        "            .setEntity(JSON.stringify({",
        "                updatedFields: {",
        "                    key2: 'value2',",
        "                    key3: 'value3'",
        "                }",
        "            }));",
        "",
        "        // You can call a method when chaining is not possible.",
        "        request.getHeaders().add('Content-Type', 'application/json; charset=UTF-8');",
        "",
        "        // Sends the request and receives the response.",
        "        var response = httpClient.send(request).getOrThrow();",
        "",
        "        // Checks if the response status is as expected.",
        "        if (response.getStatus() === org.forgerock.http.protocol.Status.CREATED) {",
        "            var result = JSON.parse(response.getEntity().getString());",
        "",
        "            // Set multiple token fields at once.",
        "            accessToken.setFields(result.updatedFields);",
        "        } else {",
        "            logger.error('Unable to obtain access token modifications. Status: ' + response.getStatus() + '. Content: ' + response.getEntity().getString());",
        "        }",
        "    } catch (e) {",
        "        logger.error('The request processing was interrupted. ' + e);",
        "",
        "        // The access token request fails with the HTTP 500 error in this case.",
        "        throw ('Unable to obtain response from: ' + uri);",
        "    }",
        "",
        "    // Adds new fields containing identity attribute values to the access token.",
        "    accessToken.setField('mail', identity.getAttribute('mail'));",
        "    accessToken.setField('phone', identity.getAttribute('telephoneNumber').toArray()[0]);",
        "",
        "    // Adds new fields containing the session property values.",
        "    // NOTE: session may not be available for non-interactive authorization grants.",
        "    if (session) {",
        "        try {",
        "            accessToken.setField('ipAddress', session.getProperty('Host'));",
        "        } catch (e) {",
        "            logger.error('Unable to retrieve session property value. ' + e);",
        "        }",
        "    }",
        "",
        "    // Removes a native field from the token entry, that was set by AM.",
        "    // WARNING: removing native fields from the token may result in loss of functionality.",
        "    // accessToken.removeTokenName()",
        "",
        "    // No return value is expected. Let it be undefined.",
        "}());",
        "*/",
        "",
      ],
    },
    "3bd13a46-61c4-4974-8efb-1700c80c64e3": {
      "_id": "3bd13a46-61c4-4974-8efb-1700c80c64e3",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Inactive Device Match Script",
      "evaluatorVersion": "1.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Inactive Device Match Script",
      "script": [
        "/*",
        " * Inactive Device Match Script",
        " */",
        "",
        "outcome = "true";",
      ],
    },
    "3cb43516-ae69-433a-8787-501d45db14e9": {
      "_id": "3cb43516-ae69-433a-8787-501d45db14e9",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Display sharedState, transientState, and headers.",
      "evaluatorVersion": "1.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "debug",
      "script": [
        "/* debug",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Display sharedState, transientState, and headers.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " */",
        "var anchor = "anchor-".concat(generateNumericToken('xxx'));",
        "var halign = "left";",
        "var message = "<p><b>Shared State</b>:<br/>".concat(",
        "      sharedState.toString()).concat("</p>").concat(",
        "    "<p><b>Transient State</b>:<br/>").concat(",
        "      transientState.toString()).concat("</p>").concat(",
        "    "<p><b>Request Headers</b>:<br/>").concat(",
        "      requestHeaders.toString()).concat("</p>")",
        "var script = "Array.prototype.slice.call(\\n".concat(",
        "  "document.getElementsByClassName('callback-component')).forEach(\\n").concat(",
        "  "function (e) {\\n").concat(",
        "  "  var message = e.firstElementChild;\\n").concat(",
        "  "  if (message.firstChild && message.firstChild.nodeName == '#text' && message.firstChild.nodeValue.trim() == '").concat(anchor).concat("') {\\n").concat(",
        "  "    message.className = \\"text-left\\";\\n").concat(",
        "  "    message.align = \\"").concat(halign).concat("\\";\\n").concat(",
        "  "    message.innerHTML = '").concat(message).concat("';\\n").concat(",
        "  "  }\\n").concat(",
        "  "})")",
        "var fr = JavaImporter(",
        "    org.forgerock.openam.auth.node.api.Action,",
        "    javax.security.auth.callback.TextOutputCallback,",
        "    com.sun.identity.authentication.callbacks.ScriptTextOutputCallback",
        ")",
        "if (message.length && callbacks.isEmpty()) {",
        "    action = fr.Action.send(",
        "        new fr.TextOutputCallback(",
        "            fr.TextOutputCallback.INFORMATION,",
        "            anchor",
        "        ),",
        "        new fr.ScriptTextOutputCallback(script)",
        "    ).build()",
        "}",
        "else {",
        "  action = fr.Action.goTo("true").build();",
        "}",
        "",
        " /*",
        "  * Generate a token in the desired format. All 'x' characters will be replaced with a random number 0-9.",
        "  * ",
        "  * Example:",
        "  * 'xxxxx' produces '28535'",
        "  * 'xxx-xxx' produces '432-521'",
        "  */",
        "function generateNumericToken(format) {",
        "    return format.replace(/[x]/g, function(c) {",
        "        var r = Math.random()*10|0;",
        "        var v = r;",
        "        return v.toString(10);",
        "    });",
        "}",
      ],
    },
    "41c24257-d7fc-4654-8b46-c2666dc5b56d": {
      "_id": "41c24257-d7fc-4654-8b46-c2666dc5b56d",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "set per level shared state variable",
      "evaluatorVersion": "1.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "level",
      "script": [
        "(function () {",
        "  outcome = 'true';",
        "  var level = nodeState.get('level').asInteger();",
        "  sharedState.put('level' + level + 'Value', 'Level ' + level + ': This is a longer string value set at each level of the nested journeys. It contains an indicator in which level it was set.');",
        "}());",
      ],
    },
    "4c963bb3-7084-43d0-bcdc-a47482cf1825": {
      "_id": "4c963bb3-7084-43d0-bcdc-a47482cf1825",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Dummy",
      "evaluatorVersion": "2.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Dummy",
      "script": [
        "",
        "outcome = "true";",
        "",
      ],
    },
    "4e053815-adde-46ac-9fe2-d3ae93517c14": {
      "_id": "4e053815-adde-46ac-9fe2-d3ae93517c14",
      "context": "LIBRARY",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "evaluatorVersion": "2.0",
      "exports": [],
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "My Other Example Library Script",
      "script": [
        "console.log("hi there");",
      ],
    },
    "5bbdaeff-ddee-44b9-b608-8d413d7d65a6": {
      "_id": "5bbdaeff-ddee-44b9-b608-8d413d7d65a6",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Check if mode has already been set.",
      "evaluatorVersion": "1.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "mode",
      "script": [
        "/* mode",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Collect mode if not already set and set outcome to mode.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - 'shared and level'",
        " * - 'shared only'",
        " * - 'level only'",
        " * - 'none'",
        " */",
        "(function () {",
        "  var mode = nodeState.get('mode');",
        "  if (mode) {",
        "    outcome = mode.asString();",
        "    var level = nodeState.get('level').asInteger() + 1;",
        "    logger.error('mode: mode=' + mode.asString() + ', level=' + level);",
        "    sharedState.put('level', level);",
        "  }",
        "  else {",
        "    var choices = ['shared and level', 'shared only', 'level only', 'none'];",
        "  ",
        "    var fr = JavaImporter(",
        "      org.forgerock.openam.auth.node.api.Action,",
        "      javax.security.auth.callback.ChoiceCallback",
        "    )",
        "",
        "    if (callbacks.isEmpty()) {",
        "      action = fr.Action.send([",
        "        new fr.ChoiceCallback('Choose test mode', choices, 0, false)",
        "      ]).build();",
        "    } else {",
        "      var choice = parseInt(callbacks.get(0).getSelectedIndexes()[0]);",
        "      nodeState.putShared('mode', choices[choice]);",
        "      nodeState.putShared('level', 0);",
        "      action = fr.Action.goTo(choices[choice]).build();",
        "    }",
        "  }",
        "}());",
      ],
    },
    "5ce0d38a-154c-4be5-bd22-f9879c77e895": {
      "_id": "5ce0d38a-154c-4be5-bd22-f9879c77e895",
      "context": "SAML2_SP_ADAPTER",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "evaluatorVersion": "1.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "FrodoSPAdapter - imported (1)",
      "script": [
        "/*",
        " * Copyright 2023 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        " * The script has these top level functions that could be executed during a SAML2 flow.",
        " *      - preSingleSignOnRequest",
        " *      - preSingleSignOnProcess",
        " *      - postSingleSignOnSuccess",
        " *      - postSingleSignOnFailure",
        " *      - postNewNameIDSuccess",
        " *      - postTerminateNameIDSuccess",
        " *      - preSingleLogoutProcess",
        " *      - postSingleLogoutSuccess",
        " *",
        " * Please see the JavaDoc for the interface for more information about these methods.",
        " * https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/org/forgerock/openam/saml2/plugins/SPAdapter.html",
        " * Note that the initialize method is not supported in the scripts.",
        " *",
        " * Defined variables. Check the documentation on the respective functions for the variables available to it.",
        " *",
        " * hostedEntityId - String",
        " *     Entity ID for the hosted IDP",
        " * realm - String",
        " *     Realm of the hosted IDP",
        " * idpEntityId - String",
        " *     The entity ID for the Identity Provider for which the sign-on request will be sent.",
        " * request - HttpServletRequest (1)",
        " *     Servlet request object",
        " * response - HttpServletResponse (2)",
        " *     Servlet response object",
        " * authnRequest - AuthnRequest (3)",
        " *     The authentication request sent that is sent from the Service Provider.",
        " * session - SSOToken (4)",
        " *     The single sign-on session. The reference type of this is Object and would need to be casted to SSOToken.",
        " * res - Response (5)",
        " *     The SSO Response received from the Identity Provider.",
        " * profile - String",
        " *     The protocol profile that is used, this will be one of the following values from SAML2Constants (6):",
        " *          - SAML2Constants.HTTP_POST",
        " *          - SAML2Constants.HTTP_ARTIFACT",
        " *          - SAML2Constants.PAOS",
        " * out - PrintWriter (7)",
        " *     The PrintWriter that can be used to write to.",
        " * isFederation - boolean",
        " *     Set to true if using federation, otherwise false.",
        " * failureCode - int",
        " *     An integer holding the failure code when an error has occurred. For potential values see SPAdapter.",
        " * userId - String",
        " *     The unique universal ID of the user with whom the new name identifier request was performed.",
        " * idRequest - ManageNameIDRequest (8)",
        " *     The new name identifier request, this will be null if the request object is not available",
        " * idResponse - ManageNameIDResponse (9)",
        " *     The new name identifier response, this will be null if the response object is not available",
        " * binding - String",
        " *     The binding used for the new name identifier request. This will be one of the following values:",
        " *          - SAML2Constants.SOAP",
        " *          - SAML2Constants.HTTP_REDIRECT",
        " * logoutRequest - LogoutRequest (10)",
        " *     The single logout request.",
        " * logoutResponse - LogoutResponse (11)",
        " *     The single logout response.",
        " * spAdapterScriptHelper - SpAdapterScriptHelper (12)",
        " *     An instance of SpAdapterScriptHelper containing helper methods. See Javadoc for more details.",
        " * logger - Logger instance",
        " *     https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.",
        " *     Corresponding log files will be prefixed with: scripts.<script name>",
        " *",
        " * Throws SAML2Exception (13):",
        " *     for any exceptions occurring in the adapter. The federation process will continue",
        " *",
        " * Class reference:",
        " * (1) HttpServletRequest - https://tomcat.apache.org/tomcat-7.0-doc/servletapi/javax/servlet/http/HttpServletRequest.html.",
        " * (2) HttpServletResponse - https://tomcat.apache.org/tomcat-7.0-doc/servletapi/javax/servlet/http/HttpServletResponse.html.",
        " * (3) AuthnRequest - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/protocol/AuthnRequest.html.",
        " * (4) SSOToken - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/iplanet/sso/SSOToken.html.",
        " * (5) Response - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/protocol/Response.html",
        " * (6) SAML2Constants - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/common/SAML2Constants.html",
        " * (7) PrintWriter - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/PrintWriter.html",
        " * (8) ManageNameIDRequest - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/protocol/ManageNameIDRequest.html",
        " * (9) ManageNameIDResponse - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/protocol/ManageNameIDResponse.html",
        " * (10) LogoutRequest - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/protocol/LogoutRequest.html",
        " * (11) LogoutResponse - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/protocol/LogoutResponse.html",
        " * (12) SpAdapterScriptHelper - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/plugins/scripted/SpAdapterScriptHelper.html.",
        " * (13) SAML2Exception - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/common/SAML2Exception.html.",
        " */",
        "",
        "/*",
        " * Template/default script for SAML2 SP Adapter scripted plugin.",
        " */",
        "",
        "/*",
        " * Available variables for preSingleSignOnRequest:",
        " *     hostedEntityId",
        " *     idpEntityId",
        " *     realm",
        " *     request",
        " *     response",
        " *     authnRequest",
        " *     spAdapterScriptHelper",
        " *     logger",
        " */",
        "function preSingleSignOnRequest() {",
        "}",
        "",
        "/*",
        " * Available variables for preSingleSignOnProcess:",
        " *     hostedEntityId",
        " *     realm",
        " *     request",
        " *     response",
        " *     authnRequest",
        " *     res",
        " *     profile",
        " *     spAdapterScriptHelper",
        " *     logger",
        " */",
        "function preSingleSignOnProcess() {",
        "}",
        "",
        "/*",
        " * Available variables for postSingleSignOnSuccess:",
        " *     hostedEntityId",
        " *     realm",
        " *     request",
        " *     response",
        " *     out",
        " *     session",
        " *     authnRequest",
        " *     res",
        " *     profile",
        " *     isFederation",
        " *     spAdapterScriptHelper",
        " *     logger",
        " *",
        " * Return - true if response is being redirected, false if not. Default to false.",
        " */",
        "function postSingleSignOnSuccess() {",
        "    return false;",
        "}",
        "",
        "/*",
        " * Available variables for postSingleSignOnFailure:",
        " *     hostedEntityId",
        " *     realm",
        " *     request",
        " *     response",
        " *     authnRequest",
        " *     res",
        " *     profile",
        " *     failureCode",
        " *     spAdapterScriptHelper",
        " *     logger",
        " *",
        " * Return - true if response is being redirected, false if not. Default to false.",
        " */",
        "function postSingleSignOnFailure() {",
        "    return false;",
        "}",
        "",
        "/*",
        " * Available variables for postNewNameIDSuccess:",
        " *     hostedEntityId",
        " *     realm",
        " *     request",
        " *     response",
        " *     userId",
        " *     idRequest",
        " *     idResponse",
        " *     binding",
        " *     spAdapterScriptHelper",
        " *     logger",
        " */",
        "function postNewNameIDSuccess() {",
        "}",
        "",
        "/*",
        " * Available variables for postTerminateNameIDSuccess:",
        " *     hostedEntityId",
        " *     realm",
        " *     request",
        " *     response",
        " *     userId",
        " *     idRequest",
        " *     idResponse",
        " *     binding",
        " *     spAdapterScriptHelper",
        " *     logger",
        " */",
        "function postTerminateNameIDSuccess() {",
        "}",
        "",
        "/*",
        " * Available variables for preSingleLogoutProcess:",
        " *     hostedEntityId",
        " *     realm",
        " *     request",
        " *     response",
        " *     userId",
        " *     logoutRequest",
        " *     logoutResponse",
        " *     binding",
        " *     spAdapterScriptHelper",
        " *     logger",
        " */",
        "function preSingleLogoutProcess() {",
        "}",
        "",
        "/*",
        " * Available variables for postSingleLogoutSuccess:",
        " *     hostedEntityId",
        " *     realm",
        " *     request",
        " *     response",
        " *     userId",
        " *     logoutRequest",
        " *     logoutResponse",
        " *     binding",
        " *     spAdapterScriptHelper",
        " *     logger",
        " */",
        "function postSingleLogoutSuccess() {",
        "}",
      ],
    },
    "6002c349-f1d0-4317-baa2-a18590fc3cff": {
      "_id": "6002c349-f1d0-4317-baa2-a18590fc3cff",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Normalizes raw profile data from GitHub",
      "evaluatorVersion": "1.0",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Okta Profile Normalization - imported (1)",
      "script": [
        "/*",
        " * Copyright 2022 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "logger.warning("Okta rawProfile: "+rawProfile)",
        "",
        "return json(object(",
        "        field("id", rawProfile.id),",
        "        field("displayName", rawProfile.name),",
        "        field("givenName", rawProfile.first_name),",
        "        field("familyName", rawProfile.last_name),",
        "        field("photoUrl", rawProfile.picture.data.url),",
        "        field("email", rawProfile.email),",
        "        field("username", rawProfile.preferred_username)))",
      ],
    },
    "6325cf19-a49b-471e-8d26-7e4df76df0e2": {
      "_id": "6325cf19-a49b-471e-8d26-7e4df76df0e2",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Normalizes raw profile data from GitHub",
      "evaluatorVersion": "1.0",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Okta Profile Normalization",
      "script": [
        "/*",
        " * Copyright 2022 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "logger.warning("Okta rawProfile: "+rawProfile)",
        "",
        "return json(object(",
        "        field("id", rawProfile.id),",
        "        field("displayName", rawProfile.name),",
        "        field("givenName", rawProfile.first_name),",
        "        field("familyName", rawProfile.last_name),",
        "        field("photoUrl", rawProfile.picture.data.url),",
        "        field("email", rawProfile.email),",
        "        field("username", rawProfile.preferred_username)))",
      ],
    },
    "647f2a33-9211-4315-a83f-a521d8b77d7b": {
      "_id": "647f2a33-9211-4315-a83f-a521d8b77d7b",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Normalizes raw profile data from GitHub",
      "evaluatorVersion": "1.0",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Okta Profile Normalization - imported (2)",
      "script": [
        "/*",
        " * Copyright 2022 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "logger.warning("Okta rawProfile: "+rawProfile)",
        "",
        "return json(object(",
        "        field("id", rawProfile.id),",
        "        field("displayName", rawProfile.name),",
        "        field("givenName", rawProfile.first_name),",
        "        field("familyName", rawProfile.last_name),",
        "        field("photoUrl", rawProfile.picture.data.url),",
        "        field("email", rawProfile.email),",
        "        field("username", rawProfile.preferred_username)))",
      ],
    },
    "739bdc48-fd24-4c52-b353-88706d75558a": {
      "_id": "739bdc48-fd24-4c52-b353-88706d75558a",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Check if username has already been collected.",
      "evaluatorVersion": "1.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Check Username",
      "script": [
        ""/* Check Username\\n *\\n * Author: volker.scheuber@forgerock.com\\n * \\n * Check if username has already been collected.\\n * Return \\"known\\" if yes, \\"unknown\\" otherwise.\\n * \\n * This script does not need to be parametrized. It will work properly as is.\\n * \\n * The Scripted Decision Node needs the following outcomes defined:\\n * - known\\n * - unknown\\n */\\n(function () {\\n    if (null != sharedState.get(\\"username\\")) {\\n        outcome = \\"known\\";\\n    }\\n    else {\\n        outcome = \\"unknown\\";\\n    }\\n}());"",
      ],
    },
    "85523e71-2d77-4577-b078-6f9674cc54e2": {
      "_id": "85523e71-2d77-4577-b078-6f9674cc54e2",
      "context": "SAML2_IDP_ADAPTER",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Always redirect browser pre-auth",
      "evaluatorVersion": "1.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Saml2 IDP Adapter Always Auth",
      "script": [
        "/*",
        " * Copyright 2021-2022 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        " * The script has these top level functions that could be executed during a SAML2 flow.",
        " *      - preSingleSignOn",
        " *      - preAuthentication",
        " *      - preSendResponse",
        " *      - preSignResponse",
        " *      - preSendFailureResponse",
        " *",
        " * Please see the javadoc for the interface definition and more information about these methods.",
        " * https://backstage.forgerock.com/docs/am/7.2/apidocs/com/sun/identity/saml2/plugins/SAML2IdentityProviderAdapter.html",
        " * Note that the initialize method is not supported in the scripts.",
        " *",
        " * Defined variables. Check the documentation on the respective functions for the variables available to it.",
        " *",
        " * hostedEntityId - String",
        " *     Entity ID for the hosted IDP",
        " * realm - String",
        " *     Realm of the hosted IDP",
        " * idpAdapterScriptHelper - IdpAdapterScriptHelper (1)",
        " *     An instance of IdpAdapterScriptHelper containing helper methods. See Javadoc for more details.",
        " * request - HttpServletRequest (2)",
        " *     Servlet request object",
        " * response - HttpServletResponse (3)",
        " *     Servlet response object",
        " * authnRequest - AuthnRequest (4)",
        " *     The original authentication request sent from SP",
        " * reqId - String",
        " *     The id to use for continuation of processing if the adapter redirects",
        " * res - Response (5)",
        " *     The SAML Response",
        " * session - SSOToken (6)",
        " *     The single sign-on session. The reference type of this is Object and would need to be casted to SSOToken.",
        " * relayState - String",
        " *     The relayState that will be used in the redirect",
        " * faultCode - String",
        " *     the fault code that will be returned in the SAML response",
        " * faultDetail - String",
        " *     the fault detail that will be returned in the SAML response",
        " * logger - Logger instance",
        " *     https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.",
        " *     Corresponding log files will be prefixed with: scripts.<script name>",
        " *",
        " * Throws SAML2Exception (7):",
        " *     for any exceptions occurring in the adapter. The federation process will continue",
        " *",
        " * Class reference:",
        " * (1) idpAdapterScriptHelper - https://backstage.forgerock.com/docs/am/7.2/apidocs/com/sun/identity/saml2/plugins/scripted/IdpAdapterScriptHelper.html.",
        " * (2) HttpServletRequest - https://tomcat.apache.org/tomcat-7.0-doc/servletapi/javax/servlet/http/HttpServletRequest.html.",
        " * (3) HttpServletResponse - https://tomcat.apache.org/tomcat-7.0-doc/servletapi/javax/servlet/http/HttpServletResponse.html.",
        " * (4) AuthnRequest - https://backstage.forgerock.com/docs/am/7.2/apidocs/com/sun/identity/saml2/protocol/AuthnRequest.html.",
        " * (5) Response - https://backstage.forgerock.com/docs/am/7.2/apidocs/com/sun/identity/saml2/protocol/Response.html.",
        " * (6) SSOToken - https://backstage.forgerock.com/docs/am/7.2/apidocs/com/iplanet/sso/SSOToken.html.",
        " * (7) SAML2Exception - https://backstage.forgerock.com/docs/am/7.2/apidocs/com/sun/identity/saml2/common/SAML2Exception.html.",
        " */",
        "",
        "/*",
        " * Template/default script for SAML2 IDP Adapter scripted plugin.",
        " */",
        "",
        "/*",
        " * Available variables for preSingleSignOn:",
        " *     hostedEntityId",
        " *     realm",
        " *     idpAdapterScriptHelper",
        " *     request",
        " *     authnRequest",
        " *     response",
        " *     reqId",
        " *     logger",
        " *",
        " * Return - true if browser redirection is happening after processing, false otherwise. Default to false.",
        " */",
        "function preSingleSignOn () {",
        "      logger.error("Chicago: preSingleSignOn");",
        "    return true;",
        "}",
        "",
        "/*",
        " * Available variables for preAuthentication:",
        " *     hostedEntityId",
        " *     realm",
        " *     idpAdapterScriptHelper",
        " *     request",
        " *     authnRequest",
        " *     response",
        " *     reqId",
        " *     session",
        " *     relayState",
        " *     logger",
        " *",
        " * Return - true if browser redirection is happening after processing, false otherwise. Default to false.",
        " */",
        "function preAuthentication () {",
        "      logger.error("Chicago: preAuthentication");",
        "    return true;",
        "}",
        "",
        "/*",
        " * Available variables for preSendResponse:",
        " *     hostedEntityId",
        " *     realm",
        " *     idpAdapterScriptHelper",
        " *     request",
        " *     authnRequest",
        " *     response",
        " *     reqId",
        " *     session",
        " *     relayState",
        " *     logger",
        " *",
        " * Return - true if browser redirection happened after processing, false otherwise. Default to false.",
        " */",
        "function preSendResponse () {",
        "      logger.error("Chicago: preSendResponse");",
        "      logger.error("Chicago: authnRequest: "+authnRequest);",
        "      response.sendRedirect("https://idc.scheuber.io/am/XUI/?realm=alpha&authIndexType=service&authIndexValue=Dispatcher&ForceAuth=true&goto="+relayState);",
        "    return true;",
        "}",
        "",
        "/*",
        " * Available variables for preSignResponse:",
        " *     hostedEntityId",
        " *     realm",
        " *     idpAdapterScriptHelper",
        " *     request",
        " *     authnRequest",
        " *     session",
        " *     relayState",
        " *     res",
        " *     logger",
        " */",
        "function preSignResponse () {",
        "      logger.error("Chicago: preSignResponse");",
        "}",
        "",
        "/*",
        " * Available variables for preSendFailureResponse:",
        " *     hostedEntityId",
        " *     realm",
        " *     idpAdapterScriptHelper",
        " *     request",
        " *     response",
        " *     faultCode",
        " *     faultDetail",
        " *     logger",
        " */",
        "function preSendFailureResponse () {",
        "      logger.error("Chicago: preSendFailureResponse");",
        "}",
      ],
    },
    "9535446c-0ff6-4a76-8576-616599119d64": {
      "_id": "9535446c-0ff6-4a76-8576-616599119d64",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Remove button from page.",
      "evaluatorVersion": "1.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Remove Button",
      "script": [
        "/* Remove Button",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Hide buttons on the journey page.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " */",
        "(function () {",
        "    var script = "Array.prototype.slice.call(document.getElementsByTagName('button')).forEach(function (e) {e.style.display = 'none'})"",
        "    var fr = JavaImporter(",
        "        org.forgerock.openam.auth.node.api.Action,",
        "        javax.security.auth.callback.TextOutputCallback,",
        "        com.sun.identity.authentication.callbacks.ScriptTextOutputCallback",
        "    )",
        "    var message = " "",
        "    if (callbacks.isEmpty()) {",
        "        action = fr.Action.send(",
        "            new fr.TextOutputCallback(",
        "                fr.TextOutputCallback.INFORMATION,",
        "                message",
        "            ),",
        "            new fr.ScriptTextOutputCallback(script)",
        "        ).build()",
        "    }",
        "}());",
      ],
    },
    "994a4e8f-2741-424a-83e7-3c5f78da01f5": {
      "_id": "994a4e8f-2741-424a-83e7-3c5f78da01f5",
      "context": "SAML2_IDP_ADAPTER",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Always redirect browser pre-auth",
      "evaluatorVersion": "1.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Saml2 IDP Adapter Always Auth - imported (2)",
      "script": [
        "/*",
        " * Copyright 2021-2022 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        " * The script has these top level functions that could be executed during a SAML2 flow.",
        " *      - preSingleSignOn",
        " *      - preAuthentication",
        " *      - preSendResponse",
        " *      - preSignResponse",
        " *      - preSendFailureResponse",
        " *",
        " * Please see the javadoc for the interface definition and more information about these methods.",
        " * https://backstage.forgerock.com/docs/am/7.2/apidocs/com/sun/identity/saml2/plugins/SAML2IdentityProviderAdapter.html",
        " * Note that the initialize method is not supported in the scripts.",
        " *",
        " * Defined variables. Check the documentation on the respective functions for the variables available to it.",
        " *",
        " * hostedEntityId - String",
        " *     Entity ID for the hosted IDP",
        " * realm - String",
        " *     Realm of the hosted IDP",
        " * idpAdapterScriptHelper - IdpAdapterScriptHelper (1)",
        " *     An instance of IdpAdapterScriptHelper containing helper methods. See Javadoc for more details.",
        " * request - HttpServletRequest (2)",
        " *     Servlet request object",
        " * response - HttpServletResponse (3)",
        " *     Servlet response object",
        " * authnRequest - AuthnRequest (4)",
        " *     The original authentication request sent from SP",
        " * reqId - String",
        " *     The id to use for continuation of processing if the adapter redirects",
        " * res - Response (5)",
        " *     The SAML Response",
        " * session - SSOToken (6)",
        " *     The single sign-on session. The reference type of this is Object and would need to be casted to SSOToken.",
        " * relayState - String",
        " *     The relayState that will be used in the redirect",
        " * faultCode - String",
        " *     the fault code that will be returned in the SAML response",
        " * faultDetail - String",
        " *     the fault detail that will be returned in the SAML response",
        " * logger - Logger instance",
        " *     https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.",
        " *     Corresponding log files will be prefixed with: scripts.<script name>",
        " *",
        " * Throws SAML2Exception (7):",
        " *     for any exceptions occurring in the adapter. The federation process will continue",
        " *",
        " * Class reference:",
        " * (1) idpAdapterScriptHelper - https://backstage.forgerock.com/docs/am/7.2/apidocs/com/sun/identity/saml2/plugins/scripted/IdpAdapterScriptHelper.html.",
        " * (2) HttpServletRequest - https://tomcat.apache.org/tomcat-7.0-doc/servletapi/javax/servlet/http/HttpServletRequest.html.",
        " * (3) HttpServletResponse - https://tomcat.apache.org/tomcat-7.0-doc/servletapi/javax/servlet/http/HttpServletResponse.html.",
        " * (4) AuthnRequest - https://backstage.forgerock.com/docs/am/7.2/apidocs/com/sun/identity/saml2/protocol/AuthnRequest.html.",
        " * (5) Response - https://backstage.forgerock.com/docs/am/7.2/apidocs/com/sun/identity/saml2/protocol/Response.html.",
        " * (6) SSOToken - https://backstage.forgerock.com/docs/am/7.2/apidocs/com/iplanet/sso/SSOToken.html.",
        " * (7) SAML2Exception - https://backstage.forgerock.com/docs/am/7.2/apidocs/com/sun/identity/saml2/common/SAML2Exception.html.",
        " */",
        "",
        "/*",
        " * Template/default script for SAML2 IDP Adapter scripted plugin.",
        " */",
        "",
        "/*",
        " * Available variables for preSingleSignOn:",
        " *     hostedEntityId",
        " *     realm",
        " *     idpAdapterScriptHelper",
        " *     request",
        " *     authnRequest",
        " *     response",
        " *     reqId",
        " *     logger",
        " *",
        " * Return - true if browser redirection is happening after processing, false otherwise. Default to false.",
        " */",
        "function preSingleSignOn () {",
        "      logger.error("Chicago: preSingleSignOn");",
        "    return true;",
        "}",
        "",
        "/*",
        " * Available variables for preAuthentication:",
        " *     hostedEntityId",
        " *     realm",
        " *     idpAdapterScriptHelper",
        " *     request",
        " *     authnRequest",
        " *     response",
        " *     reqId",
        " *     session",
        " *     relayState",
        " *     logger",
        " *",
        " * Return - true if browser redirection is happening after processing, false otherwise. Default to false.",
        " */",
        "function preAuthentication () {",
        "      logger.error("Chicago: preAuthentication");",
        "    return true;",
        "}",
        "",
        "/*",
        " * Available variables for preSendResponse:",
        " *     hostedEntityId",
        " *     realm",
        " *     idpAdapterScriptHelper",
        " *     request",
        " *     authnRequest",
        " *     response",
        " *     reqId",
        " *     session",
        " *     relayState",
        " *     logger",
        " *",
        " * Return - true if browser redirection happened after processing, false otherwise. Default to false.",
        " */",
        "function preSendResponse () {",
        "      logger.error("Chicago: preSendResponse");",
        "      logger.error("Chicago: authnRequest: "+authnRequest);",
        "      response.sendRedirect("https://idc.scheuber.io/am/XUI/?realm=alpha&authIndexType=service&authIndexValue=Dispatcher&ForceAuth=true&goto="+relayState);",
        "    return true;",
        "}",
        "",
        "/*",
        " * Available variables for preSignResponse:",
        " *     hostedEntityId",
        " *     realm",
        " *     idpAdapterScriptHelper",
        " *     request",
        " *     authnRequest",
        " *     session",
        " *     relayState",
        " *     res",
        " *     logger",
        " */",
        "function preSignResponse () {",
        "      logger.error("Chicago: preSignResponse");",
        "}",
        "",
        "/*",
        " * Available variables for preSendFailureResponse:",
        " *     hostedEntityId",
        " *     realm",
        " *     idpAdapterScriptHelper",
        " *     request",
        " *     response",
        " *     faultCode",
        " *     faultDetail",
        " *     logger",
        " */",
        "function preSendFailureResponse () {",
        "      logger.error("Chicago: preSendFailureResponse");",
        "}",
      ],
    },
    "b7259916-71ed-4675-8c5a-de86a80e4aed": {
      "_id": "b7259916-71ed-4675-8c5a-de86a80e4aed",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Check if username has already been collected.",
      "evaluatorVersion": "1.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "FrodoTestScript2",
      "script": [
        "/* Check Username",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Check if username has already been collected.",
        " * Return "known" if yes, "unknown" otherwise.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - known",
        " * - unknown",
        " */",
        "(function () {",
        "    if (null != sharedState.get("username")) {",
        "        outcome = "known";",
        "    }",
        "    else {",
        "        outcome = "unknown";",
        "    }",
        "}());",
      ],
    },
    "bb393d07-a121-47e2-9d24-1a1066f39ec0": {
      "_id": "bb393d07-a121-47e2-9d24-1a1066f39ec0",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "My Example Script Using Libraries",
      "evaluatorVersion": "2.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "My Example Script Using Libraries",
      "script": [
        "/**",
        " * Testing library scripts",
        " */",
        "var mylib = require('My Example Library');",
        "var loggers = require('Library Script');",
        "",
        "mylib.add(1);",
        "mylib.logTotal(logger);",
        "mylib.add(3);",
        "mylib.logTotalWithMessage(logger, mylib.MSG);",
        "",
        "outcome = 'true';",
      ],
    },
    "c9cb4b1e-1cd3-4e5b-8f56-140f83ba9f6d": {
      "_id": "c9cb4b1e-1cd3-4e5b-8f56-140f83ba9f6d",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Check if username has already been collected.",
      "evaluatorVersion": "1.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "FrodoTestScript1",
      "script": [
        "/* Check Username",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Check if username has already been collected.",
        " * Return "known" if yes, "unknown" otherwise.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - known",
        " * - unknown",
        " */",
        "(function () {",
        "    if (null != sharedState.get("username")) {",
        "        outcome = "known";",
        "    }",
        "    else {",
        "        outcome = "unknown";",
        "    }",
        "}());",
      ],
    },
    "cf3515f0-8278-4ee3-a530-1bad7424c416": {
      "_id": "cf3515f0-8278-4ee3-a530-1bad7424c416",
      "context": "OIDC_CLAIMS",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Default alpha realm script for OIDC claims",
      "evaluatorVersion": "1.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Alpha OIDC Claims Script",
      "script": [
        "/*",
        " * Copyright 2014-2021 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        " * This script computes claim values returned in ID tokens and/or at the UserInfo Endpoint.",
        " * The claim values are computed for:",
        " * the claims derived from the requested scopes,",
        " * the claims provided by the authorization server,",
        " * and the claims requested by the client via the claims parameter.",
        " *",
        " * In the CONFIGURATION AND CUSTOMIZATION section, you can",
        " * define the scope-to-claims mapping, and",
        " * assign to each claim a resolver function that will compute the claim value.",
        " *",
        " * Defined variables (class references are provided below):",
        " * scopes - Set<String> (6).",
        " *          Always present, the requested scopes.",
        " * claims - Map<String, Object> (5).",
        " *          Always present, default server provided claims.",
        " * claimObjects - List<Claim> (7, 2).",
        " *                Always present, the default server provided claims.",
        " * requestedClaims - Map<String, Set<String>> (5).",
        " *                   Always present, not empty if the request contains the claims parameter and the server has enabled",
        " *                   claims_parameter_supported. A map of the requested claims to possible values, otherwise empty;",
        " *                   requested claims with no requested values will have a key but no value in the map. A key with",
        " *                   a single value in its Set (6) indicates that this is the only value that should be returned.",
        " * requestedTypedClaims - List<Claim> (7, 2).",
        " *                        Always present, the requested claims.",
        " *                        Requested claims with no requested values will have a claim with no values.",
        " *                        A claim with a single value indicates this is the only value that should be returned.",
        " * claimsLocales - List<String> (7).",
        " *                 The values from the 'claims_locales' parameter.",
        " *                 See https://openid.net/specs/openid-connect-core-1_0.html#ClaimsLanguagesAndScripts for the OIDC specification details.",
        " * requestProperties - Unmodifiable Map (5).",
        " *                     Always present, contains a map of request properties:",
        " *                     requestUri - The request URI.",
        " *                     realm - The realm that the request relates to.",
        " *                     requestParams - A map of the request params and/or posted data.",
        " *                                     Each value is a list of one or more properties.",
        " *                                     Please note that these should be handled in accordance with OWASP best practices:",
        " *                                     https://owasp.org/www-community/vulnerabilities/Unsafe_use_of_Reflection.",
        " * clientProperties - Unmodifiable Map (5).",
        " *                    Present if the client specified in the request was identified, contains a map of client properties:",
        " *                    clientId - The client's URI for the request locale.",
        " *                    allowedGrantTypes - List of the allowed grant types (org.forgerock.oauth2.core.GrantType) for the client.",
        " *                    allowedResponseTypes - List of the allowed response types for the client.",
        " *                    allowedScopes - List of the allowed scopes for the client.",
        " *                    customProperties - A map of the custom properties of the client.",
        " *                                       Lists or maps will be included as sub-maps; for example:",
        " *                                       customMap[Key1]=Value1 will be returned as customMap -> Key1 -> Value1.",
        " *                                       To add custom properties to a client, update the Custom Properties field",
        " *                                       in AM Console > Realm Name > Applications > OAuth 2.0 > Clients > Client ID > Advanced.",
        " * identity - AMIdentity (3).",
        " *            Always present, the identity of the resource owner.",
        " * session - SSOToken (4).",
        " *           Present if the request contains the session cookie, the user's session object.",
        " * scriptName - String (primitive).",
        " *              Always present, the display name of the script.",
        " * logger - Always present, the "OAuth2Provider" debug logger instance:",
        " *          https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.",
        " *          Corresponding files will be prefixed with: scripts.OIDC_CLAIMS.",
        " * httpClient - HTTP Client (8).",
        " *              Always present, the HTTP Client instance:",
        " *              https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-http-client.html#scripting-api-global-http-client.",
        " *              In order to use the client, you may need to add",
        " *              org.forgerock.http.Client,",
        " *              org.forgerock.http.protocol.*,",
        " *              and org.forgerock.util.promise.PromiseImpl",
        " *              to the allowed Java classes in the scripting engine configuration, as described in:",
        " *              https://backstage.forgerock.com/docs/am/7/scripting-guide/script-engine-security.html",
        " *",
        " * Return - a new UserInfoClaims(Map<String, Object> values, Map<String, List<String>> compositeScopes) (1) object.",
        " *          The result of the last statement in the script is returned to the server.",
        " *          Currently, the Immediately Invoked Function Expression (also known as Self-Executing Anonymous Function)",
        " *          is the last (and only) statement in this script, and its return value will become the script result.",
        " *          Do not use "return variable" statement outside of a function definition.",
        " *          See RESULTS section for additional details.",
        " *",
        " * Class reference:",
        " * (1) UserInfoClaims - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/oauth2/core/UserInfoClaims.html.",
        " * (2) Claim - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html).",
        " *         An instance of org.forgerock.openidconnect.Claim has methods to access",
        " *         the claim name, requested values, locale, and whether the claim is essential.",
        " * (3) AMIdentity - https://backstage.forgerock.com/docs/am/7/apidocs/com/sun/identity/idm/AMIdentity.html.",
        " * (4) SSOToken - https://backstage.forgerock.com/docs/am/7/apidocs/com/iplanet/sso/SSOToken.html.",
        " * (5) Map - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashMap.html,",
        " *           or https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/LinkedHashMap.html.",
        " * (6) Set - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashSet.html.",
        " * (7) List - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/ArrayList.html.",
        " * (8) Client - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/http/Client.html.",
        "*/",
        "",
        "(function () {",
        "    // SETUP",
        "",
        "    /**",
        "     * Claim processing utilities.",
        "     * An object that contains reusable functions for processing claims.",
        "     * @see CLAIM PROCESSING UTILITIES section for details.",
        "     */",
        "    var utils = getUtils();",
        "",
        "    // CONFIGURATION AND CUSTOMIZATION",
        "",
        "    /**",
        "     * OAuth 2.0 scope values (scopes) can be used by the Client to request OIDC claims.",
        "     *",
        "     * Call this configuration method, and pass in as the first argument",
        "     * an object that maps a scope value to an array of claim names",
        "     * to specify which claims need to be processed and returned for the requested scopes.",
        "     * @see {@link https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims}",
        "     * for the scope values that could be used to request claims as defined in the OIDC specification.",
        "     *",
        "     * Below, find a default configuration that is expected to work in the current environment.",
        "     *",
        "     * CUSTOMIZATION",
        "     * You can choose the claim names returned for a scope.",
        "     */",
        "    utils.setScopeClaimsMap({",
        "        profile: [",
        "            'name',",
        "            'family_name',",
        "            'given_name',",
        "            'zoneinfo',",
        "            'locale'",
        "        ],",
        "        email: ['email'],",
        "        address: ['address'],",
        "        phone: ['phone_number']",
        "    });",
        "",
        "    /**",
        "     * In this script, each claim",
        "     * derived from the requested scopes,",
        "     * provided by the authorization server, and",
        "     * requested by the client via the claims parameter",
        "     * will be processed by a function associated with the claim name.",
        "     *",
        "     * Call this configuration method, and pass in as the first argument",
        "     * an object that maps a claim name to a resolver function,",
        "     * which will be automatically executed for each claim processed by the script.",
        "     *",
        "     * The claim resolver function will receive the requested claim information",
        "     * in an instance of org.forgerock.openidconnect.Claim as the first argument.",
        "     * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html}",
        "     * for details on the Claim class.",
        "     *",
        "     * If the claim resolver function returns a value,",
        "     * other than undefined or null,",
        "     * the claim will be included in the script's results.",
        "     *",
        "     * The Claim instance provides methods to check",
        "     * what the name of the claim is,",
        "     * which values the claim request contains,",
        "     * whether the claim is essential, and",
        "     * which locale the claim is associated with.",
        "     * The resolver function can consider this information when computing and returning the claim value.",
        "     *",
        "     * Below, find a default configuration that is expected to work in the current environment.",
        "     * A reusable function, utils.getUserProfileClaimResolver(String attribute-name),",
        "     * is called to return a claim resolver function based on a user profile attribute.",
        "     * @see CLAIM RESOLVERS section for the implementation details and examples.",
        "     * For the address claim, an example of a claim resolver that uses another claim resolver is provided.",
        "     *",
        "     * CUSTOMIZATION",
        "     * You can reuse the predefined utils methods with your custom arguments.",
        "     * You can also specify a custom resolver function for a claim name,",
        "     * that will compute and return the claim value—as shown in the commented out example below.",
        "     */",
        "    utils.setClaimResolvers({",
        "        /*",
        "        // An example of a simple claim resolver function that is defined for a claim",
        "        // directly in the configuration object:",
        "        custom-claim-name: function (requestedClaim) {",
        "            // In this case, initially, the claim value comes straight from a user profile attribute value:",
        "            var claimValue = identity.getAttribute('custom-attribute-name').toArray()[0]",
        "",
        "            // Optionally, provide additional logic for processing (filtering, formatting, etc.) the claim value.",
        "            // You can use:",
        "            // requestedClaim.getName()",
        "            // requestedClaim.getValues()",
        "            // requestedClaim.getLocale()",
        "            // requestedClaim.isEssential()",
        "",
        "            return claimValue",
        "        },",
        "        */",
        "        /**",
        "         * The use of utils.getUserProfileClaimResolver shows how",
        "         * an argument passed to a function that returns a claim resolver",
        "         * becomes available to the resolver function (via its lexical context).",
        "         */",
        "        name: utils.getUserProfileClaimResolver('cn'),",
        "        family_name: utils.getUserProfileClaimResolver('sn'),",
        "        given_name: utils.getUserProfileClaimResolver('givenname'),",
        "        zoneinfo: utils.getUserProfileClaimResolver('preferredtimezone'),",
        "        locale: utils.getUserProfileClaimResolver('preferredlocale'),",
        "        email: utils.getUserProfileClaimResolver('mail'),",
        "        address: utils.getAddressClaimResolver(",
        "            /**",
        "             * The passed in user profile claim resolver function",
        "             * can be used by the address claim resolver function",
        "             * to obtain the claim value to be formatted as per the OIDC specification:",
        "             * @see https://openid.net/specs/openid-connect-core-1_0.html#AddressClaim.",
        "             */",
        "            utils.getUserProfileClaimResolver('postaladdress')",
        "        ),",
        "        phone_number: utils.getUserProfileClaimResolver('telephonenumber')",
        "    });",
        "",
        "    // CLAIM PROCESSING UTILITIES",
        "",
        "    /**",
        "     * @returns {object} An object that contains reusable claim processing utilities.",
        "     * @see PUBLIC METHODS section and the return statement for the list of exported functions.",
        "     */",
        "    function getUtils () {",
        "        // IMPORT JAVA",
        "",
        "        /**",
        "         * Provides Java scripting functionality.",
        "         * @see {@link https://developer.mozilla.org/en-US/docs/Mozilla/Projects/Rhino/Scripting_Java#javaimporter_constructor}.",
        "         */",
        "        var frJava = JavaImporter(",
        "            org.forgerock.oauth2.core.exceptions.InvalidRequestException,",
        "            org.forgerock.oauth2.core.UserInfoClaims,",
        "            org.forgerock.openidconnect.Claim,",
        "",
        "            java.util.LinkedHashMap,",
        "            java.util.ArrayList",
        "        );",
        "",
        "        // SET UP CONFIGURATION",
        "",
        "        /**",
        "         * Placeholder for a configuration option that contains",
        "         * an object that maps the supported scope values (scopes)",
        "         * and the corresponding claim names for each scope value.",
        "         */",
        "        var scopeClaimsMap;",
        "",
        "        /**",
        "         * Placeholder for a configuration option that contains",
        "         * an object that maps the supported claim names",
        "         * and the resolver functions returning the claim value.",
        "         */",
        "        var claimResolvers;",
        "",
        "        /**",
        "         * A (public) method that accepts an object that maps the supported scopes and the corresponding claim names,",
        "         * and assigns it to a (private) variable that serves as a configuration option.",
        "         * @param {object} params - An object that maps each supported scope value to an array of claim names,",
        "         * in order to specify which claims need to be processed for the requested scopes.",
        "         * @see {@link https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims} for details.",
        "         * @param {string[]} [params.profile] - An array of claim names to be returned if the profile scope is requested.",
        "         * @param {string[]} [params.email] - An array of claim names to be returned if the email scope is requested.",
        "         * @param {string[]} [params.address] - An array of claim names to be returned if the address scope is requested.",
        "         * @param {string[]} [params.phone] - An array of claim names to be returned if the phone scope is requested.",
        "         * @returns {undefined}",
        "         */",
        "        function setScopeClaimsMap(params) {",
        "            scopeClaimsMap = params;",
        "        }",
        "",
        "        /**",
        "         * A (public) method that accepts an object that maps the supported claim names",
        "         * and the resolver functions returning the claim value,",
        "         * and assigns it to a (private) variable that serves as a configuration option.",
        "         * @param {object} params - An object that maps",
        "         * each supported claim name to a function that computes and returns the claim value.",
        "         */",
        "        function setClaimResolvers(params) {",
        "            claimResolvers = params;",
        "        }",
        "",
        "        // CLAIM RESOLVERS",
        "",
        "        /**",
        "         * Claim resolvers are functions that return a claim value.",
        "         * @param {*}",
        "         * @returns {*}",
        "         */",
        "",
        "        /**",
        "         * Defines a claim resolver based on a user profile attribute.",
        "         * @param {string} attributeName - Name of the user profile attribute.",
        "         * @returns {function} A function that will determine the claim value",
        "         * based on the user profile attribute and the (requested) claim properties.",
        "         */",
        "        function getUserProfileClaimResolver (attributeName) {",
        "            /**",
        "             * Resolves a claim with a user profile attribute value.",
        "             * Returns undefined if the identity attribute is not populated,",
        "             * OR if the claim has requested values that do not contain the identity attribute value.",
        "             * ATTENTION: the aforementioned comparison is case-sensitive.",
        "             * @param {org.forgerock.openidconnect.Claim} claim",
        "             * An object that provides methods to obtain information/requirements associated with a claim.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "             * @returns {string|HashSet|undefined}",
        "             */",
        "            function resolveClaim(claim) {",
        "                var userProfileValue;",
        "",
        "                if (identity) {",
        "                    userProfileValue = getClaimValueFromSet(claim, identity.getAttribute(attributeName));",
        "",
        "                    if (userProfileValue && !userProfileValue.isEmpty()) {",
        "                        if (!claim.getValues() || claim.getValues().isEmpty() || claim.getValues().contains(userProfileValue)) {",
        "                            return userProfileValue;",
        "                        }",
        "                    }",
        "                }",
        "            }",
        "",
        "            return resolveClaim;",
        "        }",
        "",
        "        /**",
        "         * Returns an address claim resolver based on a claim value obtained with another claim resolver.",
        "         * @param {function} resolveClaim - A function that returns a claim value.",
        "         * @returns {function} A function that will accept a claim as an argument,",
        "         * run the claim resolver function for the claim and obtain the claim value,",
        "         * and apply additional formatting to the value before returning it.",
        "         */",
        "        function getAddressClaimResolver (resolveClaim) {",
        "            /**",
        "             * Creates an address claim object from a value returned by a claim resolver,",
        "             * and returns the address claim object as the claim value.",
        "             * @see {@link https://openid.net/specs/openid-connect-core-1_0.html#AddressClaim}.",
        "             * The claim value is obtained with a claim resolving function available from the closure.",
        "             * @param {org.forgerock.openidconnect.Claim} claim",
        "             * An object that provides methods to obtain information/requirements associated with a claim.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "             * @returns {java.util.LinkedHashMap|undefined} The address claim object created from a claim value.",
        "             */",
        "            function resolveAddressClaim(claim) {",
        "                var claimValue = resolveClaim(claim);",
        "                var addressObject;",
        "",
        "                if (isClaimValueValid(claimValue)) {",
        "                    addressObject = new frJava.LinkedHashMap();",
        "",
        "                    addressObject.put('formatted', claimValue);",
        "",
        "                    return addressObject;",
        "                }",
        "            }",
        "",
        "            return resolveAddressClaim;",
        "        }",
        "",
        "        /**",
        "         * Returns an essential claim resolver based on a claim value obtained with another claim resolver.",
        "         * @param {function} resolveClaim - A function that returns a claim value.",
        "         * @returns {function} A function that will accept a claim as an argument,",
        "         * run the claim resolver function for the claim and obtain the claim value,",
        "         * and apply additional logic for essential claims.",
        "         */",
        "        function getEssentialClaimResolver (resolveClaim) {",
        "            /**",
        "             * Returns a claim value or throws an error.",
        "             * The claim value is obtained with a claim resolving function available from the closure.",
        "             * Throws an exception if the claim is essential and no value is returned for the claim.",
        "             *",
        "             * Use of this resolver is optional.",
        "             * @see {@link https://openid.net/specs/openid-connect-core-1_0.html#IndividualClaimsRequests} stating:",
        "             * "Note that even if the Claims are not available because the End-User did not authorize their release or they are not present,",
        "             * the Authorization Server MUST NOT generate an error when Claims are not returned, whether they are Essential or Voluntary,",
        "             * unless otherwise specified in the description of the specific claim."",
        "             *",
        "             * @param {org.forgerock.openidconnect.Claim} claim",
        "             * An object that provides methods to obtain information/requirements associated with a claim.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "             * @returns {*}",
        "             * @throws {org.forgerock.oauth2.core.exceptions.InvalidRequestException}",
        "             */",
        "            function resolveEssentialClaim(claim) {",
        "                var claimValue = resolveClaim(claim);",
        "",
        "                if (claim.isEssential() && !isClaimValueValid(claimValue)) {",
        "                    throw new frJava.InvalidRequestException('Could not provide value for essential claim: ' + claim.getName());",
        "                }",
        "",
        "                return claimValue;",
        "            }",
        "",
        "            return resolveEssentialClaim;",
        "        }",
        "",
        "        /**",
        "         * Provides default resolution for a claim.",
        "         * Use it if a claim-specific resolver is not defined in the configuration.",
        "         * @param {org.forgerock.openidconnect.Claim} claim",
        "         * An object that provides methods to obtain information/requirements associated with a claim.",
        "         * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "         * @returns {*} A single value associated with this claim.",
        "         */",
        "        function resolveAnyClaim (claim) {",
        "            if (claim.getValues().size() === 1) {",
        "                return claim.getValues().toArray()[0];",
        "            }",
        "        }",
        "",
        "        // UTILITIES",
        "",
        "        /**",
        "         * Returns claim value from a set.",
        "         * If the set contains a single value, returns the value.",
        "         * If the set contains multiple values, returns the set.",
        "         * Otherwise, returns undefined.",
        "         *",
        "         * @param {org.forgerock.openidconnect.Claim} claim",
        "         * An object that provides methods to obtain information/requirements associated with a claim.",
        "         * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "         * @param {java.util.HashSet} set The set—for example, a user profile attribute value.",
        "         * @returns {string|java.util.HashSet|undefined}",
        "         */",
        "        function getClaimValueFromSet (claim, set) {",
        "            if (set && set.size()) {",
        "                if (set.size() === 1) {",
        "                    return set.toArray()[0];",
        "                } else {",
        "                    return set;",
        "                }",
        "            } else if (logger.warningEnabled()) {",
        "                logger.warning('OIDC Claims script. Got an empty set for claim: ' + claim.getName());",
        "            }",
        "        }",
        "",
        "        function isClaimValueValid (claimValue) {",
        "            if (typeof claimValue === 'undefined' || claimValue === null) {",
        "                return false;",
        "            }",
        "",
        "            return true;",
        "        }",
        "",
        "        // CLAIM PROCESSING",
        "",
        "        /**",
        "         * Constructs and returns an object populated with the computed claim values",
        "         * and the requested scopes mapped to the claim names.",
        "         * @returns {org.forgerock.oauth2.core.UserInfoClaims} The object to be returned to the authorization server.",
        "         * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/oauth2/core/UserInfoClaims.html}.",
        "         * @see RESULTS section for the use of this function.",
        "         */",
        "        function getUserInfoClaims () {",
        "            return new frJava.UserInfoClaims(getComputedClaims(), getCompositeScopes());",
        "        }",
        "",
        "        /**",
        "         * Creates a map of (requested) claim names populated with the computed claim values.",
        "         * @returns {java.util.LinkedHashMap}",
        "         * A map of the requested claim names and the corresponding claim values.",
        "         */",
        "        function getComputedClaims () {",
        "            /**",
        "             * Creates a complete list of claim objects from:",
        "             * the claims derived from the scopes,",
        "             * the claims provided by the authorization server,",
        "             * and the claims requested by the client.",
        "             * @returns {java.util.ArrayList}",
        "             * Returns a complete list of org.forgerock.openidconnect.Claim objects available to the script.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for the claim object details.",
        "             */",
        "            function getClaims() {",
        "                /**",
        "                 * Returns a list of claim objects for the requested scopes.",
        "                 * Uses the scopeClaimsMap configuration option to derive the claim names;",
        "                 * no other properties of a claim derived from a scope are populated.",
        "                 * @returns {java.util.ArrayList}",
        "                 * A list of org.forgerock.openidconnect.Claim objects derived from the requested scopes.",
        "                 * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for the claim object details.",
        "                 */",
        "                function convertScopeToClaims() {",
        "                    var claims = new frJava.ArrayList();",
        "",
        "                    scopes.toArray().forEach(function (scope) {",
        "                        if (String(scope) !== 'openid' && scopeClaimsMap[scope]) {",
        "                            scopeClaimsMap[scope].forEach(function (claimName) {",
        "                                claims.add(new frJava.Claim(claimName));",
        "                            });",
        "                        }",
        "                    });",
        "",
        "                    return claims;",
        "                }",
        "",
        "                var claims = new frJava.ArrayList();",
        "",
        "                claims.addAll(convertScopeToClaims());",
        "                claims.addAll(claimObjects);",
        "                claims.addAll(requestedTypedClaims);",
        "",
        "                return claims;",
        "            }",
        "",
        "            /**",
        "             * Computes and returns a claim value.",
        "             * To obtain the claim value, uses the resolver function specified for the claim in the claimResolvers configuration object.",
        "             * @see claimResolvers",
        "             * If no resolver function is found, uses the default claim resolver function.",
        "             *",
        "             * @param {org.forgerock.openidconnect.Claim} claim",
        "             * An object that provides methods to obtain information/requirements associated with a claim.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "             * @returns {*} Claim value.",
        "             * @throws {org.forgerock.oauth2.core.exceptions.InvalidRequestException}",
        "             * Rethrows this exception if a claim resolver throws it.",
        "             * You can throw org.forgerock.oauth2.core.exceptions.InvalidRequestException from your custom claim resolver",
        "             * if you want to terminate the claim processing.",
        "             */",
        "            function computeClaim(claim) {",
        "                var resolveClaim;",
        "                var message;",
        "",
        "                try {",
        "                    resolveClaim = claimResolvers[claim.getName()] || resolveAnyClaim;",
        "",
        "                    return resolveClaim(claim);",
        "                } catch (e) {",
        "                    message = 'OIDC Claims script exception. Unable to resolve OIDC Claim. ' + e;",
        "",
        "                    if (String(e).indexOf('org.forgerock.oauth2.core.exceptions.InvalidRequestException') !== -1) {",
        "                        throw e;",
        "                    }",
        "",
        "                    if (logger.warningEnabled()) {",
        "                        logger.warning(message);",
        "                    }",
        "                }",
        "            }",
        "",
        "            var computedClaims = new frJava.LinkedHashMap();",
        "",
        "            getClaims().toArray().forEach(function (claim) {",
        "                var claimValue = computeClaim(claim);",
        "",
        "                if (isClaimValueValid(claimValue)) {",
        "                    computedClaims.put(claim.getName(), claimValue);",
        "                } else {",
        "                    /**",
        "                     * If a claim has been processed, but appears in the list again,",
        "                     * and its value cannot be computed under the new conditions,",
        "                     * the claim is removed from the final result.",
        "                     *",
        "                     * For example, a claim could be mapped to a scope and found in the user profile,",
        "                     * but also requested by the client with required values that don't match the computed one.",
        "                     * @see {link https://openid.net/specs/openid-connect-core-1_0.html#IndividualClaimsRequests}.",
        "                     * for the relevant OIDC specification details.",
        "                     */",
        "                    computedClaims.remove(claim.getName());",
        "                }",
        "            });",
        "",
        "            return computedClaims;",
        "        }",
        "",
        "        /**",
        "         * Creates a map of requested scopes and the corresponding claim names.",
        "         * @returns {java.util.LinkedHashMap}",
        "         */",
        "        function getCompositeScopes () {",
        "            var compositeScopes = new frJava.LinkedHashMap();",
        "",
        "            scopes.toArray().forEach(function (scope) {",
        "                var scopeClaims = new frJava.ArrayList();",
        "",
        "                if (scopeClaimsMap[scope]) {",
        "                    scopeClaimsMap[scope].forEach(function (claimName) {",
        "                        scopeClaims.add(claimName);",
        "                    });",
        "                }",
        "",
        "                if (scopeClaims.size()) {",
        "                    compositeScopes.put(scope, scopeClaims);",
        "                }",
        "            });",
        "",
        "            return compositeScopes;",
        "        }",
        "",
        "        // PUBLIC METHODS",
        "",
        "        return {",
        "            setScopeClaimsMap: setScopeClaimsMap,",
        "            setClaimResolvers: setClaimResolvers,",
        "            getUserProfileClaimResolver: getUserProfileClaimResolver,",
        "            getAddressClaimResolver: getAddressClaimResolver,",
        "            getEssentialClaimResolver: getEssentialClaimResolver,",
        "            getUserInfoClaims: getUserInfoClaims",
        "        };",
        "    }",
        "",
        "    // RESULTS",
        "",
        "    /**",
        "     * This script returns an instance of the org.forgerock.oauth2.core.UserInfoClaims class",
        "     * populated with the computed claim values and",
        "     * the requested scopes mapped to the claim names.",
        "     * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/oauth2/core/UserInfoClaims.html}.",
        "     *",
        "     * Assigning it to a variable gives you an opportunity",
        "     * to log the content of the returned value during development.",
        "     */",
        "    var userInfoClaims = utils.getUserInfoClaims();",
        "",
        "    /*",
        "    logger.error(scriptName + ' results:')",
        "    logger.error('Values: ' + userInfoClaims.getValues())",
        "    logger.error('Scopes: ' + userInfoClaims.getCompositeScopes())",
        "    */",
        "",
        "    return userInfoClaims;",
        "}());",
        "",
      ],
    },
    "d2dc1ae7-ca1b-4ce4-81b8-5d58dfba73b1": {
      "_id": "d2dc1ae7-ca1b-4ce4-81b8-5d58dfba73b1",
      "context": "SAML2_IDP_ADAPTER",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Always redirect browser pre-auth",
      "evaluatorVersion": "1.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Saml2 IDP Adapter Always Auth - imported (1)",
      "script": [
        "/*",
        " * Copyright 2021-2022 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        " * The script has these top level functions that could be executed during a SAML2 flow.",
        " *      - preSingleSignOn",
        " *      - preAuthentication",
        " *      - preSendResponse",
        " *      - preSignResponse",
        " *      - preSendFailureResponse",
        " *",
        " * Please see the javadoc for the interface definition and more information about these methods.",
        " * https://backstage.forgerock.com/docs/am/7.2/apidocs/com/sun/identity/saml2/plugins/SAML2IdentityProviderAdapter.html",
        " * Note that the initialize method is not supported in the scripts.",
        " *",
        " * Defined variables. Check the documentation on the respective functions for the variables available to it.",
        " *",
        " * hostedEntityId - String",
        " *     Entity ID for the hosted IDP",
        " * realm - String",
        " *     Realm of the hosted IDP",
        " * idpAdapterScriptHelper - IdpAdapterScriptHelper (1)",
        " *     An instance of IdpAdapterScriptHelper containing helper methods. See Javadoc for more details.",
        " * request - HttpServletRequest (2)",
        " *     Servlet request object",
        " * response - HttpServletResponse (3)",
        " *     Servlet response object",
        " * authnRequest - AuthnRequest (4)",
        " *     The original authentication request sent from SP",
        " * reqId - String",
        " *     The id to use for continuation of processing if the adapter redirects",
        " * res - Response (5)",
        " *     The SAML Response",
        " * session - SSOToken (6)",
        " *     The single sign-on session. The reference type of this is Object and would need to be casted to SSOToken.",
        " * relayState - String",
        " *     The relayState that will be used in the redirect",
        " * faultCode - String",
        " *     the fault code that will be returned in the SAML response",
        " * faultDetail - String",
        " *     the fault detail that will be returned in the SAML response",
        " * logger - Logger instance",
        " *     https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.",
        " *     Corresponding log files will be prefixed with: scripts.<script name>",
        " *",
        " * Throws SAML2Exception (7):",
        " *     for any exceptions occurring in the adapter. The federation process will continue",
        " *",
        " * Class reference:",
        " * (1) idpAdapterScriptHelper - https://backstage.forgerock.com/docs/am/7.2/apidocs/com/sun/identity/saml2/plugins/scripted/IdpAdapterScriptHelper.html.",
        " * (2) HttpServletRequest - https://tomcat.apache.org/tomcat-7.0-doc/servletapi/javax/servlet/http/HttpServletRequest.html.",
        " * (3) HttpServletResponse - https://tomcat.apache.org/tomcat-7.0-doc/servletapi/javax/servlet/http/HttpServletResponse.html.",
        " * (4) AuthnRequest - https://backstage.forgerock.com/docs/am/7.2/apidocs/com/sun/identity/saml2/protocol/AuthnRequest.html.",
        " * (5) Response - https://backstage.forgerock.com/docs/am/7.2/apidocs/com/sun/identity/saml2/protocol/Response.html.",
        " * (6) SSOToken - https://backstage.forgerock.com/docs/am/7.2/apidocs/com/iplanet/sso/SSOToken.html.",
        " * (7) SAML2Exception - https://backstage.forgerock.com/docs/am/7.2/apidocs/com/sun/identity/saml2/common/SAML2Exception.html.",
        " */",
        "",
        "/*",
        " * Template/default script for SAML2 IDP Adapter scripted plugin.",
        " */",
        "",
        "/*",
        " * Available variables for preSingleSignOn:",
        " *     hostedEntityId",
        " *     realm",
        " *     idpAdapterScriptHelper",
        " *     request",
        " *     authnRequest",
        " *     response",
        " *     reqId",
        " *     logger",
        " *",
        " * Return - true if browser redirection is happening after processing, false otherwise. Default to false.",
        " */",
        "function preSingleSignOn () {",
        "      logger.error("Chicago: preSingleSignOn");",
        "    return true;",
        "}",
        "",
        "/*",
        " * Available variables for preAuthentication:",
        " *     hostedEntityId",
        " *     realm",
        " *     idpAdapterScriptHelper",
        " *     request",
        " *     authnRequest",
        " *     response",
        " *     reqId",
        " *     session",
        " *     relayState",
        " *     logger",
        " *",
        " * Return - true if browser redirection is happening after processing, false otherwise. Default to false.",
        " */",
        "function preAuthentication () {",
        "      logger.error("Chicago: preAuthentication");",
        "    return true;",
        "}",
        "",
        "/*",
        " * Available variables for preSendResponse:",
        " *     hostedEntityId",
        " *     realm",
        " *     idpAdapterScriptHelper",
        " *     request",
        " *     authnRequest",
        " *     response",
        " *     reqId",
        " *     session",
        " *     relayState",
        " *     logger",
        " *",
        " * Return - true if browser redirection happened after processing, false otherwise. Default to false.",
        " */",
        "function preSendResponse () {",
        "      logger.error("Chicago: preSendResponse");",
        "      logger.error("Chicago: authnRequest: "+authnRequest);",
        "      response.sendRedirect("https://idc.scheuber.io/am/XUI/?realm=alpha&authIndexType=service&authIndexValue=Dispatcher&ForceAuth=true&goto="+relayState);",
        "    return true;",
        "}",
        "",
        "/*",
        " * Available variables for preSignResponse:",
        " *     hostedEntityId",
        " *     realm",
        " *     idpAdapterScriptHelper",
        " *     request",
        " *     authnRequest",
        " *     session",
        " *     relayState",
        " *     res",
        " *     logger",
        " */",
        "function preSignResponse () {",
        "      logger.error("Chicago: preSignResponse");",
        "}",
        "",
        "/*",
        " * Available variables for preSendFailureResponse:",
        " *     hostedEntityId",
        " *     realm",
        " *     idpAdapterScriptHelper",
        " *     request",
        " *     response",
        " *     faultCode",
        " *     faultDetail",
        " *     logger",
        " */",
        "function preSendFailureResponse () {",
        "      logger.error("Chicago: preSendFailureResponse");",
        "}",
      ],
    },
    "d58977ed-0542-4147-8197-973ef7300191": {
      "_id": "d58977ed-0542-4147-8197-973ef7300191",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Custom Device Match Script",
      "evaluatorVersion": "1.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Custom Device Match Script",
      "script": [
        ""/*\\n * Custom Device Match Script\\n */\\n\\noutcome = \\"true\\";"",
      ],
    },
    "da7a96a8-7969-4dab-9c6e-a812938cc76d": {
      "_id": "da7a96a8-7969-4dab-9c6e-a812938cc76d",
      "context": "LIBRARY",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Script that uses secrets and variables",
      "evaluatorVersion": "2.0",
      "exports": [],
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "test-script-with-secrets-and-variables",
      "script": [
        "console.log(\`pi: \${systemEnv.getProperty("esv.test.var.pi")}\`);",
        "console.log(\`pi secret: \${systemEnv.getProperty("esv.test.secret.pi")}\`);",
        "console.log(\`speed of light: \${systemEnv.getProperty("esv.test.variable.light")}\`);",
        "console.log(\`euler's number: \${systemEnv.getProperty("esv.test.secret.euler")}\`);",
        "console.log(\`Area of circle with radius 7: \${7 * 7 * systemEnv.getProperty("esv.test.var.pi")}\`);",
        "console.log(\`Volume of sphere with radius 7: \${4 * 7 * 7 * 7 * systemEnv.getProperty("esv.test.secret.pi") / 3}\`);",
        "",
      ],
    },
    "dbe0bf9a-72aa-49d5-8483-9db147985a47": {
      "_id": "dbe0bf9a-72aa-49d5-8483-9db147985a47",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Normalizes raw profile data from ADFS",
      "evaluatorVersion": "1.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "ADFS Profile Normalization (JS)",
      "script": [
        ""/*\\n * Copyright 2022 ForgeRock AS. All Rights Reserved\\n *\\n * Use of this code requires a commercial software license with ForgeRock AS\\n * or with one of its affiliates. All use shall be exclusively subject\\n * to such license between the licensee and ForgeRock AS.\\n */\\n\\n/*\\n * This script returns the social identity profile information for the authenticating user\\n * in a standard form expected by the Social Provider Handler Node.\\n *\\n * Defined variables:\\n * rawProfile - The social identity provider profile information for the authenticating user.\\n *              JsonValue (1).\\n * logger - The debug logger instance:\\n *          https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.\\n * realm - String (primitive).\\n *         The name of the realm the user is authenticating to.\\n * requestHeaders - TreeMap (2).\\n *                  The object that provides methods for accessing headers in the login request:\\n *                  https://backstage.forgerock.com/docs/am/7/authentication-guide/scripting-api-node.html#scripting-api-node-requestHeaders.\\n * requestParameters - TreeMap (2).\\n *                     The object that contains the authentication request parameters.\\n * selectedIdp - String (primitive).\\n *               The social identity provider name. For example: google.\\n * sharedState - LinkedHashMap (3).\\n *               The object that holds the state of the authentication tree and allows data exchange between the stateless nodes:\\n *               https://backstage.forgerock.com/docs/am/7/auth-nodes/core-action.html#accessing-tree-state.\\n * transientState - LinkedHashMap (3).\\n *                  The object for storing sensitive information that must not leave the server unencrypted,\\n *                  and that may not need to persist between authentication requests during the authentication session:\\n *                  https://backstage.forgerock.com/docs/am/7/auth-nodes/core-action.html#accessing-tree-state.\\n *\\n * Return - a JsonValue (1).\\n *          The result of the last statement in the script is returned to the server.\\n *          Currently, the Immediately Invoked Function Expression (also known as Self-Executing Anonymous Function)\\n *          is the last (and only) statement in this script, and its return value will become the script result.\\n *          Do not use \\"return variable\\" statement outside of a function definition.\\n *\\n *          This script's last statement should result in a JsonValue (1) with the following keys:\\n *          {\\n *              {\\"displayName\\": \\"corresponding-social-identity-provider-value\\"},\\n *              {\\"email\\": \\"corresponding-social-identity-provider-value\\"},\\n *              {\\"familyName\\": \\"corresponding-social-identity-provider-value\\"},\\n *              {\\"givenName\\": \\"corresponding-social-identity-provider-value\\"},\\n *              {\\"id\\": \\"corresponding-social-identity-provider-value\\"},\\n *              {\\"locale\\": \\"corresponding-social-identity-provider-value\\"},\\n *              {\\"photoUrl\\": \\"corresponding-social-identity-provider-value\\"},\\n *              {\\"username\\": \\"corresponding-social-identity-provider-value\\"}\\n *          }\\n *\\n *          The consumer of this data defines which keys are required and which are optional.\\n *          For example, the script associated with the Social Provider Handler Node and,\\n *          ultimately, the managed object created/updated with this data\\n *          will expect certain keys to be populated.\\n *          In some common default configurations, the following keys are required to be not empty:\\n *          username, givenName, familyName, email.\\n *\\n *          From RFC4517: A value of the Directory String syntax is a string of one or more\\n *          arbitrary characters from the Universal Character Set (UCS).\\n *          A zero-length character string is not permitted.\\n *\\n * (1) JsonValue - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/json/JsonValue.html.\\n * (2) TreeMap - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/TreeMap.html.\\n * (3) LinkedHashMap - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/LinkedHashMap.html.\\n */\\n\\n(function () {\\n    var frJava = JavaImporter(\\n        org.forgerock.json.JsonValue\\n    );\\n\\n    var normalizedProfileData = frJava.JsonValue.json(frJava.JsonValue.object());\\n  \\n  \\t//logger.message('Seguin rawProfile: '+rawProfile);\\n\\n    normalizedProfileData.put('id', rawProfile.get('sub').asString());\\n    normalizedProfileData.put('displayName', rawProfile.get('givenName').asString() + ' ' + rawProfile.get('sn').asString());\\n    normalizedProfileData.put('email', rawProfile.get('mail').asString());\\n    normalizedProfileData.put('givenName', rawProfile.get('givenName').asString());\\n    normalizedProfileData.put('familyName', rawProfile.get('sn').asString());\\n    normalizedProfileData.put('username', rawProfile.get('upn').asString());\\n    normalizedProfileData.put('roles', rawProfile.get('roles').asString());\\n  \\n  \\t//logger.message('Seguin normalizedProfileData: '+normalizedProfileData);\\n\\n    return normalizedProfileData;\\n}());"",
      ],
    },
    "e1db8a0a-0329-4962-a5bf-ecffaca376ae": {
      "_id": "e1db8a0a-0329-4962-a5bf-ecffaca376ae",
      "context": "OIDC_CLAIMS",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Used by endUserUIClient",
      "evaluatorVersion": "1.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Alpha endUserUIClient OIDC Claims Script",
      "script": [
        "/*",
        " * Copyright 2014-2021 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        " * This script computes claim values returned in ID tokens and/or at the UserInfo Endpoint.",
        " * The claim values are computed for:",
        " * the claims derived from the requested scopes,",
        " * the claims provided by the authorization server,",
        " * and the claims requested by the client via the claims parameter.",
        " *",
        " * In the CONFIGURATION AND CUSTOMIZATION section, you can",
        " * define the scope-to-claims mapping, and",
        " * assign to each claim a resolver function that will compute the claim value.",
        " *",
        " * Defined variables (class references are provided below):",
        " * scopes - Set<String> (6).",
        " *          Always present, the requested scopes.",
        " * claims - Map<String, Object> (5).",
        " *          Always present, default server provided claims.",
        " * claimObjects - List<Claim> (7, 2).",
        " *                Always present, the default server provided claims.",
        " * requestedClaims - Map<String, Set<String>> (5).",
        " *                   Always present, not empty if the request contains the claims parameter and the server has enabled",
        " *                   claims_parameter_supported. A map of the requested claims to possible values, otherwise empty;",
        " *                   requested claims with no requested values will have a key but no value in the map. A key with",
        " *                   a single value in its Set (6) indicates that this is the only value that should be returned.",
        " * requestedTypedClaims - List<Claim> (7, 2).",
        " *                        Always present, the requested claims.",
        " *                        Requested claims with no requested values will have a claim with no values.",
        " *                        A claim with a single value indicates this is the only value that should be returned.",
        " * claimsLocales - List<String> (7).",
        " *                 The values from the 'claims_locales' parameter.",
        " *                 See https://openid.net/specs/openid-connect-core-1_0.html#ClaimsLanguagesAndScripts for the OIDC specification details.",
        " * requestProperties - Unmodifiable Map (5).",
        " *                     Always present, contains a map of request properties:",
        " *                     requestUri - The request URI.",
        " *                     realm - The realm that the request relates to.",
        " *                     requestParams - A map of the request params and/or posted data.",
        " *                                     Each value is a list of one or more properties.",
        " *                                     Please note that these should be handled in accordance with OWASP best practices:",
        " *                                     https://owasp.org/www-community/vulnerabilities/Unsafe_use_of_Reflection.",
        " * clientProperties - Unmodifiable Map (5).",
        " *                    Present if the client specified in the request was identified, contains a map of client properties:",
        " *                    clientId - The client's URI for the request locale.",
        " *                    allowedGrantTypes - List of the allowed grant types (org.forgerock.oauth2.core.GrantType) for the client.",
        " *                    allowedResponseTypes - List of the allowed response types for the client.",
        " *                    allowedScopes - List of the allowed scopes for the client.",
        " *                    customProperties - A map of the custom properties of the client.",
        " *                                       Lists or maps will be included as sub-maps; for example:",
        " *                                       customMap[Key1]=Value1 will be returned as customMap -> Key1 -> Value1.",
        " *                                       To add custom properties to a client, update the Custom Properties field",
        " *                                       in AM Console > Realm Name > Applications > OAuth 2.0 > Clients > Client ID > Advanced.",
        " * identity - AMIdentity (3).",
        " *            Always present, the identity of the resource owner.",
        " * session - SSOToken (4).",
        " *           Present if the request contains the session cookie, the user's session object.",
        " * scriptName - String (primitive).",
        " *              Always present, the display name of the script.",
        " * logger - Always present, the "OAuth2Provider" debug logger instance:",
        " *          https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.",
        " *          Corresponding files will be prefixed with: scripts.OIDC_CLAIMS.",
        " * httpClient - HTTP Client (8).",
        " *              Always present, the HTTP Client instance:",
        " *              https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-http-client.html#scripting-api-global-http-client.",
        " *              In order to use the client, you may need to add",
        " *              org.forgerock.http.Client,",
        " *              org.forgerock.http.protocol.*,",
        " *              and org.forgerock.util.promise.PromiseImpl",
        " *              to the allowed Java classes in the scripting engine configuration, as described in:",
        " *              https://backstage.forgerock.com/docs/am/7/scripting-guide/script-engine-security.html",
        " *",
        " * Return - a new UserInfoClaims(Map<String, Object> values, Map<String, List<String>> compositeScopes) (1) object.",
        " *          The result of the last statement in the script is returned to the server.",
        " *          Currently, the Immediately Invoked Function Expression (also known as Self-Executing Anonymous Function)",
        " *          is the last (and only) statement in this script, and its return value will become the script result.",
        " *          Do not use "return variable" statement outside of a function definition.",
        " *          See RESULTS section for additional details.",
        " *",
        " * Class reference:",
        " * (1) UserInfoClaims - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/oauth2/core/UserInfoClaims.html.",
        " * (2) Claim - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html).",
        " *         An instance of org.forgerock.openidconnect.Claim has methods to access",
        " *         the claim name, requested values, locale, and whether the claim is essential.",
        " * (3) AMIdentity - https://backstage.forgerock.com/docs/am/7/apidocs/com/sun/identity/idm/AMIdentity.html.",
        " * (4) SSOToken - https://backstage.forgerock.com/docs/am/7/apidocs/com/iplanet/sso/SSOToken.html.",
        " * (5) Map - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashMap.html,",
        " *           or https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/LinkedHashMap.html.",
        " * (6) Set - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashSet.html.",
        " * (7) List - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/ArrayList.html.",
        " * (8) Client - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/http/Client.html.",
        "*/",
        "",
        "(function () {",
        "    // SETUP",
        "",
        "    /**",
        "     * Claim processing utilities.",
        "     * An object that contains reusable functions for processing claims.",
        "     * @see CLAIM PROCESSING UTILITIES section for details.",
        "     */",
        "    var utils = getUtils();",
        "",
        "    // CONFIGURATION AND CUSTOMIZATION",
        "",
        "    /**",
        "     * OAuth 2.0 scope values (scopes) can be used by the Client to request OIDC claims.",
        "     *",
        "     * Call this configuration method, and pass in as the first argument",
        "     * an object that maps a scope value to an array of claim names",
        "     * to specify which claims need to be processed and returned for the requested scopes.",
        "     * @see {@link https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims}",
        "     * for the scope values that could be used to request claims as defined in the OIDC specification.",
        "     *",
        "     * Below, find a default configuration that is expected to work in the current environment.",
        "     *",
        "     * CUSTOMIZATION",
        "     * You can choose the claim names returned for a scope.",
        "     */",
        "    utils.setScopeClaimsMap({",
        "        profile: [",
        "            'name',",
        "            'family_name',",
        "            'given_name',",
        "            'zoneinfo',",
        "            'locale'",
        "        ],",
        "        email: ['email'],",
        "        address: ['address'],",
        "        phone: ['phone_number']",
        "    });",
        "",
        "    /**",
        "     * In this script, each claim",
        "     * derived from the requested scopes,",
        "     * provided by the authorization server, and",
        "     * requested by the client via the claims parameter",
        "     * will be processed by a function associated with the claim name.",
        "     *",
        "     * Call this configuration method, and pass in as the first argument",
        "     * an object that maps a claim name to a resolver function,",
        "     * which will be automatically executed for each claim processed by the script.",
        "     *",
        "     * The claim resolver function will receive the requested claim information",
        "     * in an instance of org.forgerock.openidconnect.Claim as the first argument.",
        "     * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html}",
        "     * for details on the Claim class.",
        "     *",
        "     * If the claim resolver function returns a value,",
        "     * other than undefined or null,",
        "     * the claim will be included in the script's results.",
        "     *",
        "     * The Claim instance provides methods to check",
        "     * what the name of the claim is,",
        "     * which values the claim request contains,",
        "     * whether the claim is essential, and",
        "     * which locale the claim is associated with.",
        "     * The resolver function can consider this information when computing and returning the claim value.",
        "     *",
        "     * Below, find a default configuration that is expected to work in the current environment.",
        "     * A reusable function, utils.getUserProfileClaimResolver(String attribute-name),",
        "     * is called to return a claim resolver function based on a user profile attribute.",
        "     * @see CLAIM RESOLVERS section for the implementation details and examples.",
        "     * For the address claim, an example of a claim resolver that uses another claim resolver is provided.",
        "     *",
        "     * CUSTOMIZATION",
        "     * You can reuse the predefined utils methods with your custom arguments.",
        "     * You can also specify a custom resolver function for a claim name,",
        "     * that will compute and return the claim value—as shown in the commented out example below.",
        "     */",
        "    utils.setClaimResolvers({",
        "        /*",
        "        // An example of a simple claim resolver function that is defined for a claim",
        "        // directly in the configuration object:",
        "        custom-claim-name: function (requestedClaim) {",
        "            // In this case, initially, the claim value comes straight from a user profile attribute value:",
        "            var claimValue = identity.getAttribute('custom-attribute-name').toArray()[0]",
        "",
        "            // Optionally, provide additional logic for processing (filtering, formatting, etc.) the claim value.",
        "            // You can use:",
        "            // requestedClaim.getName()",
        "            // requestedClaim.getValues()",
        "            // requestedClaim.getLocale()",
        "            // requestedClaim.isEssential()",
        "",
        "            return claimValue",
        "        },",
        "        */",
        "        /**",
        "         * The use of utils.getUserProfileClaimResolver shows how",
        "         * an argument passed to a function that returns a claim resolver",
        "         * becomes available to the resolver function (via its lexical context).",
        "         */",
        "        name: utils.getUserProfileClaimResolver('cn'),",
        "        family_name: utils.getUserProfileClaimResolver('sn'),",
        "        given_name: utils.getUserProfileClaimResolver('givenname'),",
        "        zoneinfo: utils.getUserProfileClaimResolver('preferredtimezone'),",
        "        locale: utils.getUserProfileClaimResolver('preferredlocale'),",
        "        email: utils.getUserProfileClaimResolver('mail'),",
        "        address: utils.getAddressClaimResolver(",
        "            /**",
        "             * The passed in user profile claim resolver function",
        "             * can be used by the address claim resolver function",
        "             * to obtain the claim value to be formatted as per the OIDC specification:",
        "             * @see https://openid.net/specs/openid-connect-core-1_0.html#AddressClaim.",
        "             */",
        "            utils.getUserProfileClaimResolver('postaladdress')",
        "        ),",
        "        phone_number: utils.getUserProfileClaimResolver('telephonenumber')",
        "    });",
        "",
        "    // CLAIM PROCESSING UTILITIES",
        "",
        "    /**",
        "     * @returns {object} An object that contains reusable claim processing utilities.",
        "     * @see PUBLIC METHODS section and the return statement for the list of exported functions.",
        "     */",
        "    function getUtils () {",
        "        // IMPORT JAVA",
        "",
        "        /**",
        "         * Provides Java scripting functionality.",
        "         * @see {@link https://developer.mozilla.org/en-US/docs/Mozilla/Projects/Rhino/Scripting_Java#javaimporter_constructor}.",
        "         */",
        "        var frJava = JavaImporter(",
        "            org.forgerock.oauth2.core.exceptions.InvalidRequestException,",
        "            org.forgerock.oauth2.core.UserInfoClaims,",
        "            org.forgerock.openidconnect.Claim,",
        "",
        "            java.util.LinkedHashMap,",
        "            java.util.ArrayList",
        "        );",
        "",
        "        // SET UP CONFIGURATION",
        "",
        "        /**",
        "         * Placeholder for a configuration option that contains",
        "         * an object that maps the supported scope values (scopes)",
        "         * and the corresponding claim names for each scope value.",
        "         */",
        "        var scopeClaimsMap;",
        "",
        "        /**",
        "         * Placeholder for a configuration option that contains",
        "         * an object that maps the supported claim names",
        "         * and the resolver functions returning the claim value.",
        "         */",
        "        var claimResolvers;",
        "",
        "        /**",
        "         * A (public) method that accepts an object that maps the supported scopes and the corresponding claim names,",
        "         * and assigns it to a (private) variable that serves as a configuration option.",
        "         * @param {object} params - An object that maps each supported scope value to an array of claim names,",
        "         * in order to specify which claims need to be processed for the requested scopes.",
        "         * @see {@link https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims} for details.",
        "         * @param {string[]} [params.profile] - An array of claim names to be returned if the profile scope is requested.",
        "         * @param {string[]} [params.email] - An array of claim names to be returned if the email scope is requested.",
        "         * @param {string[]} [params.address] - An array of claim names to be returned if the address scope is requested.",
        "         * @param {string[]} [params.phone] - An array of claim names to be returned if the phone scope is requested.",
        "         * @returns {undefined}",
        "         */",
        "        function setScopeClaimsMap(params) {",
        "            scopeClaimsMap = params;",
        "        }",
        "",
        "        /**",
        "         * A (public) method that accepts an object that maps the supported claim names",
        "         * and the resolver functions returning the claim value,",
        "         * and assigns it to a (private) variable that serves as a configuration option.",
        "         * @param {object} params - An object that maps",
        "         * each supported claim name to a function that computes and returns the claim value.",
        "         */",
        "        function setClaimResolvers(params) {",
        "            claimResolvers = params;",
        "        }",
        "",
        "        // CLAIM RESOLVERS",
        "",
        "        /**",
        "         * Claim resolvers are functions that return a claim value.",
        "         * @param {*}",
        "         * @returns {*}",
        "         */",
        "",
        "        /**",
        "         * Defines a claim resolver based on a user profile attribute.",
        "         * @param {string} attributeName - Name of the user profile attribute.",
        "         * @returns {function} A function that will determine the claim value",
        "         * based on the user profile attribute and the (requested) claim properties.",
        "         */",
        "        function getUserProfileClaimResolver (attributeName) {",
        "            /**",
        "             * Resolves a claim with a user profile attribute value.",
        "             * Returns undefined if the identity attribute is not populated,",
        "             * OR if the claim has requested values that do not contain the identity attribute value.",
        "             * ATTENTION: the aforementioned comparison is case-sensitive.",
        "             * @param {org.forgerock.openidconnect.Claim} claim",
        "             * An object that provides methods to obtain information/requirements associated with a claim.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "             * @returns {string|HashSet|undefined}",
        "             */",
        "            function resolveClaim(claim) {",
        "                var userProfileValue;",
        "",
        "                if (identity) {",
        "                    userProfileValue = getClaimValueFromSet(claim, identity.getAttribute(attributeName));",
        "",
        "                    if (userProfileValue && !userProfileValue.isEmpty()) {",
        "                        if (!claim.getValues() || claim.getValues().isEmpty() || claim.getValues().contains(userProfileValue)) {",
        "                            return userProfileValue;",
        "                        }",
        "                    }",
        "                }",
        "            }",
        "",
        "            return resolveClaim;",
        "        }",
        "",
        "        /**",
        "         * Returns an address claim resolver based on a claim value obtained with another claim resolver.",
        "         * @param {function} resolveClaim - A function that returns a claim value.",
        "         * @returns {function} A function that will accept a claim as an argument,",
        "         * run the claim resolver function for the claim and obtain the claim value,",
        "         * and apply additional formatting to the value before returning it.",
        "         */",
        "        function getAddressClaimResolver (resolveClaim) {",
        "            /**",
        "             * Creates an address claim object from a value returned by a claim resolver,",
        "             * and returns the address claim object as the claim value.",
        "             * @see {@link https://openid.net/specs/openid-connect-core-1_0.html#AddressClaim}.",
        "             * The claim value is obtained with a claim resolving function available from the closure.",
        "             * @param {org.forgerock.openidconnect.Claim} claim",
        "             * An object that provides methods to obtain information/requirements associated with a claim.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "             * @returns {java.util.LinkedHashMap|undefined} The address claim object created from a claim value.",
        "             */",
        "            function resolveAddressClaim(claim) {",
        "                var claimValue = resolveClaim(claim);",
        "                var addressObject;",
        "",
        "                if (isClaimValueValid(claimValue)) {",
        "                    addressObject = new frJava.LinkedHashMap();",
        "",
        "                    addressObject.put('formatted', claimValue);",
        "",
        "                    return addressObject;",
        "                }",
        "            }",
        "",
        "            return resolveAddressClaim;",
        "        }",
        "",
        "        /**",
        "         * Returns an essential claim resolver based on a claim value obtained with another claim resolver.",
        "         * @param {function} resolveClaim - A function that returns a claim value.",
        "         * @returns {function} A function that will accept a claim as an argument,",
        "         * run the claim resolver function for the claim and obtain the claim value,",
        "         * and apply additional logic for essential claims.",
        "         */",
        "        function getEssentialClaimResolver (resolveClaim) {",
        "            /**",
        "             * Returns a claim value or throws an error.",
        "             * The claim value is obtained with a claim resolving function available from the closure.",
        "             * Throws an exception if the claim is essential and no value is returned for the claim.",
        "             *",
        "             * Use of this resolver is optional.",
        "             * @see {@link https://openid.net/specs/openid-connect-core-1_0.html#IndividualClaimsRequests} stating:",
        "             * "Note that even if the Claims are not available because the End-User did not authorize their release or they are not present,",
        "             * the Authorization Server MUST NOT generate an error when Claims are not returned, whether they are Essential or Voluntary,",
        "             * unless otherwise specified in the description of the specific claim."",
        "             *",
        "             * @param {org.forgerock.openidconnect.Claim} claim",
        "             * An object that provides methods to obtain information/requirements associated with a claim.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "             * @returns {*}",
        "             * @throws {org.forgerock.oauth2.core.exceptions.InvalidRequestException}",
        "             */",
        "            function resolveEssentialClaim(claim) {",
        "                var claimValue = resolveClaim(claim);",
        "",
        "                if (claim.isEssential() && !isClaimValueValid(claimValue)) {",
        "                    throw new frJava.InvalidRequestException('Could not provide value for essential claim: ' + claim.getName());",
        "                }",
        "",
        "                return claimValue;",
        "            }",
        "",
        "            return resolveEssentialClaim;",
        "        }",
        "",
        "        /**",
        "         * Provides default resolution for a claim.",
        "         * Use it if a claim-specific resolver is not defined in the configuration.",
        "         * @param {org.forgerock.openidconnect.Claim} claim",
        "         * An object that provides methods to obtain information/requirements associated with a claim.",
        "         * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "         * @returns {*} A single value associated with this claim.",
        "         */",
        "        function resolveAnyClaim (claim) {",
        "            if (claim.getValues().size() === 1) {",
        "                return claim.getValues().toArray()[0];",
        "            }",
        "        }",
        "",
        "        // UTILITIES",
        "",
        "        /**",
        "         * Returns claim value from a set.",
        "         * If the set contains a single value, returns the value.",
        "         * If the set contains multiple values, returns the set.",
        "         * Otherwise, returns undefined.",
        "         *",
        "         * @param {org.forgerock.openidconnect.Claim} claim",
        "         * An object that provides methods to obtain information/requirements associated with a claim.",
        "         * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "         * @param {java.util.HashSet} set The set—for example, a user profile attribute value.",
        "         * @returns {string|java.util.HashSet|undefined}",
        "         */",
        "        function getClaimValueFromSet (claim, set) {",
        "            if (set && set.size()) {",
        "                if (set.size() === 1) {",
        "                    return set.toArray()[0];",
        "                } else {",
        "                    return set;",
        "                }",
        "            } else if (logger.warningEnabled()) {",
        "                logger.warning('OIDC Claims script. Got an empty set for claim: ' + claim.getName());",
        "            }",
        "        }",
        "",
        "        function isClaimValueValid (claimValue) {",
        "            if (typeof claimValue === 'undefined' || claimValue === null) {",
        "                return false;",
        "            }",
        "",
        "            return true;",
        "        }",
        "",
        "        // CLAIM PROCESSING",
        "",
        "        /**",
        "         * Constructs and returns an object populated with the computed claim values",
        "         * and the requested scopes mapped to the claim names.",
        "         * @returns {org.forgerock.oauth2.core.UserInfoClaims} The object to be returned to the authorization server.",
        "         * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/oauth2/core/UserInfoClaims.html}.",
        "         * @see RESULTS section for the use of this function.",
        "         */",
        "        function getUserInfoClaims () {",
        "            return new frJava.UserInfoClaims(getComputedClaims(), getCompositeScopes());",
        "        }",
        "",
        "        /**",
        "         * Creates a map of (requested) claim names populated with the computed claim values.",
        "         * @returns {java.util.LinkedHashMap}",
        "         * A map of the requested claim names and the corresponding claim values.",
        "         */",
        "        function getComputedClaims () {",
        "            /**",
        "             * Creates a complete list of claim objects from:",
        "             * the claims derived from the scopes,",
        "             * the claims provided by the authorization server,",
        "             * and the claims requested by the client.",
        "             * @returns {java.util.ArrayList}",
        "             * Returns a complete list of org.forgerock.openidconnect.Claim objects available to the script.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for the claim object details.",
        "             */",
        "            function getClaims() {",
        "                /**",
        "                 * Returns a list of claim objects for the requested scopes.",
        "                 * Uses the scopeClaimsMap configuration option to derive the claim names;",
        "                 * no other properties of a claim derived from a scope are populated.",
        "                 * @returns {java.util.ArrayList}",
        "                 * A list of org.forgerock.openidconnect.Claim objects derived from the requested scopes.",
        "                 * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for the claim object details.",
        "                 */",
        "                function convertScopeToClaims() {",
        "                    var claims = new frJava.ArrayList();",
        "",
        "                    scopes.toArray().forEach(function (scope) {",
        "                        if (String(scope) !== 'openid' && scopeClaimsMap[scope]) {",
        "                            scopeClaimsMap[scope].forEach(function (claimName) {",
        "                                claims.add(new frJava.Claim(claimName));",
        "                            });",
        "                        }",
        "                    });",
        "",
        "                    return claims;",
        "                }",
        "",
        "                var claims = new frJava.ArrayList();",
        "",
        "                claims.addAll(convertScopeToClaims());",
        "                claims.addAll(claimObjects);",
        "                claims.addAll(requestedTypedClaims);",
        "",
        "                return claims;",
        "            }",
        "",
        "            /**",
        "             * Computes and returns a claim value.",
        "             * To obtain the claim value, uses the resolver function specified for the claim in the claimResolvers configuration object.",
        "             * @see claimResolvers",
        "             * If no resolver function is found, uses the default claim resolver function.",
        "             *",
        "             * @param {org.forgerock.openidconnect.Claim} claim",
        "             * An object that provides methods to obtain information/requirements associated with a claim.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "             * @returns {*} Claim value.",
        "             * @throws {org.forgerock.oauth2.core.exceptions.InvalidRequestException}",
        "             * Rethrows this exception if a claim resolver throws it.",
        "             * You can throw org.forgerock.oauth2.core.exceptions.InvalidRequestException from your custom claim resolver",
        "             * if you want to terminate the claim processing.",
        "             */",
        "            function computeClaim(claim) {",
        "                var resolveClaim;",
        "                var message;",
        "",
        "                try {",
        "                    resolveClaim = claimResolvers[claim.getName()] || resolveAnyClaim;",
        "",
        "                    return resolveClaim(claim);",
        "                } catch (e) {",
        "                    message = 'OIDC Claims script exception. Unable to resolve OIDC Claim. ' + e;",
        "",
        "                    if (String(e).indexOf('org.forgerock.oauth2.core.exceptions.InvalidRequestException') !== -1) {",
        "                        throw e;",
        "                    }",
        "",
        "                    if (logger.warningEnabled()) {",
        "                        logger.warning(message);",
        "                    }",
        "                }",
        "            }",
        "",
        "            var computedClaims = new frJava.LinkedHashMap();",
        "",
        "            getClaims().toArray().forEach(function (claim) {",
        "                var claimValue = computeClaim(claim);",
        "",
        "                if (isClaimValueValid(claimValue)) {",
        "                    computedClaims.put(claim.getName(), claimValue);",
        "                } else {",
        "                    /**",
        "                     * If a claim has been processed, but appears in the list again,",
        "                     * and its value cannot be computed under the new conditions,",
        "                     * the claim is removed from the final result.",
        "                     *",
        "                     * For example, a claim could be mapped to a scope and found in the user profile,",
        "                     * but also requested by the client with required values that don't match the computed one.",
        "                     * @see {link https://openid.net/specs/openid-connect-core-1_0.html#IndividualClaimsRequests}.",
        "                     * for the relevant OIDC specification details.",
        "                     */",
        "                    computedClaims.remove(claim.getName());",
        "                }",
        "            });",
        "",
        "            return computedClaims;",
        "        }",
        "",
        "        /**",
        "         * Creates a map of requested scopes and the corresponding claim names.",
        "         * @returns {java.util.LinkedHashMap}",
        "         */",
        "        function getCompositeScopes () {",
        "            var compositeScopes = new frJava.LinkedHashMap();",
        "",
        "            scopes.toArray().forEach(function (scope) {",
        "                var scopeClaims = new frJava.ArrayList();",
        "",
        "                if (scopeClaimsMap[scope]) {",
        "                    scopeClaimsMap[scope].forEach(function (claimName) {",
        "                        scopeClaims.add(claimName);",
        "                    });",
        "                }",
        "",
        "                if (scopeClaims.size()) {",
        "                    compositeScopes.put(scope, scopeClaims);",
        "                }",
        "            });",
        "",
        "            return compositeScopes;",
        "        }",
        "",
        "        // PUBLIC METHODS",
        "",
        "        return {",
        "            setScopeClaimsMap: setScopeClaimsMap,",
        "            setClaimResolvers: setClaimResolvers,",
        "            getUserProfileClaimResolver: getUserProfileClaimResolver,",
        "            getAddressClaimResolver: getAddressClaimResolver,",
        "            getEssentialClaimResolver: getEssentialClaimResolver,",
        "            getUserInfoClaims: getUserInfoClaims",
        "        };",
        "    }",
        "",
        "    // RESULTS",
        "",
        "    /**",
        "     * This script returns an instance of the org.forgerock.oauth2.core.UserInfoClaims class",
        "     * populated with the computed claim values and",
        "     * the requested scopes mapped to the claim names.",
        "     * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/oauth2/core/UserInfoClaims.html}.",
        "     *",
        "     * Assigning it to a variable gives you an opportunity",
        "     * to log the content of the returned value during development.",
        "     */",
        "    var userInfoClaims = utils.getUserInfoClaims();",
        "",
        "    /*",
        "    logger.error(scriptName + ' results:')",
        "    logger.error('Values: ' + userInfoClaims.getValues())",
        "    logger.error('Scopes: ' + userInfoClaims.getCompositeScopes())",
        "    */",
        "",
        "    return userInfoClaims;",
        "}());",
        "",
      ],
    },
    "e232cff3-2460-47cd-80b2-36c86c0d0f06": {
      "_id": "e232cff3-2460-47cd-80b2-36c86c0d0f06",
      "context": "OAUTH2_ACCESS_TOKEN_MODIFICATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Used by endUserUIClient",
      "evaluatorVersion": "1.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Alpha endUserUIClient OAuth2 Access Token Modification Script",
      "script": [
        "(function () {",
        "  if (scopes.contains('fr:autoaccess:*') || scopes.contains('fr:iga:*') || scopes.contains('fr:idc:analytics:*')) {",
        "    var fr = JavaImporter(",
        "      com.sun.identity.idm.IdType",
        "    );",
        "    var groups = [];",
        "    identity.getMemberships(fr.IdType.GROUP).toArray().forEach(function (group) {",
        "      groups.push(group.getAttribute('cn').toArray()[0]);",
        "    });",
        "    accessToken.setField('groups', groups);",
        "  }",
        "}());",
        "",
      ],
    },
    "e5c302c8-f838-4698-87cc-d7225fc82454": {
      "_id": "e5c302c8-f838-4698-87cc-d7225fc82454",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "evaluatorVersion": "1.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "EmailAsUsername",
      "script": [
        "objectAttributes = sharedState.get("objectAttributes")",
        "userName = objectAttributes.get("userName")",
        "",
        "if(userName){",
        "  //Form Fill",
        "  objectAttributes.put("mail", userName)",
        "} else {",
        "  //Social",
        "  objectAttributes.put("userName", objectAttributes.get("mail"))",
        "}",
        "",
        "",
        "sharedState.put("objectAttributes", objectAttributes);",
        "//sharedState.put("username", mail)",
        "",
        "outcome = "true";",
      ],
    },
    "fb09ba1b-e9b9-4517-8f11-a7cfe8b65dfd": {
      "_id": "fb09ba1b-e9b9-4517-8f11-a7cfe8b65dfd",
      "context": "SAML2_SP_ADAPTER",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "evaluatorVersion": "1.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "FrodoSPAdapter - imported (2)",
      "script": [
        "/*",
        " * Copyright 2023 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        " * The script has these top level functions that could be executed during a SAML2 flow.",
        " *      - preSingleSignOnRequest",
        " *      - preSingleSignOnProcess",
        " *      - postSingleSignOnSuccess",
        " *      - postSingleSignOnFailure",
        " *      - postNewNameIDSuccess",
        " *      - postTerminateNameIDSuccess",
        " *      - preSingleLogoutProcess",
        " *      - postSingleLogoutSuccess",
        " *",
        " * Please see the JavaDoc for the interface for more information about these methods.",
        " * https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/org/forgerock/openam/saml2/plugins/SPAdapter.html",
        " * Note that the initialize method is not supported in the scripts.",
        " *",
        " * Defined variables. Check the documentation on the respective functions for the variables available to it.",
        " *",
        " * hostedEntityId - String",
        " *     Entity ID for the hosted IDP",
        " * realm - String",
        " *     Realm of the hosted IDP",
        " * idpEntityId - String",
        " *     The entity ID for the Identity Provider for which the sign-on request will be sent.",
        " * request - HttpServletRequest (1)",
        " *     Servlet request object",
        " * response - HttpServletResponse (2)",
        " *     Servlet response object",
        " * authnRequest - AuthnRequest (3)",
        " *     The authentication request sent that is sent from the Service Provider.",
        " * session - SSOToken (4)",
        " *     The single sign-on session. The reference type of this is Object and would need to be casted to SSOToken.",
        " * res - Response (5)",
        " *     The SSO Response received from the Identity Provider.",
        " * profile - String",
        " *     The protocol profile that is used, this will be one of the following values from SAML2Constants (6):",
        " *          - SAML2Constants.HTTP_POST",
        " *          - SAML2Constants.HTTP_ARTIFACT",
        " *          - SAML2Constants.PAOS",
        " * out - PrintWriter (7)",
        " *     The PrintWriter that can be used to write to.",
        " * isFederation - boolean",
        " *     Set to true if using federation, otherwise false.",
        " * failureCode - int",
        " *     An integer holding the failure code when an error has occurred. For potential values see SPAdapter.",
        " * userId - String",
        " *     The unique universal ID of the user with whom the new name identifier request was performed.",
        " * idRequest - ManageNameIDRequest (8)",
        " *     The new name identifier request, this will be null if the request object is not available",
        " * idResponse - ManageNameIDResponse (9)",
        " *     The new name identifier response, this will be null if the response object is not available",
        " * binding - String",
        " *     The binding used for the new name identifier request. This will be one of the following values:",
        " *          - SAML2Constants.SOAP",
        " *          - SAML2Constants.HTTP_REDIRECT",
        " * logoutRequest - LogoutRequest (10)",
        " *     The single logout request.",
        " * logoutResponse - LogoutResponse (11)",
        " *     The single logout response.",
        " * spAdapterScriptHelper - SpAdapterScriptHelper (12)",
        " *     An instance of SpAdapterScriptHelper containing helper methods. See Javadoc for more details.",
        " * logger - Logger instance",
        " *     https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.",
        " *     Corresponding log files will be prefixed with: scripts.<script name>",
        " *",
        " * Throws SAML2Exception (13):",
        " *     for any exceptions occurring in the adapter. The federation process will continue",
        " *",
        " * Class reference:",
        " * (1) HttpServletRequest - https://tomcat.apache.org/tomcat-7.0-doc/servletapi/javax/servlet/http/HttpServletRequest.html.",
        " * (2) HttpServletResponse - https://tomcat.apache.org/tomcat-7.0-doc/servletapi/javax/servlet/http/HttpServletResponse.html.",
        " * (3) AuthnRequest - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/protocol/AuthnRequest.html.",
        " * (4) SSOToken - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/iplanet/sso/SSOToken.html.",
        " * (5) Response - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/protocol/Response.html",
        " * (6) SAML2Constants - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/common/SAML2Constants.html",
        " * (7) PrintWriter - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/PrintWriter.html",
        " * (8) ManageNameIDRequest - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/protocol/ManageNameIDRequest.html",
        " * (9) ManageNameIDResponse - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/protocol/ManageNameIDResponse.html",
        " * (10) LogoutRequest - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/protocol/LogoutRequest.html",
        " * (11) LogoutResponse - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/protocol/LogoutResponse.html",
        " * (12) SpAdapterScriptHelper - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/plugins/scripted/SpAdapterScriptHelper.html.",
        " * (13) SAML2Exception - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/common/SAML2Exception.html.",
        " */",
        "",
        "/*",
        " * Template/default script for SAML2 SP Adapter scripted plugin.",
        " */",
        "",
        "/*",
        " * Available variables for preSingleSignOnRequest:",
        " *     hostedEntityId",
        " *     idpEntityId",
        " *     realm",
        " *     request",
        " *     response",
        " *     authnRequest",
        " *     spAdapterScriptHelper",
        " *     logger",
        " */",
        "function preSingleSignOnRequest() {",
        "}",
        "",
        "/*",
        " * Available variables for preSingleSignOnProcess:",
        " *     hostedEntityId",
        " *     realm",
        " *     request",
        " *     response",
        " *     authnRequest",
        " *     res",
        " *     profile",
        " *     spAdapterScriptHelper",
        " *     logger",
        " */",
        "function preSingleSignOnProcess() {",
        "}",
        "",
        "/*",
        " * Available variables for postSingleSignOnSuccess:",
        " *     hostedEntityId",
        " *     realm",
        " *     request",
        " *     response",
        " *     out",
        " *     session",
        " *     authnRequest",
        " *     res",
        " *     profile",
        " *     isFederation",
        " *     spAdapterScriptHelper",
        " *     logger",
        " *",
        " * Return - true if response is being redirected, false if not. Default to false.",
        " */",
        "function postSingleSignOnSuccess() {",
        "    return false;",
        "}",
        "",
        "/*",
        " * Available variables for postSingleSignOnFailure:",
        " *     hostedEntityId",
        " *     realm",
        " *     request",
        " *     response",
        " *     authnRequest",
        " *     res",
        " *     profile",
        " *     failureCode",
        " *     spAdapterScriptHelper",
        " *     logger",
        " *",
        " * Return - true if response is being redirected, false if not. Default to false.",
        " */",
        "function postSingleSignOnFailure() {",
        "    return false;",
        "}",
        "",
        "/*",
        " * Available variables for postNewNameIDSuccess:",
        " *     hostedEntityId",
        " *     realm",
        " *     request",
        " *     response",
        " *     userId",
        " *     idRequest",
        " *     idResponse",
        " *     binding",
        " *     spAdapterScriptHelper",
        " *     logger",
        " */",
        "function postNewNameIDSuccess() {",
        "}",
        "",
        "/*",
        " * Available variables for postTerminateNameIDSuccess:",
        " *     hostedEntityId",
        " *     realm",
        " *     request",
        " *     response",
        " *     userId",
        " *     idRequest",
        " *     idResponse",
        " *     binding",
        " *     spAdapterScriptHelper",
        " *     logger",
        " */",
        "function postTerminateNameIDSuccess() {",
        "}",
        "",
        "/*",
        " * Available variables for preSingleLogoutProcess:",
        " *     hostedEntityId",
        " *     realm",
        " *     request",
        " *     response",
        " *     userId",
        " *     logoutRequest",
        " *     logoutResponse",
        " *     binding",
        " *     spAdapterScriptHelper",
        " *     logger",
        " */",
        "function preSingleLogoutProcess() {",
        "}",
        "",
        "/*",
        " * Available variables for postSingleLogoutSuccess:",
        " *     hostedEntityId",
        " *     realm",
        " *     request",
        " *     response",
        " *     userId",
        " *     logoutRequest",
        " *     logoutResponse",
        " *     binding",
        " *     spAdapterScriptHelper",
        " *     logger",
        " */",
        "function postSingleLogoutSuccess() {",
        "}",
      ],
    },
    "fdb60c75-d58b-409f-bef2-ce4ebb04c77c": {
      "_id": "fdb60c75-d58b-409f-bef2-ce4ebb04c77c",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Normalizes raw profile data from GitHub",
      "evaluatorVersion": "1.0",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "GitHub Profile Normalization (VS) - imported (2)",
      "script": [
        "/*",
        " * Copyright 2020 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "logger.warning("GitHub rawProfile: "+rawProfile)",
        "",
        "return json(object(",
        "        field("id", rawProfile.id),",
        "        field("displayName", rawProfile.name),",
        "        field("givenName", rawProfile.first_name),",
        "        field("familyName", rawProfile.last_name),",
        "        field("photoUrl", rawProfile.picture.data.url),",
        "        field("email", rawProfile.email),",
        "        field("username", rawProfile.email)))",
      ],
    },
  },
}
`;

exports[`ScriptOps exportScripts() 2: Export all scripts, including default scripts 1`] = `
{
  "meta": Any<Object>,
  "script": {
    "01e1a3c0-038b-4c16-956a-6c9d89328cff": {
      "_id": "01e1a3c0-038b-4c16-956a-6c9d89328cff",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Default global script for a scripted decision node",
      "evaluatorVersion": "1.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Authentication Tree Decision Node Script",
      "script": [
        "/*",
        "  - Data made available by nodes that have already executed are available in the sharedState variable.",
        "  - The script should set outcome to either "true" or "false".",
        " */",
        "",
        "outcome = "true";",
        "",
      ],
    },
    "07ee6240-d106-4e25-a781-5fcabc477d22": {
      "_id": "07ee6240-d106-4e25-a781-5fcabc477d22",
      "context": "SAML2_SP_ADAPTER",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "evaluatorVersion": "1.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "FrodoSPAdapter",
      "script": [
        "/*",
        " * Copyright 2023 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        " * The script has these top level functions that could be executed during a SAML2 flow.",
        " *      - preSingleSignOnRequest",
        " *      - preSingleSignOnProcess",
        " *      - postSingleSignOnSuccess",
        " *      - postSingleSignOnFailure",
        " *      - postNewNameIDSuccess",
        " *      - postTerminateNameIDSuccess",
        " *      - preSingleLogoutProcess",
        " *      - postSingleLogoutSuccess",
        " *",
        " * Please see the JavaDoc for the interface for more information about these methods.",
        " * https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/org/forgerock/openam/saml2/plugins/SPAdapter.html",
        " * Note that the initialize method is not supported in the scripts.",
        " *",
        " * Defined variables. Check the documentation on the respective functions for the variables available to it.",
        " *",
        " * hostedEntityId - String",
        " *     Entity ID for the hosted IDP",
        " * realm - String",
        " *     Realm of the hosted IDP",
        " * idpEntityId - String",
        " *     The entity ID for the Identity Provider for which the sign-on request will be sent.",
        " * request - HttpServletRequest (1)",
        " *     Servlet request object",
        " * response - HttpServletResponse (2)",
        " *     Servlet response object",
        " * authnRequest - AuthnRequest (3)",
        " *     The authentication request sent that is sent from the Service Provider.",
        " * session - SSOToken (4)",
        " *     The single sign-on session. The reference type of this is Object and would need to be casted to SSOToken.",
        " * res - Response (5)",
        " *     The SSO Response received from the Identity Provider.",
        " * profile - String",
        " *     The protocol profile that is used, this will be one of the following values from SAML2Constants (6):",
        " *          - SAML2Constants.HTTP_POST",
        " *          - SAML2Constants.HTTP_ARTIFACT",
        " *          - SAML2Constants.PAOS",
        " * out - PrintWriter (7)",
        " *     The PrintWriter that can be used to write to.",
        " * isFederation - boolean",
        " *     Set to true if using federation, otherwise false.",
        " * failureCode - int",
        " *     An integer holding the failure code when an error has occurred. For potential values see SPAdapter.",
        " * userId - String",
        " *     The unique universal ID of the user with whom the new name identifier request was performed.",
        " * idRequest - ManageNameIDRequest (8)",
        " *     The new name identifier request, this will be null if the request object is not available",
        " * idResponse - ManageNameIDResponse (9)",
        " *     The new name identifier response, this will be null if the response object is not available",
        " * binding - String",
        " *     The binding used for the new name identifier request. This will be one of the following values:",
        " *          - SAML2Constants.SOAP",
        " *          - SAML2Constants.HTTP_REDIRECT",
        " * logoutRequest - LogoutRequest (10)",
        " *     The single logout request.",
        " * logoutResponse - LogoutResponse (11)",
        " *     The single logout response.",
        " * spAdapterScriptHelper - SpAdapterScriptHelper (12)",
        " *     An instance of SpAdapterScriptHelper containing helper methods. See Javadoc for more details.",
        " * logger - Logger instance",
        " *     https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.",
        " *     Corresponding log files will be prefixed with: scripts.<script name>",
        " *",
        " * Throws SAML2Exception (13):",
        " *     for any exceptions occurring in the adapter. The federation process will continue",
        " *",
        " * Class reference:",
        " * (1) HttpServletRequest - https://tomcat.apache.org/tomcat-7.0-doc/servletapi/javax/servlet/http/HttpServletRequest.html.",
        " * (2) HttpServletResponse - https://tomcat.apache.org/tomcat-7.0-doc/servletapi/javax/servlet/http/HttpServletResponse.html.",
        " * (3) AuthnRequest - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/protocol/AuthnRequest.html.",
        " * (4) SSOToken - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/iplanet/sso/SSOToken.html.",
        " * (5) Response - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/protocol/Response.html",
        " * (6) SAML2Constants - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/common/SAML2Constants.html",
        " * (7) PrintWriter - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/PrintWriter.html",
        " * (8) ManageNameIDRequest - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/protocol/ManageNameIDRequest.html",
        " * (9) ManageNameIDResponse - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/protocol/ManageNameIDResponse.html",
        " * (10) LogoutRequest - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/protocol/LogoutRequest.html",
        " * (11) LogoutResponse - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/protocol/LogoutResponse.html",
        " * (12) SpAdapterScriptHelper - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/plugins/scripted/SpAdapterScriptHelper.html.",
        " * (13) SAML2Exception - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/common/SAML2Exception.html.",
        " */",
        "",
        "/*",
        " * Template/default script for SAML2 SP Adapter scripted plugin.",
        " */",
        "",
        "/*",
        " * Available variables for preSingleSignOnRequest:",
        " *     hostedEntityId",
        " *     idpEntityId",
        " *     realm",
        " *     request",
        " *     response",
        " *     authnRequest",
        " *     spAdapterScriptHelper",
        " *     logger",
        " */",
        "function preSingleSignOnRequest() {",
        "}",
        "",
        "/*",
        " * Available variables for preSingleSignOnProcess:",
        " *     hostedEntityId",
        " *     realm",
        " *     request",
        " *     response",
        " *     authnRequest",
        " *     res",
        " *     profile",
        " *     spAdapterScriptHelper",
        " *     logger",
        " */",
        "function preSingleSignOnProcess() {",
        "}",
        "",
        "/*",
        " * Available variables for postSingleSignOnSuccess:",
        " *     hostedEntityId",
        " *     realm",
        " *     request",
        " *     response",
        " *     out",
        " *     session",
        " *     authnRequest",
        " *     res",
        " *     profile",
        " *     isFederation",
        " *     spAdapterScriptHelper",
        " *     logger",
        " *",
        " * Return - true if response is being redirected, false if not. Default to false.",
        " */",
        "function postSingleSignOnSuccess() {",
        "    return false;",
        "}",
        "",
        "/*",
        " * Available variables for postSingleSignOnFailure:",
        " *     hostedEntityId",
        " *     realm",
        " *     request",
        " *     response",
        " *     authnRequest",
        " *     res",
        " *     profile",
        " *     failureCode",
        " *     spAdapterScriptHelper",
        " *     logger",
        " *",
        " * Return - true if response is being redirected, false if not. Default to false.",
        " */",
        "function postSingleSignOnFailure() {",
        "    return false;",
        "}",
        "",
        "/*",
        " * Available variables for postNewNameIDSuccess:",
        " *     hostedEntityId",
        " *     realm",
        " *     request",
        " *     response",
        " *     userId",
        " *     idRequest",
        " *     idResponse",
        " *     binding",
        " *     spAdapterScriptHelper",
        " *     logger",
        " */",
        "function postNewNameIDSuccess() {",
        "}",
        "",
        "/*",
        " * Available variables for postTerminateNameIDSuccess:",
        " *     hostedEntityId",
        " *     realm",
        " *     request",
        " *     response",
        " *     userId",
        " *     idRequest",
        " *     idResponse",
        " *     binding",
        " *     spAdapterScriptHelper",
        " *     logger",
        " */",
        "function postTerminateNameIDSuccess() {",
        "}",
        "",
        "/*",
        " * Available variables for preSingleLogoutProcess:",
        " *     hostedEntityId",
        " *     realm",
        " *     request",
        " *     response",
        " *     userId",
        " *     logoutRequest",
        " *     logoutResponse",
        " *     binding",
        " *     spAdapterScriptHelper",
        " *     logger",
        " */",
        "function preSingleLogoutProcess() {",
        "}",
        "",
        "/*",
        " * Available variables for postSingleLogoutSuccess:",
        " *     hostedEntityId",
        " *     realm",
        " *     request",
        " *     response",
        " *     userId",
        " *     logoutRequest",
        " *     logoutResponse",
        " *     binding",
        " *     spAdapterScriptHelper",
        " *     logger",
        " */",
        "function postSingleLogoutSuccess() {",
        "}",
      ],
    },
    "10643e95-873a-4ec0-b713-a7f56760d179": {
      "_id": "10643e95-873a-4ec0-b713-a7f56760d179",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Check if username has already been collected.",
      "evaluatorVersion": "1.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "FrodoTestScript4",
      "script": [
        "/* Check Username",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Check if username has already been collected.",
        " * Return "known" if yes, "unknown" otherwise.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - known",
        " * - unknown",
        " */",
        "(function () {",
        "    if (null != sharedState.get("username")) {",
        "        outcome = "known";",
        "    }",
        "    else {",
        "        outcome = "unknown";",
        "    }",
        "}());",
      ],
    },
    "1244e639-4a31-401d-ab61-d75133d8dc9e": {
      "_id": "1244e639-4a31-401d-ab61-d75133d8dc9e",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Normalizes raw profile data from Instagram",
      "evaluatorVersion": "1.0",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Instagram Profile Normalization",
      "script": [
        "/*",
        " * Copyright 2020 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "return json(object(",
        "        field("id", rawProfile.id),",
        "        field("username", rawProfile.username)))",
      ],
    },
    "13e3f263-9cd3-4844-8d1c-040fd0dd02eb": {
      "_id": "13e3f263-9cd3-4844-8d1c-040fd0dd02eb",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Default global script template for Device Profile Match decision node script for Authentication Tree",
      "evaluatorVersion": "1.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Device Profile Match Template - Decision Node Script",
      "script": [
        "/*",
        " * Copyright 2020-2022 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/** ******************************************************************",
        " *",
        " * The following script is a simplified template for understanding",
        " * the basics of device matching. _This is not functionally complete._",
        " * For a functionally complete script as well as a development toolkit,",
        " * visit https://github.com/ForgeRock/forgerock-device-match-script.",
        " *",
        " * Global node variables accessible within this scope:",
        " * 1. \`sharedState\` provides access to incoming request",
        " * 2. \`deviceProfilesDao\` provides access to stored profiles",
        " * 3. \`outcome\` variable maps to auth tree node outcomes; values are",
        " *    'true', 'false', or 'unknownDevice' (notice _all_ are strings).",
        " * ******************************************************************/",
        "",
        "/**",
        " * Get the incoming request's device profile.",
        " * Returns serialized JSON (type string); parsing this will result a",
        " * native JS object.",
        " */",
        "var incomingJson = sharedState.get('forgeRock.device.profile').toString();",
        "var incoming = JSON.parse(incomingJson);",
        "",
        "/**",
        " * Get the incoming user's username and realm.",
        " * Notice the use of \`.asString()\`.",
        " */",
        "var username = sharedState.get("username").asString();",
        "var realm = sharedState.get("realm").asString();",
        "",
        "/**",
        " * Get the user's stored profiles for appropriate realm.",
        " * Returns a _special_ object with methods for profile data",
        " */",
        "var storedProfiles = deviceProfilesDao.getDeviceProfiles(username, realm);",
        "",
        "// Default to \`outcome\` of 'unknownDevice'",
        "outcome = 'unknownDevice';",
        "",
        "if (storedProfiles) {",
        "    var i = 0;",
        "    // NOTE: \`.size()\` method returns the number of stored profiles",
        "    var len = storedProfiles.size();",
        "",
        "    for (i; i < len; i++) {",
        "        /**",
        "         * Get the stored profile.",
        "         * Returns serialized JSON (type string); parsing this will result",
        "         * a native JS object.",
        "         */",
        "        var storedJson = storedProfiles.get(i);",
        "        var stored = JSON.parse(storedJson);",
        "",
        "        /**",
        "         * Find a stored profile with the same identifier.",
        "         */",
        "        if (incoming.identifier === stored.identifier) {",
        "",
        "            /**",
        "             * Now that you've found the appropriate profile, you will perform",
        "             * the logic here to match the values of the \`incoming\` profile",
        "             * with that of the \`stored\` profile.",
        "             *",
        "             * The result of the matching logic is assigned to \`outcome\`. Since",
        "             * we have profiles of the same identifier, the value (type string)",
        "             * should now be either 'true' or 'false' (properties matched or not).",
        "             *",
        "             * For more information about this topic, visit this Github repo:",
        "             * https://github.com/ForgeRock/forgerock-device-match-script",
        "             */",
        "            outcome = 'false';",
        "        }",
        "    }",
        "}",
      ],
    },
    "157298c0-7d31-4059-a95b-eeb08473b7e5": {
      "_id": "157298c0-7d31-4059-a95b-eeb08473b7e5",
      "context": "AUTHENTICATION_CLIENT_SIDE",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Default global script for client side Device Id (Match) Authentication Module",
      "evaluatorVersion": "1.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Device Id (Match) - Client Side",
      "script": [
        "/*",
        " * Copyright 2023 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "var fontDetector = (function () {",
        "    /**",
        "     * JavaScript code to detect available availability of a",
        "     * particular font in a browser using JavaScript and CSS.",
        "     *",
        "     * Author : Lalit Patel",
        "     * Website: http://www.lalit.org/lab/javascript-css-font-detect/",
        "     * License: Apache Software License 2.0",
        "     *          http://www.apache.org/licenses/LICENSE-2.0",
        "     * Version: 0.15 (21 Sep 2009)",
        "     *          Changed comparision font to default from sans-default-default,",
        "     *          as in FF3.0 font of child element didn't fallback",
        "     *          to parent element if the font is missing.",
        "     * Version: 0.2 (04 Mar 2012)",
        "     *          Comparing font against all the 3 generic font families ie,",
        "     *          'monospace', 'sans-serif' and 'sans'. If it doesn't match all 3",
        "     *          then that font is 100% not available in the system",
        "     * Version: 0.3 (24 Mar 2012)",
        "     *          Replaced sans with serif in the list of baseFonts",
        "     */",
        "    /*",
        "     * Portions Copyrighted 2013 ForgeRock AS.",
        "     */",
        "    var detector = {}, baseFonts, testString, testSize, h, s, defaultWidth = {}, defaultHeight = {}, index;",
        "",
        "    // a font will be compared against all the three default fonts.",
        "    // and if it doesn't match all 3 then that font is not available.",
        "    baseFonts = ['monospace', 'sans-serif', 'serif'];",
        "",
        "    //we use m or w because these two characters take up the maximum width.",
        "    // And we use a LLi so that the same matching fonts can get separated",
        "    testString = "mmmmmmmmmmlli";",
        "",
        "    //we test using 72px font size, we may use any size. I guess larger the better.",
        "    testSize = '72px';",
        "",
        "    h = document.getElementsByTagName("body")[0];",
        "",
        "    // create a SPAN in the document to get the width of the text we use to test",
        "    s = document.createElement("span");",
        "    s.style.fontSize = testSize;",
        "    s.innerHTML = testString;",
        "    for (index in baseFonts) {",
        "        //get the default width for the three base fonts",
        "        s.style.fontFamily = baseFonts[index];",
        "        h.appendChild(s);",
        "        defaultWidth[baseFonts[index]] = s.offsetWidth; //width for the default font",
        "        defaultHeight[baseFonts[index]] = s.offsetHeight; //height for the defualt font",
        "        h.removeChild(s);",
        "    }",
        "",
        "    detector.detect = function(font) {",
        "        var detected = false, index, matched;",
        "        for (index in baseFonts) {",
        "            s.style.fontFamily = font + ',' + baseFonts[index]; // name of the font along with the base font for fallback.",
        "            h.appendChild(s);",
        "            matched = (s.offsetWidth !== defaultWidth[baseFonts[index]] || s.offsetHeight !== defaultHeight[baseFonts[index]]);",
        "            h.removeChild(s);",
        "            detected = detected || matched;",
        "        }",
        "        return detected;",
        "    };",
        "",
        "    return detector;",
        "}());",
        "/*",
        " * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.",
        " *",
        " * Copyright (c) 2009 Sun Microsystems Inc. All Rights Reserved",
        " *",
        " * The contents of this file are subject to the terms",
        " * of the Common Development and Distribution License",
        " * (the License). You may not use this file except in",
        " * compliance with the License.",
        " *",
        " * You can obtain a copy of the License at",
        " * https://opensso.dev.java.net/public/CDDLv1.0.html or",
        " * opensso/legal/CDDLv1.0.txt",
        " * See the License for the specific language governing",
        " * permission and limitations under the License.",
        " *",
        " * When distributing Covered Code, include this CDDL",
        " * Header Notice in each file and include the License file",
        " * at opensso/legal/CDDLv1.0.txt.",
        " * If applicable, add the following below the CDDL Header,",
        " * with the fields enclosed by brackets [] replaced by",
        " * your own identifying information:",
        " * "Portions Copyrighted [year] [name of copyright owner]"",
        " *",
        " */",
        "/*",
        " * Portions Copyrighted 2013 Syntegrity.",
        " * Portions Copyrighted 2013-2014 ForgeRock AS.",
        " */",
        "",
        "var collectScreenInfo = function () {",
        "        var screenInfo = {};",
        "        if (screen) {",
        "            if (screen.width) {",
        "                screenInfo.screenWidth = screen.width;",
        "            }",
        "",
        "            if (screen.height) {",
        "                screenInfo.screenHeight = screen.height;",
        "            }",
        "",
        "            if (screen.pixelDepth) {",
        "                screenInfo.screenColourDepth = screen.pixelDepth;",
        "            }",
        "        } else {",
        "            console.warn("Cannot collect screen information. screen is not defined.");",
        "        }",
        "        return screenInfo;",
        "    },",
        "    collectTimezoneInfo = function () {",
        "        var timezoneInfo =  {}, offset = new Date().getTimezoneOffset();",
        "",
        "        if (offset) {",
        "            timezoneInfo.timezone = offset;",
        "        } else {",
        "            console.warn("Cannot collect timezone information. timezone is not defined.");",
        "        }",
        "",
        "        return timezoneInfo;",
        "    },",
        "    collectBrowserPluginsInfo = function () {",
        "",
        "        if (navigator && navigator.plugins) {",
        "            var pluginsInfo = {}, i, plugins = navigator.plugins;",
        "            pluginsInfo.installedPlugins = "";",
        "",
        "            for (i = 0; i < plugins.length; i++) {",
        "                pluginsInfo.installedPlugins = pluginsInfo.installedPlugins + plugins[i].filename + ";";",
        "            }",
        "",
        "            return pluginsInfo;",
        "        } else {",
        "            console.warn("Cannot collect browser plugin information. navigator.plugins is not defined.");",
        "            return {};",
        "        }",
        "",
        "    },",
        "// Getting geolocation takes some time and is done asynchronously, hence need a callback which is called once geolocation is retrieved.",
        "    collectGeolocationInfo = function (callback) {",
        "        var geolocationInfo = {},",
        "            successCallback = function(position) {",
        "                geolocationInfo.longitude = position.coords.longitude;",
        "                geolocationInfo.latitude = position.coords.latitude;",
        "                callback(geolocationInfo);",
        "            }, errorCallback = function(error) {",
        "                console.warn("Cannot collect geolocation information. " + error.code + ": " + error.message);",
        "                callback(geolocationInfo);",
        "            };",
        "        if (navigator && navigator.geolocation) {",
        "            // NB: If user chooses 'Not now' on Firefox neither callback gets called",
        "            //     https://bugzilla.mozilla.org/show_bug.cgi?id=675533",
        "            navigator.geolocation.getCurrentPosition(successCallback, errorCallback);",
        "        } else {",
        "            console.warn("Cannot collect geolocation information. navigator.geolocation is not defined.");",
        "            callback(geolocationInfo);",
        "        }",
        "    },",
        "    collectBrowserFontsInfo = function () {",
        "        var fontsInfo = {}, i, fontsList = ["cursive","monospace","serif","sans-serif","fantasy","default","Arial","Arial Black",",
        "            "Arial Narrow","Arial Rounded MT Bold","Bookman Old Style","Bradley Hand ITC","Century","Century Gothic",",
        "            "Comic Sans MS","Courier","Courier New","Georgia","Gentium","Impact","King","Lucida Console","Lalit",",
        "            "Modena","Monotype Corsiva","Papyrus","Tahoma","TeX","Times","Times New Roman","Trebuchet MS","Verdana",",
        "            "Verona"];",
        "        fontsInfo.installedFonts = "";",
        "",
        "        for (i = 0; i < fontsList.length; i++) {",
        "            if (fontDetector.detect(fontsList[i])) {",
        "                fontsInfo.installedFonts = fontsInfo.installedFonts + fontsList[i] + ";";",
        "            }",
        "        }",
        "        return fontsInfo;",
        "    },",
        "    devicePrint = {};",
        "",
        "devicePrint.screen = collectScreenInfo();",
        "devicePrint.timezone = collectTimezoneInfo();",
        "devicePrint.plugins = collectBrowserPluginsInfo();",
        "devicePrint.fonts = collectBrowserFontsInfo();",
        "",
        "if (navigator.userAgent) {",
        "    devicePrint.userAgent = navigator.userAgent;",
        "}",
        "if (navigator.appName) {",
        "    devicePrint.appName = navigator.appName;",
        "}",
        "if (navigator.appCodeName) {",
        "    devicePrint.appCodeName = navigator.appCodeName;",
        "}",
        "if (navigator.appVersion) {",
        "    devicePrint.appVersion = navigator.appVersion;",
        "}",
        "if (navigator.appMinorVersion) {",
        "    devicePrint.appMinorVersion = navigator.appMinorVersion;",
        "}",
        "if (navigator.buildID) {",
        "    devicePrint.buildID = navigator.buildID;",
        "}",
        "if (navigator.platform) {",
        "    devicePrint.platform = navigator.platform;",
        "}",
        "if (navigator.cpuClass) {",
        "    devicePrint.cpuClass = navigator.cpuClass;",
        "}",
        "if (navigator.oscpu) {",
        "    devicePrint.oscpu = navigator.oscpu;",
        "}",
        "if (navigator.product) {",
        "    devicePrint.product = navigator.product;",
        "}",
        "if (navigator.productSub) {",
        "    devicePrint.productSub = navigator.productSub;",
        "}",
        "if (navigator.vendor) {",
        "    devicePrint.vendor = navigator.vendor;",
        "}",
        "if (navigator.vendorSub) {",
        "    devicePrint.vendorSub = navigator.vendorSub;",
        "}",
        "if (navigator.language) {",
        "    devicePrint.language = navigator.language;",
        "}",
        "if (navigator.userLanguage) {",
        "    devicePrint.userLanguage = navigator.userLanguage;",
        "}",
        "if (navigator.browserLanguage) {",
        "    devicePrint.browserLanguage = navigator.browserLanguage;",
        "}",
        "if (navigator.systemLanguage) {",
        "    devicePrint.systemLanguage = navigator.systemLanguage;",
        "}",
        "",
        "// Attempt to collect geo-location information and return this with the data collected so far.",
        "// Otherwise, if geo-location fails or takes longer than 30 seconds, auto-submit the data collected so far.",
        "autoSubmitDelay = 30000;",
        "output.value = JSON.stringify(devicePrint);",
        "collectGeolocationInfo(function(geolocationInfo) {",
        "    devicePrint.geolocation = geolocationInfo;",
        "    output.value = JSON.stringify(devicePrint);",
        "    submit();",
        "});",
        "",
      ],
    },
    "1b52a7e0-4019-40fa-958a-15a49870e901": {
      "_id": "1b52a7e0-4019-40fa-958a-15a49870e901",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "set the same shared state variable",
      "evaluatorVersion": "1.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "shared",
      "script": [
        "(function () {",
        "  outcome = 'true';",
        "  var level = nodeState.get('level').asInteger();",
        "  sharedState.put('sharedValue', 'Level ' + level + ': This is a longer string value shared across all nested journeys. It contains an indicator in which level it was last set.');",
        "}());",
      ],
    },
    "1d475815-72cb-42eb-aafd-4026989d28a7": {
      "_id": "1d475815-72cb-42eb-aafd-4026989d28a7",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Default global script for Social Identity Provider Profile Transformation",
      "evaluatorVersion": "1.0",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Social Identity Provider Profile Transformation Script",
      "script": [
        "/*",
        " * Copyright 2020 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/* Default Social Identity Provider Profile Transformation script to use as a template for new scripts */",
      ],
    },
    "1f389a3d-21cf-417c-a6d3-42ea620071f0": {
      "_id": "1f389a3d-21cf-417c-a6d3-42ea620071f0",
      "context": "OIDC_CLAIMS",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Internal OIDC Claims script",
      "evaluatorVersion": "1.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "ForgeRock Internal: OIDC Claims Script",
      "script": [
        "/*",
        " * Copyright 2014-2023 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        " * This script computes claim values returned in ID tokens and/or at the UserInfo Endpoint.",
        " * The claim values are computed for:",
        " * the claims derived from the requested scopes,",
        " * the claims provided by the authorization server,",
        " * and the claims requested by the client via the claims parameter.",
        " *",
        " * In the CONFIGURATION AND CUSTOMIZATION section, you can",
        " * define the scope-to-claims mapping, and",
        " * assign to each claim a resolver function that will compute the claim value.",
        " *",
        " * Defined variables (class references are provided below):",
        " * scopes - Set<String> (6).",
        " *          Always present, the requested scopes.",
        " * claims - Map<String, Object> (5).",
        " *          Always present, default server provided claims.",
        " * claimObjects - List<Claim> (7, 2).",
        " *                Always present, the default server provided claims.",
        " * requestedClaims - Map<String, Set<String>> (5).",
        " *                   Always present, not empty if the request contains the claims parameter and the server has enabled",
        " *                   claims_parameter_supported. A map of the requested claims to possible values, otherwise empty;",
        " *                   requested claims with no requested values will have a key but no value in the map. A key with",
        " *                   a single value in its Set (6) indicates that this is the only value that should be returned.",
        " * requestedTypedClaims - List<Claim> (7, 2).",
        " *                        Always present, the requested claims.",
        " *                        Requested claims with no requested values will have a claim with no values.",
        " *                        A claim with a single value indicates this is the only value that should be returned.",
        " * claimsLocales - List<String> (7).",
        " *                 The values from the 'claims_locales' parameter.",
        " *                 See https://openid.net/specs/openid-connect-core-1_0.html#ClaimsLanguagesAndScripts for the OIDC specification details.",
        " * requestProperties - Unmodifiable Map (5).",
        " *                     Always present, contains a map of request properties:",
        " *                     requestUri - The request URI.",
        " *                     realm - The realm that the request relates to.",
        " *                     requestParams - A map of the request params and/or posted data.",
        " *                                     Each value is a list of one or more properties.",
        " *                                     Please note that these should be handled in accordance with OWASP best practices:",
        " *                                     https://owasp.org/www-community/vulnerabilities/Unsafe_use_of_Reflection.",
        " * clientProperties - Unmodifiable Map (5).",
        " *                    Present if the client specified in the request was identified, contains a map of client properties:",
        " *                    clientId - The client's URI for the request locale.",
        " *                    allowedGrantTypes - List of the allowed grant types (org.forgerock.oauth2.core.GrantType) for the client.",
        " *                    allowedResponseTypes - List of the allowed response types for the client.",
        " *                    allowedScopes - List of the allowed scopes for the client.",
        " *                    customProperties - A map of the custom properties of the client.",
        " *                                       Lists or maps will be included as sub-maps; for example:",
        " *                                       customMap[Key1]=Value1 will be returned as customMap -> Key1 -> Value1.",
        " *                                       To add custom properties to a client, update the Custom Properties field",
        " *                                       in AM Console > Realm Name > Applications > OAuth 2.0 > Clients > Client ID > Advanced.",
        " * identity - AMIdentity (3).",
        " *            Always present, the identity of the resource owner.",
        " * session - SSOToken (4).",
        " *           Present if the request contains the session cookie, the user's session object.",
        " * scriptName - String (primitive).",
        " *              Always present, the display name of the script.",
        " * logger - Always present, the "OAuth2Provider" debug logger instance:",
        " *          https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.",
        " *          Corresponding files will be prefixed with: scripts.OIDC_CLAIMS.",
        " * httpClient - HTTP Client (8).",
        " *              Always present, the HTTP Client instance:",
        " *              https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-http-client.html#scripting-api-global-http-client.",
        " *              In order to use the client, you may need to add",
        " *              org.forgerock.http.Client,",
        " *              org.forgerock.http.protocol.*,",
        " *              and org.forgerock.util.promise.PromiseImpl",
        " *              to the allowed Java classes in the scripting engine configuration, as described in:",
        " *              https://backstage.forgerock.com/docs/am/7/scripting-guide/script-engine-security.html",
        " *",
        " * Return - a new UserInfoClaims(Map<String, Object> values, Map<String, List<String>> compositeScopes) (1) object.",
        " *          The result of the last statement in the script is returned to the server.",
        " *          Currently, the Immediately Invoked Function Expression (also known as Self-Executing Anonymous Function)",
        " *          is the last (and only) statement in this script, and its return value will become the script result.",
        " *          Do not use "return variable" statement outside of a function definition.",
        " *          See RESULTS section for additional details.",
        " *",
        " * Class reference:",
        " * (1) UserInfoClaims - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/oauth2/core/UserInfoClaims.html.",
        " * (2) Claim - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html).",
        " *         An instance of org.forgerock.openidconnect.Claim has methods to access",
        " *         the claim name, requested values, locale, and whether the claim is essential.",
        " * (3) AMIdentity - https://backstage.forgerock.com/docs/am/7/apidocs/com/sun/identity/idm/AMIdentity.html.",
        " * (4) SSOToken - https://backstage.forgerock.com/docs/am/7/apidocs/com/iplanet/sso/SSOToken.html.",
        " * (5) Map - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashMap.html,",
        " *           or https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/LinkedHashMap.html.",
        " * (6) Set - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashSet.html.",
        " * (7) List - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/ArrayList.html.",
        " * (8) Client - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/http/Client.html.",
        "*/",
        "",
        "(function () {",
        "    // SETUP",
        "",
        "    /**",
        "     * Claim processing utilities.",
        "     * An object that contains reusable functions for processing claims.",
        "     * @see CLAIM PROCESSING UTILITIES section for details.",
        "     */",
        "    var utils = getUtils();",
        "",
        "    // CONFIGURATION AND CUSTOMIZATION",
        "",
        "    /**",
        "     * OAuth 2.0 scope values (scopes) can be used by the Client to request OIDC claims.",
        "     *",
        "     * Call this configuration method, and pass in as the first argument",
        "     * an object that maps a scope value to an array of claim names",
        "     * to specify which claims need to be processed and returned for the requested scopes.",
        "     * @see {@link https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims}",
        "     * for the scope values that could be used to request claims as defined in the OIDC specification.",
        "     *",
        "     * Below, find a default configuration that is expected to work in the current environment.",
        "     *",
        "     * CUSTOMIZATION",
        "     * You can choose the claim names returned for a scope.",
        "     */",
        "    utils.setScopeClaimsMap({",
        "        profile: [",
        "            'name',",
        "            'family_name',",
        "            'given_name',",
        "            'zoneinfo',",
        "            'locale'",
        "        ],",
        "        email: ['email'],",
        "        address: ['address'],",
        "        phone: ['phone_number']",
        "    });",
        "",
        "    /**",
        "     * In this script, each claim",
        "     * derived from the requested scopes,",
        "     * provided by the authorization server, and",
        "     * requested by the client via the claims parameter",
        "     * will be processed by a function associated with the claim name.",
        "     *",
        "     * Call this configuration method, and pass in as the first argument",
        "     * an object that maps a claim name to a resolver function,",
        "     * which will be automatically executed for each claim processed by the script.",
        "     *",
        "     * The claim resolver function will receive the requested claim information",
        "     * in an instance of org.forgerock.openidconnect.Claim as the first argument.",
        "     * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html}",
        "     * for details on the Claim class.",
        "     *",
        "     * If the claim resolver function returns a value,",
        "     * other than undefined or null,",
        "     * the claim will be included in the script's results.",
        "     *",
        "     * The Claim instance provides methods to check",
        "     * what the name of the claim is,",
        "     * which values the claim request contains,",
        "     * whether the claim is essential, and",
        "     * which locale the claim is associated with.",
        "     * The resolver function can consider this information when computing and returning the claim value.",
        "     *",
        "     * Below, find a default configuration that is expected to work in the current environment.",
        "     * A reusable function, utils.getUserProfileClaimResolver(String attribute-name),",
        "     * is called to return a claim resolver function based on a user profile attribute.",
        "     * @see CLAIM RESOLVERS section for the implementation details and examples.",
        "     * For the address claim, an example of a claim resolver that uses another claim resolver is provided.",
        "     *",
        "     * CUSTOMIZATION",
        "     * You can reuse the predefined utils methods with your custom arguments.",
        "     * You can also specify a custom resolver function for a claim name,",
        "     * that will compute and return the claim value—as shown in the commented out example below.",
        "     */",
        "    utils.setClaimResolvers({",
        "        /*",
        "        // An example of a simple claim resolver function that is defined for a claim",
        "        // directly in the configuration object:",
        "        custom-claim-name: function (requestedClaim) {",
        "            // In this case, initially, the claim value comes straight from a user profile attribute value:",
        "            var claimValue = identity.getAttribute('custom-attribute-name').toArray()[0]",
        "",
        "            // Optionally, provide additional logic for processing (filtering, formatting, etc.) the claim value.",
        "            // You can use:",
        "            // requestedClaim.getName()",
        "            // requestedClaim.getValues()",
        "            // requestedClaim.getLocale()",
        "            // requestedClaim.isEssential()",
        "",
        "            return claimValue",
        "        },",
        "        */",
        "        /**",
        "         * The use of utils.getUserProfileClaimResolver shows how",
        "         * an argument passed to a function that returns a claim resolver",
        "         * becomes available to the resolver function (via its lexical context).",
        "         */",
        "        name: utils.getUserProfileClaimResolver('cn'),",
        "        family_name: utils.getUserProfileClaimResolver('sn'),",
        "        given_name: utils.getUserProfileClaimResolver('givenname'),",
        "        zoneinfo: utils.getUserProfileClaimResolver('preferredtimezone'),",
        "        locale: utils.getUserProfileClaimResolver('preferredlocale'),",
        "        email: utils.getUserProfileClaimResolver('mail'),",
        "        address: utils.getAddressClaimResolver(",
        "            /**",
        "             * The passed in user profile claim resolver function",
        "             * can be used by the address claim resolver function",
        "             * to obtain the claim value to be formatted as per the OIDC specification:",
        "             * @see https://openid.net/specs/openid-connect-core-1_0.html#AddressClaim.",
        "             */",
        "            utils.getUserProfileClaimResolver('postaladdress')",
        "        ),",
        "        phone_number: utils.getUserProfileClaimResolver('telephonenumber')",
        "    });",
        "",
        "    // CLAIM PROCESSING UTILITIES",
        "",
        "    /**",
        "     * @returns {object} An object that contains reusable claim processing utilities.",
        "     * @see PUBLIC METHODS section and the return statement for the list of exported functions.",
        "     */",
        "    function getUtils () {",
        "        // IMPORT JAVA",
        "",
        "        /**",
        "         * Provides Java scripting functionality.",
        "         * @see {@link https://developer.mozilla.org/en-US/docs/Mozilla/Projects/Rhino/Scripting_Java#javaimporter_constructor}.",
        "         */",
        "        var frJava = JavaImporter(",
        "            org.forgerock.oauth2.core.exceptions.InvalidRequestException,",
        "            org.forgerock.oauth2.core.UserInfoClaims,",
        "            org.forgerock.openidconnect.Claim,",
        "",
        "            java.util.LinkedHashMap,",
        "            java.util.ArrayList",
        "        );",
        "",
        "        // SET UP CONFIGURATION",
        "",
        "        /**",
        "         * Placeholder for a configuration option that contains",
        "         * an object that maps the supported scope values (scopes)",
        "         * and the corresponding claim names for each scope value.",
        "         */",
        "        var scopeClaimsMap;",
        "",
        "        /**",
        "         * Placeholder for a configuration option that contains",
        "         * an object that maps the supported claim names",
        "         * and the resolver functions returning the claim value.",
        "         */",
        "        var claimResolvers;",
        "",
        "        /**",
        "         * A (public) method that accepts an object that maps the supported scopes and the corresponding claim names,",
        "         * and assigns it to a (private) variable that serves as a configuration option.",
        "         * @param {object} params - An object that maps each supported scope value to an array of claim names,",
        "         * in order to specify which claims need to be processed for the requested scopes.",
        "         * @see {@link https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims} for details.",
        "         * @param {string[]} [params.profile] - An array of claim names to be returned if the profile scope is requested.",
        "         * @param {string[]} [params.email] - An array of claim names to be returned if the email scope is requested.",
        "         * @param {string[]} [params.address] - An array of claim names to be returned if the address scope is requested.",
        "         * @param {string[]} [params.phone] - An array of claim names to be returned if the phone scope is requested.",
        "         * @returns {undefined}",
        "         */",
        "        function setScopeClaimsMap(params) {",
        "            scopeClaimsMap = params;",
        "        }",
        "",
        "        /**",
        "         * A (public) method that accepts an object that maps the supported claim names",
        "         * and the resolver functions returning the claim value,",
        "         * and assigns it to a (private) variable that serves as a configuration option.",
        "         * @param {object} params - An object that maps",
        "         * each supported claim name to a function that computes and returns the claim value.",
        "         */",
        "        function setClaimResolvers(params) {",
        "            claimResolvers = params;",
        "        }",
        "",
        "        // CLAIM RESOLVERS",
        "",
        "        /**",
        "         * Claim resolvers are functions that return a claim value.",
        "         * @param {*}",
        "         * @returns {*}",
        "         */",
        "",
        "        /**",
        "         * Defines a claim resolver based on a user profile attribute.",
        "         * @param {string} attributeName - Name of the user profile attribute.",
        "         * @returns {function} A function that will determine the claim value",
        "         * based on the user profile attribute and the (requested) claim properties.",
        "         */",
        "        function getUserProfileClaimResolver (attributeName) {",
        "            /**",
        "             * Resolves a claim with a user profile attribute value.",
        "             * Returns undefined if the identity attribute is not populated,",
        "             * OR if the claim has requested values that do not contain the identity attribute value.",
        "             * ATTENTION: the aforementioned comparison is case-sensitive.",
        "             * @param {org.forgerock.openidconnect.Claim} claim",
        "             * An object that provides methods to obtain information/requirements associated with a claim.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "             * @returns {string|HashSet|undefined}",
        "             */",
        "            function resolveClaim(claim) {",
        "                var userProfileValue;",
        "",
        "                if (identity) {",
        "                    userProfileValue = getClaimValueFromSet(claim, identity.getAttribute(attributeName));",
        "",
        "                    if (userProfileValue && !userProfileValue.isEmpty()) {",
        "                        if (!claim.getValues() || claim.getValues().isEmpty() || claim.getValues().contains(userProfileValue)) {",
        "                            return userProfileValue;",
        "                        }",
        "                    }",
        "                }",
        "            }",
        "",
        "            return resolveClaim;",
        "        }",
        "",
        "        /**",
        "         * Returns an address claim resolver based on a claim value obtained with another claim resolver.",
        "         * @param {function} resolveClaim - A function that returns a claim value.",
        "         * @returns {function} A function that will accept a claim as an argument,",
        "         * run the claim resolver function for the claim and obtain the claim value,",
        "         * and apply additional formatting to the value before returning it.",
        "         */",
        "        function getAddressClaimResolver (resolveClaim) {",
        "            /**",
        "             * Creates an address claim object from a value returned by a claim resolver,",
        "             * and returns the address claim object as the claim value.",
        "             * @see {@link https://openid.net/specs/openid-connect-core-1_0.html#AddressClaim}.",
        "             * The claim value is obtained with a claim resolving function available from the closure.",
        "             * @param {org.forgerock.openidconnect.Claim} claim",
        "             * An object that provides methods to obtain information/requirements associated with a claim.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "             * @returns {java.util.LinkedHashMap|undefined} The address claim object created from a claim value.",
        "             */",
        "            function resolveAddressClaim(claim) {",
        "                var claimValue = resolveClaim(claim);",
        "                var addressObject;",
        "",
        "                if (isClaimValueValid(claimValue)) {",
        "                    addressObject = new frJava.LinkedHashMap();",
        "",
        "                    addressObject.put('formatted', claimValue);",
        "",
        "                    return addressObject;",
        "                }",
        "            }",
        "",
        "            return resolveAddressClaim;",
        "        }",
        "",
        "        /**",
        "         * Returns an essential claim resolver based on a claim value obtained with another claim resolver.",
        "         * @param {function} resolveClaim - A function that returns a claim value.",
        "         * @returns {function} A function that will accept a claim as an argument,",
        "         * run the claim resolver function for the claim and obtain the claim value,",
        "         * and apply additional logic for essential claims.",
        "         */",
        "        function getEssentialClaimResolver (resolveClaim) {",
        "            /**",
        "             * Returns a claim value or throws an error.",
        "             * The claim value is obtained with a claim resolving function available from the closure.",
        "             * Throws an exception if the claim is essential and no value is returned for the claim.",
        "             *",
        "             * Use of this resolver is optional.",
        "             * @see {@link https://openid.net/specs/openid-connect-core-1_0.html#IndividualClaimsRequests} stating:",
        "             * "Note that even if the Claims are not available because the End-User did not authorize their release or they are not present,",
        "             * the Authorization Server MUST NOT generate an error when Claims are not returned, whether they are Essential or Voluntary,",
        "             * unless otherwise specified in the description of the specific claim."",
        "             *",
        "             * @param {org.forgerock.openidconnect.Claim} claim",
        "             * An object that provides methods to obtain information/requirements associated with a claim.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "             * @returns {*}",
        "             * @throws {org.forgerock.oauth2.core.exceptions.InvalidRequestException}",
        "             */",
        "            function resolveEssentialClaim(claim) {",
        "                var claimValue = resolveClaim(claim);",
        "",
        "                if (claim.isEssential() && !isClaimValueValid(claimValue)) {",
        "                    throw new frJava.InvalidRequestException('Could not provide value for essential claim: ' + claim.getName());",
        "                }",
        "",
        "                return claimValue;",
        "            }",
        "",
        "            return resolveEssentialClaim;",
        "        }",
        "",
        "        /**",
        "         * Provides default resolution for a claim.",
        "         * Use it if a claim-specific resolver is not defined in the configuration.",
        "         * @param {org.forgerock.openidconnect.Claim} claim",
        "         * An object that provides methods to obtain information/requirements associated with a claim.",
        "         * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "         * @returns {*} A single value associated with this claim.",
        "         */",
        "        function resolveAnyClaim (claim) {",
        "            if (claim.getValues().size() === 1) {",
        "                return claim.getValues().toArray()[0];",
        "            }",
        "        }",
        "",
        "        // UTILITIES",
        "",
        "        /**",
        "         * Returns claim value from a set.",
        "         * If the set contains a single value, returns the value.",
        "         * If the set contains multiple values, returns the set.",
        "         * Otherwise, returns undefined.",
        "         *",
        "         * @param {org.forgerock.openidconnect.Claim} claim",
        "         * An object that provides methods to obtain information/requirements associated with a claim.",
        "         * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "         * @param {java.util.HashSet} set The set—for example, a user profile attribute value.",
        "         * @returns {string|java.util.HashSet|undefined}",
        "         */",
        "        function getClaimValueFromSet (claim, set) {",
        "            if (set && set.size()) {",
        "                if (set.size() === 1) {",
        "                    return set.toArray()[0];",
        "                } else {",
        "                    return set;",
        "                }",
        "            } else if (logger.warningEnabled()) {",
        "                logger.warning('OIDC Claims script. Got an empty set for claim: ' + claim.getName());",
        "            }",
        "        }",
        "",
        "        function isClaimValueValid (claimValue) {",
        "            if (typeof claimValue === 'undefined' || claimValue === null) {",
        "                return false;",
        "            }",
        "",
        "            return true;",
        "        }",
        "",
        "        // CLAIM PROCESSING",
        "",
        "        /**",
        "         * Constructs and returns an object populated with the computed claim values",
        "         * and the requested scopes mapped to the claim names.",
        "         * @returns {org.forgerock.oauth2.core.UserInfoClaims} The object to be returned to the authorization server.",
        "         * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/oauth2/core/UserInfoClaims.html}.",
        "         * @see RESULTS section for the use of this function.",
        "         */",
        "        function getUserInfoClaims () {",
        "            return new frJava.UserInfoClaims(getComputedClaims(), getCompositeScopes());",
        "        }",
        "",
        "        /**",
        "         * Creates a map of (requested) claim names populated with the computed claim values.",
        "         * @returns {java.util.LinkedHashMap}",
        "         * A map of the requested claim names and the corresponding claim values.",
        "         */",
        "        function getComputedClaims () {",
        "            /**",
        "             * Creates a complete list of claim objects from:",
        "             * the claims derived from the scopes,",
        "             * the claims provided by the authorization server,",
        "             * and the claims requested by the client.",
        "             * @returns {java.util.ArrayList}",
        "             * Returns a complete list of org.forgerock.openidconnect.Claim objects available to the script.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for the claim object details.",
        "             */",
        "            function getClaims() {",
        "                /**",
        "                 * Returns a list of claim objects for the requested scopes.",
        "                 * Uses the scopeClaimsMap configuration option to derive the claim names;",
        "                 * no other properties of a claim derived from a scope are populated.",
        "                 * @returns {java.util.ArrayList}",
        "                 * A list of org.forgerock.openidconnect.Claim objects derived from the requested scopes.",
        "                 * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for the claim object details.",
        "                 */",
        "                function convertScopeToClaims() {",
        "                    var claims = new frJava.ArrayList();",
        "",
        "                    scopes.toArray().forEach(function (scope) {",
        "                        if (String(scope) !== 'openid' && scopeClaimsMap[scope]) {",
        "                            scopeClaimsMap[scope].forEach(function (claimName) {",
        "                                claims.add(new frJava.Claim(claimName));",
        "                            });",
        "                        }",
        "                    });",
        "",
        "                    return claims;",
        "                }",
        "",
        "                var claims = new frJava.ArrayList();",
        "",
        "                claims.addAll(convertScopeToClaims());",
        "                claims.addAll(claimObjects);",
        "                claims.addAll(requestedTypedClaims);",
        "",
        "                return claims;",
        "            }",
        "",
        "            /**",
        "             * Computes and returns a claim value.",
        "             * To obtain the claim value, uses the resolver function specified for the claim in the claimResolvers configuration object.",
        "             * @see claimResolvers",
        "             * If no resolver function is found, uses the default claim resolver function.",
        "             *",
        "             * @param {org.forgerock.openidconnect.Claim} claim",
        "             * An object that provides methods to obtain information/requirements associated with a claim.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "             * @returns {*} Claim value.",
        "             * @throws {org.forgerock.oauth2.core.exceptions.InvalidRequestException}",
        "             * Rethrows this exception if a claim resolver throws it.",
        "             * You can throw org.forgerock.oauth2.core.exceptions.InvalidRequestException from your custom claim resolver",
        "             * if you want to terminate the claim processing.",
        "             */",
        "            function computeClaim(claim) {",
        "                var resolveClaim;",
        "                var message;",
        "",
        "                try {",
        "                    resolveClaim = claimResolvers[claim.getName()] || resolveAnyClaim;",
        "",
        "                    return resolveClaim(claim);",
        "                } catch (e) {",
        "                    message = 'OIDC Claims script exception. Unable to resolve OIDC Claim. ' + e;",
        "",
        "                    if (String(e).indexOf('org.forgerock.oauth2.core.exceptions.InvalidRequestException') !== -1) {",
        "                        throw e;",
        "                    }",
        "",
        "                    if (logger.warningEnabled()) {",
        "                        logger.warning(message);",
        "                    }",
        "                }",
        "            }",
        "",
        "            var computedClaims = new frJava.LinkedHashMap();",
        "",
        "            getClaims().toArray().forEach(function (claim) {",
        "                var claimValue = computeClaim(claim);",
        "",
        "                if (isClaimValueValid(claimValue)) {",
        "                    computedClaims.put(claim.getName(), claimValue);",
        "                } else {",
        "                    /**",
        "                     * If a claim has been processed, but appears in the list again,",
        "                     * and its value cannot be computed under the new conditions,",
        "                     * the claim is removed from the final result.",
        "                     *",
        "                     * For example, a claim could be mapped to a scope and found in the user profile,",
        "                     * but also requested by the client with required values that don't match the computed one.",
        "                     * @see {link https://openid.net/specs/openid-connect-core-1_0.html#IndividualClaimsRequests}.",
        "                     * for the relevant OIDC specification details.",
        "                     */",
        "                    computedClaims.remove(claim.getName());",
        "                }",
        "            });",
        "",
        "            return computedClaims;",
        "        }",
        "",
        "        /**",
        "         * Creates a map of requested scopes and the corresponding claim names.",
        "         * @returns {java.util.LinkedHashMap}",
        "         */",
        "        function getCompositeScopes () {",
        "            var compositeScopes = new frJava.LinkedHashMap();",
        "",
        "            scopes.toArray().forEach(function (scope) {",
        "                var scopeClaims = new frJava.ArrayList();",
        "",
        "                if (scopeClaimsMap[scope]) {",
        "                    scopeClaimsMap[scope].forEach(function (claimName) {",
        "                        scopeClaims.add(claimName);",
        "                    });",
        "                }",
        "",
        "                if (scopeClaims.size()) {",
        "                    compositeScopes.put(scope, scopeClaims);",
        "                }",
        "            });",
        "",
        "            return compositeScopes;",
        "        }",
        "",
        "        // PUBLIC METHODS",
        "",
        "        return {",
        "            setScopeClaimsMap: setScopeClaimsMap,",
        "            setClaimResolvers: setClaimResolvers,",
        "            getUserProfileClaimResolver: getUserProfileClaimResolver,",
        "            getAddressClaimResolver: getAddressClaimResolver,",
        "            getEssentialClaimResolver: getEssentialClaimResolver,",
        "            getUserInfoClaims: getUserInfoClaims",
        "        };",
        "    }",
        "",
        "    // RESULTS",
        "",
        "    /**",
        "     * This script returns an instance of the org.forgerock.oauth2.core.UserInfoClaims class",
        "     * populated with the computed claim values and",
        "     * the requested scopes mapped to the claim names.",
        "     * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/oauth2/core/UserInfoClaims.html}.",
        "     *",
        "     * Assigning it to a variable gives you an opportunity",
        "     * to log the content of the returned value during development.",
        "     */",
        "    var userInfoClaims = utils.getUserInfoClaims();",
        "",
        "    /*",
        "    logger.error(scriptName + ' results:')",
        "    logger.error('Values: ' + userInfoClaims.getValues())",
        "    logger.error('Scopes: ' + userInfoClaims.getCompositeScopes())",
        "    */",
        "",
        "    return userInfoClaims;",
        "}());",
        "",
      ],
    },
    "207f172f-ffb5-439d-b7df-e8e80408830b": {
      "_id": "207f172f-ffb5-439d-b7df-e8e80408830b",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Normalizes raw profile data from GitHub",
      "evaluatorVersion": "1.0",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "GitHub Profile Normalization (VS) - imported (1)",
      "script": [
        "/*",
        " * Copyright 2020 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "logger.warning("GitHub rawProfile: "+rawProfile)",
        "",
        "return json(object(",
        "        field("id", rawProfile.id),",
        "        field("displayName", rawProfile.name),",
        "        field("givenName", rawProfile.first_name),",
        "        field("familyName", rawProfile.last_name),",
        "        field("photoUrl", rawProfile.picture.data.url),",
        "        field("email", rawProfile.email),",
        "        field("username", rawProfile.email)))",
      ],
    },
    "223739f3-9c54-43b7-9572-3c5338786145": {
      "_id": "223739f3-9c54-43b7-9572-3c5338786145",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "evaluatorVersion": "1.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Format Username",
      "script": [
        "var username = sharedState.get("username");",
        "",
        "sharedState.put("displayName", username);",
        "outcome = "continue";",
      ],
    },
    "23143919-6b78-40c3-b25e-beca19b229e0": {
      "_id": "23143919-6b78-40c3-b25e-beca19b229e0",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Normalizes raw profile data from GitHub",
      "evaluatorVersion": "1.0",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "GitHub Profile Normalization (VS)",
      "script": [
        ""/*\\n * Copyright 2020 ForgeRock AS. All Rights Reserved\\n *\\n * Use of this code requires a commercial software license with ForgeRock AS.\\n * or with one of its affiliates. All use shall be exclusively subject\\n * to such license between the licensee and ForgeRock AS.\\n */\\n\\nimport static org.forgerock.json.JsonValue.field\\nimport static org.forgerock.json.JsonValue.json\\nimport static org.forgerock.json.JsonValue.object\\n\\nlogger.warning(\\"GitHub rawProfile: \\"+rawProfile)\\n\\nreturn json(object(\\n        field(\\"id\\", rawProfile.id),\\n        field(\\"displayName\\", rawProfile.name),\\n        field(\\"givenName\\", rawProfile.first_name),\\n        field(\\"familyName\\", rawProfile.last_name),\\n        field(\\"photoUrl\\", rawProfile.picture.data.url),\\n        field(\\"email\\", rawProfile.email),\\n        field(\\"username\\", rawProfile.email)))"",
      ],
    },
    "248b8a56-df81-4b1b-b4ba-45d994f6504c": {
      "_id": "248b8a56-df81-4b1b-b4ba-45d994f6504c",
      "context": "SAML2_IDP_ADAPTER",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Default global script for SAML2 IDP Adapter",
      "evaluatorVersion": "1.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "SAML2 IDP Adapter Script",
      "script": [
        "/*",
        " * Copyright 2021-2023 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        " * The script has these top level functions that could be executed during a SAML2 flow.",
        " *      - preSingleSignOn",
        " *      - preAuthentication",
        " *      - preSendResponse",
        " *      - preSignResponse",
        " *      - preSendFailureResponse",
        " *",
        " * Please see the javadoc for the interface definition and more information about these methods.",
        " * https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/plugins/SAML2IdentityProviderAdapter.html",
        " * Note that the initialize method is not supported in the scripts.",
        " *",
        " * Defined variables. Check the documentation on the respective functions for the variables available to it.",
        " *",
        " * hostedEntityId - String",
        " *     Entity ID for the hosted IDP",
        " * realm - String",
        " *     Realm of the hosted IDP",
        " * idpAdapterScriptHelper - IdpAdapterScriptHelper (1)",
        " *     An instance of IdpAdapterScriptHelper containing helper methods. See Javadoc for more details.",
        " * request - HttpServletRequest (2)",
        " *     Servlet request object",
        " * response - HttpServletResponse (3)",
        " *     Servlet response object",
        " * authnRequest - AuthnRequest (4)",
        " *     The original authentication request sent from SP",
        " * reqId - String",
        " *     The id to use for continuation of processing if the adapter redirects",
        " * res - Response (5)",
        " *     The SAML Response",
        " * session - SSOToken (6)",
        " *     The single sign-on session. The reference type of this is Object and would need to be casted to SSOToken.",
        " * relayState - String",
        " *     The relayState that will be used in the redirect",
        " * faultCode - String",
        " *     the fault code that will be returned in the SAML response",
        " * faultDetail - String",
        " *     the fault detail that will be returned in the SAML response",
        " * logger - Logger instance",
        " *     https://backstage.forgerock.com/docs/am/7.3/scripting-guide/scripting-api-global-logger.html.",
        " *     Corresponding log files will be prefixed with: scripts.<script name>",
        " *",
        " * Throws SAML2Exception (7):",
        " *     for any exceptions occurring in the adapter. The federation process will continue",
        " *",
        " * Class reference:",
        " * (1) idpAdapterScriptHelper - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/plugins/scripted/IdpAdapterScriptHelper.html.",
        " * (2) HttpServletRequest - https://tomcat.apache.org/tomcat-7.0-doc/servletapi/javax/servlet/http/HttpServletRequest.html.",
        " * (3) HttpServletResponse - https://tomcat.apache.org/tomcat-7.0-doc/servletapi/javax/servlet/http/HttpServletResponse.html.",
        " * (4) AuthnRequest - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/protocol/AuthnRequest.html.",
        " * (5) Response - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/protocol/Response.html.",
        " * (6) SSOToken - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/iplanet/sso/SSOToken.html.",
        " * (7) SAML2Exception - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/common/SAML2Exception.html.",
        " */",
        "",
        "/*",
        " * Template/default script for SAML2 IDP Adapter scripted plugin.",
        " */",
        "",
        "/*",
        " * Available variables for preSingleSignOn:",
        " *     hostedEntityId",
        " *     realm",
        " *     idpAdapterScriptHelper",
        " *     request",
        " *     authnRequest",
        " *     response",
        " *     reqId",
        " *     logger",
        " *",
        " * Return - true if browser redirection is happening after processing, false otherwise. Default to false.",
        " */",
        "function preSingleSignOn () {",
        "    return false;",
        "}",
        "",
        "/*",
        " * Available variables for preAuthentication:",
        " *     hostedEntityId",
        " *     realm",
        " *     idpAdapterScriptHelper",
        " *     request",
        " *     authnRequest",
        " *     response",
        " *     reqId",
        " *     session",
        " *     relayState",
        " *     logger",
        " *",
        " * Return - true if browser redirection is happening after processing, false otherwise. Default to false.",
        " */",
        "function preAuthentication () {",
        "    return false;",
        "}",
        "",
        "/*",
        " * Available variables for preSendResponse:",
        " *     hostedEntityId",
        " *     realm",
        " *     idpAdapterScriptHelper",
        " *     request",
        " *     authnRequest",
        " *     response",
        " *     reqId",
        " *     session",
        " *     relayState",
        " *     logger",
        " *",
        " * Return - true if browser redirection happened after processing, false otherwise. Default to false.",
        " */",
        "function preSendResponse () {",
        "    return false;",
        "}",
        "",
        "/*",
        " * Available variables for preSignResponse:",
        " *     hostedEntityId",
        " *     realm",
        " *     idpAdapterScriptHelper",
        " *     request",
        " *     authnRequest",
        " *     session",
        " *     relayState",
        " *     res",
        " *     logger",
        " */",
        "function preSignResponse () {",
        "}",
        "",
        "/*",
        " * Available variables for preSendFailureResponse:",
        " *     hostedEntityId",
        " *     realm",
        " *     idpAdapterScriptHelper",
        " *     request",
        " *     response",
        " *     faultCode",
        " *     faultDetail",
        " *     logger",
        " */",
        "function preSendFailureResponse () {",
        "}",
      ],
    },
    "25e6c06d-cf70-473b-bd28-26931edc476b": {
      "_id": "25e6c06d-cf70-473b-bd28-26931edc476b",
      "context": "OAUTH2_VALIDATE_SCOPE",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Default global script for OAuth2 Scope Validation",
      "evaluatorVersion": "1.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "OAuth2 Validate Scope Script",
      "script": [
        "/*",
        " * Copyright 2021 ForgeRock AS. All Rights Reserved",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        " * This script validates the requested scopes against the allowed scopes.",
        " * If no scopes are requested, default scopes are assumed.",
        " * The script has four top level functions that could be executed during the different OAuth2 flows:",
        " *      - validateAuthorizationScope",
        " *      - validateAccessTokenScope",
        " *      - validateRefreshTokenScope",
        " *      - validateBackChannelAuthorizationScope",
        " *",
        " * Defined variables:",
        " * requestedScopes - Set<String> (1).",
        " *          The set of requested scopes.",
        " * defaultScopes - Set<String> (1).",
        " *                 The set of default scopes.",
        " * allowedScopes - Set<String> (1).",
        " *                 The set of allowed scopes.",
        " * scriptName - String (primitive).",
        " *              Always present, the display name of the script.",
        " * logger - Always present, the debug logger instance:",
        " *          https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.",
        " *          Corresponding log files will be prefixed with: scripts.OAUTH2_VALIDATE_SCOPE",
        " * httpClient - HTTP Client (2).",
        " *              Always present, the HTTP Client instance:",
        " *              https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-http-client.html#scripting-api-global-http-client.",
        " *",
        " * Throws InvalidScopeException:",
        " *      - if there are no scopes requested and default scopes are empty",
        " *      - if a requested scope is not allowed",
        " *",
        " * Return - a Set<String> of validated scopes (1).",
        " *",
        " * Class reference:",
        " * (1) Set - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashSet.html.",
        " * (2) Client - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/http/Client.html.",
        " */",
        "",
        "/**",
        " * Default validate scope script.",
        " */",
        "function validateScopes () {",
        "    var frJava = JavaImporter(",
        "        org.forgerock.oauth2.core.exceptions.InvalidScopeException",
        "    );",
        "",
        "    var scopes;",
        "    if (requestedScopes == null || requestedScopes.isEmpty()) {",
        "        scopes = defaultScopes;",
        "    } else {",
        "        scopes = new java.util.HashSet(allowedScopes);",
        "        scopes.retainAll(requestedScopes);",
        "        if (requestedScopes.size() > scopes.size()) {",
        "            var invalidScopes = new java.util.HashSet(requestedScopes);",
        "            invalidScopes.removeAll(allowedScopes);",
        "            throw new frJava.InvalidScopeException('Unknown/invalid scope(s)');",
        "        }",
        "    }",
        "",
        "    if (scopes == null || scopes.isEmpty()) {",
        "        throw new frJava.InvalidScopeException('No scope requested and no default scope configured');",
        "    }",
        "    return scopes;",
        "}",
        "",
        "function validateAuthorizationScope () {",
        "    return validateScopes();",
        "}",
        "",
        "function validateAccessTokenScope () {",
        "    return validateScopes();",
        "}",
        "",
        "function validateRefreshTokenScope () {",
        "    return validateScopes();",
        "}",
        "",
        "function validateBackChannelAuthorizationScope () {",
        "    return validateScopes();",
        "}",
      ],
    },
    "2c38c998-aec0-4e56-8d46-bff6e24a704e": {
      "_id": "2c38c998-aec0-4e56-8d46-bff6e24a704e",
      "context": "LIBRARY",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "My Example Library",
      "evaluatorVersion": "2.0",
      "exports": [
        {
          "id": "MSG",
          "type": "String",
        },
        {
          "arity": 1,
          "id": "add",
          "type": "Function",
        },
        {
          "arity": 1,
          "id": "logTotal",
          "type": "Function",
        },
        {
          "arity": 2,
          "id": "logTotalWithMessage",
          "type": "Function",
        },
      ],
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "My Example Library",
      "script": [
        "var i = 0;",
        "",
        "function add(j) {i += j};",
        "function logTotal(log) { log.info("Total: " + i) };",
        "",
        "// export constant",
        "exports.MSG = 'Final sum';",
        "",
        "// export functions",
        "exports.add = add;",
        "exports.logTotal = logTotal;",
        "",
        "//direct export using an inline declaration",
        "exports.logTotalWithMessage = (log, message) => log.info(message + ": " + i);",
      ],
    },
    "312e951f-70c5-49d2-a9ae-93aef909d5df": {
      "_id": "312e951f-70c5-49d2-a9ae-93aef909d5df",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Normalizes raw profile data from Salesforce",
      "evaluatorVersion": "1.0",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Salesforce Profile Normalization",
      "script": [
        "/*",
        " * Copyright 2020 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "return json(object(",
        "        field("id", rawProfile.user_id),",
        "        field("displayName", rawProfile.name),",
        "        field("givenName", rawProfile.given_name),",
        "        field("familyName", rawProfile.family_name),",
        "        field("photoUrl", rawProfile.picture),",
        "        field("email", rawProfile.email),",
        "        field("username", rawProfile.email),",
        "        field("locale", rawProfile.zoneInfo)))",
      ],
    },
    "36863ffb-40ec-48b9-94b1-9a99f71cc3b5": {
      "_id": "36863ffb-40ec-48b9-94b1-9a99f71cc3b5",
      "context": "OIDC_CLAIMS",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Default global script for OIDC claims",
      "evaluatorVersion": "1.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "OIDC Claims Script",
      "script": [
        "/*",
        " * Copyright 2014-2023 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        " * This script computes claim values returned in ID tokens and/or at the UserInfo Endpoint.",
        " * The claim values are computed for:",
        " * the claims derived from the requested scopes,",
        " * the claims provided by the authorization server,",
        " * and the claims requested by the client via the claims parameter.",
        " *",
        " * In the CONFIGURATION AND CUSTOMIZATION section, you can",
        " * define the scope-to-claims mapping, and",
        " * assign to each claim a resolver function that will compute the claim value.",
        " *",
        " * Defined variables (class references are provided below):",
        " * scopes - Set<String> (6).",
        " *          Always present, the requested scopes.",
        " * claims - Map<String, Object> (5).",
        " *          Always present, default server provided claims.",
        " * claimObjects - List<Claim> (7, 2).",
        " *                Always present, the default server provided claims.",
        " * requestedClaims - Map<String, Set<String>> (5).",
        " *                   Always present, not empty if the request contains the claims parameter and the server has enabled",
        " *                   claims_parameter_supported. A map of the requested claims to possible values, otherwise empty;",
        " *                   requested claims with no requested values will have a key but no value in the map. A key with",
        " *                   a single value in its Set (6) indicates that this is the only value that should be returned.",
        " * requestedTypedClaims - List<Claim> (7, 2).",
        " *                        Always present, the requested claims.",
        " *                        Requested claims with no requested values will have a claim with no values.",
        " *                        A claim with a single value indicates this is the only value that should be returned.",
        " * claimsLocales - List<String> (7).",
        " *                 The values from the 'claims_locales' parameter.",
        " *                 See https://openid.net/specs/openid-connect-core-1_0.html#ClaimsLanguagesAndScripts for the OIDC specification details.",
        " * requestProperties - Unmodifiable Map (5).",
        " *                     Always present, contains a map of request properties:",
        " *                     requestUri - The request URI.",
        " *                     realm - The realm that the request relates to.",
        " *                     requestParams - A map of the request params and/or posted data.",
        " *                                     Each value is a list of one or more properties.",
        " *                                     Please note that these should be handled in accordance with OWASP best practices:",
        " *                                     https://owasp.org/www-community/vulnerabilities/Unsafe_use_of_Reflection.",
        " * clientProperties - Unmodifiable Map (5).",
        " *                    Present if the client specified in the request was identified, contains a map of client properties:",
        " *                    clientId - The client's URI for the request locale.",
        " *                    allowedGrantTypes - List of the allowed grant types (org.forgerock.oauth2.core.GrantType) for the client.",
        " *                    allowedResponseTypes - List of the allowed response types for the client.",
        " *                    allowedScopes - List of the allowed scopes for the client.",
        " *                    customProperties - A map of the custom properties of the client.",
        " *                                       Lists or maps will be included as sub-maps; for example:",
        " *                                       customMap[Key1]=Value1 will be returned as customMap -> Key1 -> Value1.",
        " *                                       To add custom properties to a client, update the Custom Properties field",
        " *                                       in AM Console > Realm Name > Applications > OAuth 2.0 > Clients > Client ID > Advanced.",
        " * identity - AMIdentity (3).",
        " *            Always present, the identity of the resource owner.",
        " * session - SSOToken (4).",
        " *           Present if the request contains the session cookie, the user's session object.",
        " * scriptName - String (primitive).",
        " *              Always present, the display name of the script.",
        " * logger - Always present, the "OAuth2Provider" debug logger instance:",
        " *          https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.",
        " *          Corresponding files will be prefixed with: scripts.OIDC_CLAIMS.",
        " * httpClient - HTTP Client (8).",
        " *              Always present, the HTTP Client instance:",
        " *              https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-http-client.html#scripting-api-global-http-client.",
        " *              In order to use the client, you may need to add",
        " *              org.forgerock.http.Client,",
        " *              org.forgerock.http.protocol.*,",
        " *              and org.forgerock.util.promise.PromiseImpl",
        " *              to the allowed Java classes in the scripting engine configuration, as described in:",
        " *              https://backstage.forgerock.com/docs/am/7/scripting-guide/script-engine-security.html",
        " *",
        " * Return - a new UserInfoClaims(Map<String, Object> values, Map<String, List<String>> compositeScopes) (1) object.",
        " *          The result of the last statement in the script is returned to the server.",
        " *          Currently, the Immediately Invoked Function Expression (also known as Self-Executing Anonymous Function)",
        " *          is the last (and only) statement in this script, and its return value will become the script result.",
        " *          Do not use "return variable" statement outside of a function definition.",
        " *          See RESULTS section for additional details.",
        " *",
        " * Class reference:",
        " * (1) UserInfoClaims - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/oauth2/core/UserInfoClaims.html.",
        " * (2) Claim - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html).",
        " *         An instance of org.forgerock.openidconnect.Claim has methods to access",
        " *         the claim name, requested values, locale, and whether the claim is essential.",
        " * (3) AMIdentity - https://backstage.forgerock.com/docs/am/7/apidocs/com/sun/identity/idm/AMIdentity.html.",
        " * (4) SSOToken - https://backstage.forgerock.com/docs/am/7/apidocs/com/iplanet/sso/SSOToken.html.",
        " * (5) Map - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashMap.html,",
        " *           or https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/LinkedHashMap.html.",
        " * (6) Set - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashSet.html.",
        " * (7) List - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/ArrayList.html.",
        " * (8) Client - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/http/Client.html.",
        "*/",
        "",
        "(function () {",
        "    // SETUP",
        "",
        "    /**",
        "     * Claim processing utilities.",
        "     * An object that contains reusable functions for processing claims.",
        "     * @see CLAIM PROCESSING UTILITIES section for details.",
        "     */",
        "    var utils = getUtils();",
        "",
        "    // CONFIGURATION AND CUSTOMIZATION",
        "",
        "    /**",
        "     * OAuth 2.0 scope values (scopes) can be used by the Client to request OIDC claims.",
        "     *",
        "     * Call this configuration method, and pass in as the first argument",
        "     * an object that maps a scope value to an array of claim names",
        "     * to specify which claims need to be processed and returned for the requested scopes.",
        "     * @see {@link https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims}",
        "     * for the scope values that could be used to request claims as defined in the OIDC specification.",
        "     *",
        "     * Below, find a default configuration that is expected to work in the current environment.",
        "     *",
        "     * CUSTOMIZATION",
        "     * You can choose the claim names returned for a scope.",
        "     */",
        "    utils.setScopeClaimsMap({",
        "        profile: [",
        "            'name',",
        "            'family_name',",
        "            'given_name',",
        "            'zoneinfo',",
        "            'locale'",
        "        ],",
        "        email: ['email'],",
        "        address: ['address'],",
        "        phone: ['phone_number']",
        "    });",
        "",
        "    /**",
        "     * In this script, each claim",
        "     * derived from the requested scopes,",
        "     * provided by the authorization server, and",
        "     * requested by the client via the claims parameter",
        "     * will be processed by a function associated with the claim name.",
        "     *",
        "     * Call this configuration method, and pass in as the first argument",
        "     * an object that maps a claim name to a resolver function,",
        "     * which will be automatically executed for each claim processed by the script.",
        "     *",
        "     * The claim resolver function will receive the requested claim information",
        "     * in an instance of org.forgerock.openidconnect.Claim as the first argument.",
        "     * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html}",
        "     * for details on the Claim class.",
        "     *",
        "     * If the claim resolver function returns a value,",
        "     * other than undefined or null,",
        "     * the claim will be included in the script's results.",
        "     *",
        "     * The Claim instance provides methods to check",
        "     * what the name of the claim is,",
        "     * which values the claim request contains,",
        "     * whether the claim is essential, and",
        "     * which locale the claim is associated with.",
        "     * The resolver function can consider this information when computing and returning the claim value.",
        "     *",
        "     * Below, find a default configuration that is expected to work in the current environment.",
        "     * A reusable function, utils.getUserProfileClaimResolver(String attribute-name),",
        "     * is called to return a claim resolver function based on a user profile attribute.",
        "     * @see CLAIM RESOLVERS section for the implementation details and examples.",
        "     * For the address claim, an example of a claim resolver that uses another claim resolver is provided.",
        "     *",
        "     * CUSTOMIZATION",
        "     * You can reuse the predefined utils methods with your custom arguments.",
        "     * You can also specify a custom resolver function for a claim name,",
        "     * that will compute and return the claim value—as shown in the commented out example below.",
        "     */",
        "    utils.setClaimResolvers({",
        "        /*",
        "        // An example of a simple claim resolver function that is defined for a claim",
        "        // directly in the configuration object:",
        "        custom-claim-name: function (requestedClaim) {",
        "            // In this case, initially, the claim value comes straight from a user profile attribute value:",
        "            var claimValue = identity.getAttribute('custom-attribute-name').toArray()[0]",
        "",
        "            // Optionally, provide additional logic for processing (filtering, formatting, etc.) the claim value.",
        "            // You can use:",
        "            // requestedClaim.getName()",
        "            // requestedClaim.getValues()",
        "            // requestedClaim.getLocale()",
        "            // requestedClaim.isEssential()",
        "",
        "            return claimValue",
        "        },",
        "        */",
        "        /**",
        "         * The use of utils.getUserProfileClaimResolver shows how",
        "         * an argument passed to a function that returns a claim resolver",
        "         * becomes available to the resolver function (via its lexical context).",
        "         */",
        "        name: utils.getUserProfileClaimResolver('cn'),",
        "        family_name: utils.getUserProfileClaimResolver('sn'),",
        "        given_name: utils.getUserProfileClaimResolver('givenname'),",
        "        zoneinfo: utils.getUserProfileClaimResolver('preferredtimezone'),",
        "        locale: utils.getUserProfileClaimResolver('preferredlocale'),",
        "        email: utils.getUserProfileClaimResolver('mail'),",
        "        address: utils.getAddressClaimResolver(",
        "            /**",
        "             * The passed in user profile claim resolver function",
        "             * can be used by the address claim resolver function",
        "             * to obtain the claim value to be formatted as per the OIDC specification:",
        "             * @see https://openid.net/specs/openid-connect-core-1_0.html#AddressClaim.",
        "             */",
        "            utils.getUserProfileClaimResolver('postaladdress')",
        "        ),",
        "        phone_number: utils.getUserProfileClaimResolver('telephonenumber')",
        "    });",
        "",
        "    // CLAIM PROCESSING UTILITIES",
        "",
        "    /**",
        "     * @returns {object} An object that contains reusable claim processing utilities.",
        "     * @see PUBLIC METHODS section and the return statement for the list of exported functions.",
        "     */",
        "    function getUtils () {",
        "        // IMPORT JAVA",
        "",
        "        /**",
        "         * Provides Java scripting functionality.",
        "         * @see {@link https://developer.mozilla.org/en-US/docs/Mozilla/Projects/Rhino/Scripting_Java#javaimporter_constructor}.",
        "         */",
        "        var frJava = JavaImporter(",
        "            org.forgerock.oauth2.core.exceptions.InvalidRequestException,",
        "            org.forgerock.oauth2.core.UserInfoClaims,",
        "            org.forgerock.openidconnect.Claim,",
        "",
        "            java.util.LinkedHashMap,",
        "            java.util.ArrayList",
        "        );",
        "",
        "        // SET UP CONFIGURATION",
        "",
        "        /**",
        "         * Placeholder for a configuration option that contains",
        "         * an object that maps the supported scope values (scopes)",
        "         * and the corresponding claim names for each scope value.",
        "         */",
        "        var scopeClaimsMap;",
        "",
        "        /**",
        "         * Placeholder for a configuration option that contains",
        "         * an object that maps the supported claim names",
        "         * and the resolver functions returning the claim value.",
        "         */",
        "        var claimResolvers;",
        "",
        "        /**",
        "         * A (public) method that accepts an object that maps the supported scopes and the corresponding claim names,",
        "         * and assigns it to a (private) variable that serves as a configuration option.",
        "         * @param {object} params - An object that maps each supported scope value to an array of claim names,",
        "         * in order to specify which claims need to be processed for the requested scopes.",
        "         * @see {@link https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims} for details.",
        "         * @param {string[]} [params.profile] - An array of claim names to be returned if the profile scope is requested.",
        "         * @param {string[]} [params.email] - An array of claim names to be returned if the email scope is requested.",
        "         * @param {string[]} [params.address] - An array of claim names to be returned if the address scope is requested.",
        "         * @param {string[]} [params.phone] - An array of claim names to be returned if the phone scope is requested.",
        "         * @returns {undefined}",
        "         */",
        "        function setScopeClaimsMap(params) {",
        "            scopeClaimsMap = params;",
        "        }",
        "",
        "        /**",
        "         * A (public) method that accepts an object that maps the supported claim names",
        "         * and the resolver functions returning the claim value,",
        "         * and assigns it to a (private) variable that serves as a configuration option.",
        "         * @param {object} params - An object that maps",
        "         * each supported claim name to a function that computes and returns the claim value.",
        "         */",
        "        function setClaimResolvers(params) {",
        "            claimResolvers = params;",
        "        }",
        "",
        "        // CLAIM RESOLVERS",
        "",
        "        /**",
        "         * Claim resolvers are functions that return a claim value.",
        "         * @param {*}",
        "         * @returns {*}",
        "         */",
        "",
        "        /**",
        "         * Defines a claim resolver based on a user profile attribute.",
        "         * @param {string} attributeName - Name of the user profile attribute.",
        "         * @returns {function} A function that will determine the claim value",
        "         * based on the user profile attribute and the (requested) claim properties.",
        "         */",
        "        function getUserProfileClaimResolver (attributeName) {",
        "            /**",
        "             * Resolves a claim with a user profile attribute value.",
        "             * Returns undefined if the identity attribute is not populated,",
        "             * OR if the claim has requested values that do not contain the identity attribute value.",
        "             * ATTENTION: the aforementioned comparison is case-sensitive.",
        "             * @param {org.forgerock.openidconnect.Claim} claim",
        "             * An object that provides methods to obtain information/requirements associated with a claim.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "             * @returns {string|HashSet|undefined}",
        "             */",
        "            function resolveClaim(claim) {",
        "                var userProfileValue;",
        "",
        "                if (identity) {",
        "                    userProfileValue = getClaimValueFromSet(claim, identity.getAttribute(attributeName));",
        "",
        "                    if (userProfileValue && !userProfileValue.isEmpty()) {",
        "                        if (!claim.getValues() || claim.getValues().isEmpty() || claim.getValues().contains(userProfileValue)) {",
        "                            return userProfileValue;",
        "                        }",
        "                    }",
        "                }",
        "            }",
        "",
        "            return resolveClaim;",
        "        }",
        "",
        "        /**",
        "         * Returns an address claim resolver based on a claim value obtained with another claim resolver.",
        "         * @param {function} resolveClaim - A function that returns a claim value.",
        "         * @returns {function} A function that will accept a claim as an argument,",
        "         * run the claim resolver function for the claim and obtain the claim value,",
        "         * and apply additional formatting to the value before returning it.",
        "         */",
        "        function getAddressClaimResolver (resolveClaim) {",
        "            /**",
        "             * Creates an address claim object from a value returned by a claim resolver,",
        "             * and returns the address claim object as the claim value.",
        "             * @see {@link https://openid.net/specs/openid-connect-core-1_0.html#AddressClaim}.",
        "             * The claim value is obtained with a claim resolving function available from the closure.",
        "             * @param {org.forgerock.openidconnect.Claim} claim",
        "             * An object that provides methods to obtain information/requirements associated with a claim.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "             * @returns {java.util.LinkedHashMap|undefined} The address claim object created from a claim value.",
        "             */",
        "            function resolveAddressClaim(claim) {",
        "                var claimValue = resolveClaim(claim);",
        "                var addressObject;",
        "",
        "                if (isClaimValueValid(claimValue)) {",
        "                    addressObject = new frJava.LinkedHashMap();",
        "",
        "                    addressObject.put('formatted', claimValue);",
        "",
        "                    return addressObject;",
        "                }",
        "            }",
        "",
        "            return resolveAddressClaim;",
        "        }",
        "",
        "        /**",
        "         * Returns an essential claim resolver based on a claim value obtained with another claim resolver.",
        "         * @param {function} resolveClaim - A function that returns a claim value.",
        "         * @returns {function} A function that will accept a claim as an argument,",
        "         * run the claim resolver function for the claim and obtain the claim value,",
        "         * and apply additional logic for essential claims.",
        "         */",
        "        function getEssentialClaimResolver (resolveClaim) {",
        "            /**",
        "             * Returns a claim value or throws an error.",
        "             * The claim value is obtained with a claim resolving function available from the closure.",
        "             * Throws an exception if the claim is essential and no value is returned for the claim.",
        "             *",
        "             * Use of this resolver is optional.",
        "             * @see {@link https://openid.net/specs/openid-connect-core-1_0.html#IndividualClaimsRequests} stating:",
        "             * "Note that even if the Claims are not available because the End-User did not authorize their release or they are not present,",
        "             * the Authorization Server MUST NOT generate an error when Claims are not returned, whether they are Essential or Voluntary,",
        "             * unless otherwise specified in the description of the specific claim."",
        "             *",
        "             * @param {org.forgerock.openidconnect.Claim} claim",
        "             * An object that provides methods to obtain information/requirements associated with a claim.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "             * @returns {*}",
        "             * @throws {org.forgerock.oauth2.core.exceptions.InvalidRequestException}",
        "             */",
        "            function resolveEssentialClaim(claim) {",
        "                var claimValue = resolveClaim(claim);",
        "",
        "                if (claim.isEssential() && !isClaimValueValid(claimValue)) {",
        "                    throw new frJava.InvalidRequestException('Could not provide value for essential claim: ' + claim.getName());",
        "                }",
        "",
        "                return claimValue;",
        "            }",
        "",
        "            return resolveEssentialClaim;",
        "        }",
        "",
        "        /**",
        "         * Provides default resolution for a claim.",
        "         * Use it if a claim-specific resolver is not defined in the configuration.",
        "         * @param {org.forgerock.openidconnect.Claim} claim",
        "         * An object that provides methods to obtain information/requirements associated with a claim.",
        "         * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "         * @returns {*} A single value associated with this claim.",
        "         */",
        "        function resolveAnyClaim (claim) {",
        "            if (claim.getValues().size() === 1) {",
        "                return claim.getValues().toArray()[0];",
        "            }",
        "        }",
        "",
        "        // UTILITIES",
        "",
        "        /**",
        "         * Returns claim value from a set.",
        "         * If the set contains a single value, returns the value.",
        "         * If the set contains multiple values, returns the set.",
        "         * Otherwise, returns undefined.",
        "         *",
        "         * @param {org.forgerock.openidconnect.Claim} claim",
        "         * An object that provides methods to obtain information/requirements associated with a claim.",
        "         * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "         * @param {java.util.HashSet} set The set—for example, a user profile attribute value.",
        "         * @returns {string|java.util.HashSet|undefined}",
        "         */",
        "        function getClaimValueFromSet (claim, set) {",
        "            if (set && set.size()) {",
        "                if (set.size() === 1) {",
        "                    return set.toArray()[0];",
        "                } else {",
        "                    return set;",
        "                }",
        "            } else if (logger.warningEnabled()) {",
        "                logger.warning('OIDC Claims script. Got an empty set for claim: ' + claim.getName());",
        "            }",
        "        }",
        "",
        "        function isClaimValueValid (claimValue) {",
        "            if (typeof claimValue === 'undefined' || claimValue === null) {",
        "                return false;",
        "            }",
        "",
        "            return true;",
        "        }",
        "",
        "        // CLAIM PROCESSING",
        "",
        "        /**",
        "         * Constructs and returns an object populated with the computed claim values",
        "         * and the requested scopes mapped to the claim names.",
        "         * @returns {org.forgerock.oauth2.core.UserInfoClaims} The object to be returned to the authorization server.",
        "         * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/oauth2/core/UserInfoClaims.html}.",
        "         * @see RESULTS section for the use of this function.",
        "         */",
        "        function getUserInfoClaims () {",
        "            return new frJava.UserInfoClaims(getComputedClaims(), getCompositeScopes());",
        "        }",
        "",
        "        /**",
        "         * Creates a map of (requested) claim names populated with the computed claim values.",
        "         * @returns {java.util.LinkedHashMap}",
        "         * A map of the requested claim names and the corresponding claim values.",
        "         */",
        "        function getComputedClaims () {",
        "            /**",
        "             * Creates a complete list of claim objects from:",
        "             * the claims derived from the scopes,",
        "             * the claims provided by the authorization server,",
        "             * and the claims requested by the client.",
        "             * @returns {java.util.ArrayList}",
        "             * Returns a complete list of org.forgerock.openidconnect.Claim objects available to the script.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for the claim object details.",
        "             */",
        "            function getClaims() {",
        "                /**",
        "                 * Returns a list of claim objects for the requested scopes.",
        "                 * Uses the scopeClaimsMap configuration option to derive the claim names;",
        "                 * no other properties of a claim derived from a scope are populated.",
        "                 * @returns {java.util.ArrayList}",
        "                 * A list of org.forgerock.openidconnect.Claim objects derived from the requested scopes.",
        "                 * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for the claim object details.",
        "                 */",
        "                function convertScopeToClaims() {",
        "                    var claims = new frJava.ArrayList();",
        "",
        "                    scopes.toArray().forEach(function (scope) {",
        "                        if (String(scope) !== 'openid' && scopeClaimsMap[scope]) {",
        "                            scopeClaimsMap[scope].forEach(function (claimName) {",
        "                                claims.add(new frJava.Claim(claimName));",
        "                            });",
        "                        }",
        "                    });",
        "",
        "                    return claims;",
        "                }",
        "",
        "                var claims = new frJava.ArrayList();",
        "",
        "                claims.addAll(convertScopeToClaims());",
        "                claims.addAll(claimObjects);",
        "                claims.addAll(requestedTypedClaims);",
        "",
        "                return claims;",
        "            }",
        "",
        "            /**",
        "             * Computes and returns a claim value.",
        "             * To obtain the claim value, uses the resolver function specified for the claim in the claimResolvers configuration object.",
        "             * @see claimResolvers",
        "             * If no resolver function is found, uses the default claim resolver function.",
        "             *",
        "             * @param {org.forgerock.openidconnect.Claim} claim",
        "             * An object that provides methods to obtain information/requirements associated with a claim.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "             * @returns {*} Claim value.",
        "             * @throws {org.forgerock.oauth2.core.exceptions.InvalidRequestException}",
        "             * Rethrows this exception if a claim resolver throws it.",
        "             * You can throw org.forgerock.oauth2.core.exceptions.InvalidRequestException from your custom claim resolver",
        "             * if you want to terminate the claim processing.",
        "             */",
        "            function computeClaim(claim) {",
        "                var resolveClaim;",
        "                var message;",
        "",
        "                try {",
        "                    resolveClaim = claimResolvers[claim.getName()] || resolveAnyClaim;",
        "",
        "                    return resolveClaim(claim);",
        "                } catch (e) {",
        "                    message = 'OIDC Claims script exception. Unable to resolve OIDC Claim. ' + e;",
        "",
        "                    if (String(e).indexOf('org.forgerock.oauth2.core.exceptions.InvalidRequestException') !== -1) {",
        "                        throw e;",
        "                    }",
        "",
        "                    if (logger.warningEnabled()) {",
        "                        logger.warning(message);",
        "                    }",
        "                }",
        "            }",
        "",
        "            var computedClaims = new frJava.LinkedHashMap();",
        "",
        "            getClaims().toArray().forEach(function (claim) {",
        "                var claimValue = computeClaim(claim);",
        "",
        "                if (isClaimValueValid(claimValue)) {",
        "                    computedClaims.put(claim.getName(), claimValue);",
        "                } else {",
        "                    /**",
        "                     * If a claim has been processed, but appears in the list again,",
        "                     * and its value cannot be computed under the new conditions,",
        "                     * the claim is removed from the final result.",
        "                     *",
        "                     * For example, a claim could be mapped to a scope and found in the user profile,",
        "                     * but also requested by the client with required values that don't match the computed one.",
        "                     * @see {link https://openid.net/specs/openid-connect-core-1_0.html#IndividualClaimsRequests}.",
        "                     * for the relevant OIDC specification details.",
        "                     */",
        "                    computedClaims.remove(claim.getName());",
        "                }",
        "            });",
        "",
        "            return computedClaims;",
        "        }",
        "",
        "        /**",
        "         * Creates a map of requested scopes and the corresponding claim names.",
        "         * @returns {java.util.LinkedHashMap}",
        "         */",
        "        function getCompositeScopes () {",
        "            var compositeScopes = new frJava.LinkedHashMap();",
        "",
        "            scopes.toArray().forEach(function (scope) {",
        "                var scopeClaims = new frJava.ArrayList();",
        "",
        "                if (scopeClaimsMap[scope]) {",
        "                    scopeClaimsMap[scope].forEach(function (claimName) {",
        "                        scopeClaims.add(claimName);",
        "                    });",
        "                }",
        "",
        "                if (scopeClaims.size()) {",
        "                    compositeScopes.put(scope, scopeClaims);",
        "                }",
        "            });",
        "",
        "            return compositeScopes;",
        "        }",
        "",
        "        // PUBLIC METHODS",
        "",
        "        return {",
        "            setScopeClaimsMap: setScopeClaimsMap,",
        "            setClaimResolvers: setClaimResolvers,",
        "            getUserProfileClaimResolver: getUserProfileClaimResolver,",
        "            getAddressClaimResolver: getAddressClaimResolver,",
        "            getEssentialClaimResolver: getEssentialClaimResolver,",
        "            getUserInfoClaims: getUserInfoClaims",
        "        };",
        "    }",
        "",
        "    // RESULTS",
        "",
        "    /**",
        "     * This script returns an instance of the org.forgerock.oauth2.core.UserInfoClaims class",
        "     * populated with the computed claim values and",
        "     * the requested scopes mapped to the claim names.",
        "     * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/oauth2/core/UserInfoClaims.html}.",
        "     *",
        "     * Assigning it to a variable gives you an opportunity",
        "     * to log the content of the returned value during development.",
        "     */",
        "    var userInfoClaims = utils.getUserInfoClaims();",
        "",
        "    /*",
        "    logger.error(scriptName + ' results:')",
        "    logger.error('Values: ' + userInfoClaims.getValues())",
        "    logger.error('Scopes: ' + userInfoClaims.getCompositeScopes())",
        "    */",
        "",
        "    return userInfoClaims;",
        "}());",
        "",
      ],
    },
    "39c08084-1238-43e8-857f-2e11005eac49": {
      "_id": "39c08084-1238-43e8-857f-2e11005eac49",
      "context": "OAUTH2_ACCESS_TOKEN_MODIFICATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Default alpha realm script for OAuth2 Access Token Modification",
      "evaluatorVersion": "1.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Alpha OAuth2 Access Token Modification Script",
      "script": [
        "/*",
        " * Copyright 2019-2021 ForgeRock AS. All Rights Reserved.",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        " * This script lets you modify information associated with an OAuth2 access token",
        " * with methods provided by the AccessToken (1) interface.",
        " * The changes made to OAuth2 access tokens will directly impact the size of the CTS tokens,",
        " * and, similarly, the size of the JWTs if client-based OAuth2 tokens are utilized.",
        " * When adding/updating fields make sure that the token size remains within client/user-agent limits.",
        " *",
        " * Defined variables:",
        " * accessToken - AccessToken (1).",
        " *               The access token to be updated.",
        " *               Mutable object, all changes to the access token will be reflected.",
        " * scopes - Set<String> (6).",
        " *          Always present, the requested scopes.",
        " * requestProperties - Unmodifiable Map (5).",
        " *                     Always present, contains a map of request properties:",
        " *                     requestUri - The request URI.",
        " *                     realm - The realm that the request relates to.",
        " *                     requestParams - A map of the request params and/or posted data.",
        " *                                     Each value is a list of one or more properties.",
        " *                                     Please note that these should be handled in accordance with OWASP best practices:",
        " *                                     https://owasp.org/www-community/vulnerabilities/Unsafe_use_of_Reflection.",
        " * clientProperties - Unmodifiable Map (5).",
        " *                    Present if the client specified in the request was identified, contains a map of client properties:",
        " *                    clientId - The client's URI for the request locale.",
        " *                    allowedGrantTypes - List of the allowed grant types (org.forgerock.oauth2.core.GrantType) for the client.",
        " *                    allowedResponseTypes - List of the allowed response types for the client.",
        " *                    allowedScopes - List of the allowed scopes for the client.",
        " *                    customProperties - A map of the custom properties of the client.",
        " *                                       Lists or maps will be included as sub-maps; for example:",
        " *                                       customMap[Key1]=Value1 will be returned as customMap -> Key1 -> Value1.",
        " *                                       To add custom properties to a client, update the Custom Properties field",
        " *                                       in AM Console > Realm Name > Applications > OAuth 2.0 > Clients > Client ID > Advanced.",
        " * identity - AMIdentity (3).",
        " *            Always present, the identity of the resource owner.",
        " * session - SSOToken (4).",
        " *           Present if the request contains the session cookie, the user's session object.",
        " * scriptName - String (primitive).",
        " *              Always present, the display name of the script.",
        " * logger - Always present, the "OAuth2Provider" debug logger instance:",
        " *          https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.",
        " *          Corresponding log files will be prefixed with: scripts.OAUTH2_ACCESS_TOKEN_MODIFICATION.",
        " * httpClient - HTTP Client (8).",
        " *              Always present, the HTTP Client instance:",
        " *              https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-http-client.html#scripting-api-global-http-client.",
        " *",
        " * Return - no value is expected, changes shall be made to the accessToken parameter directly.",
        " *",
        " * Class reference:",
        " * (1) AccessToken - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/oauth2/core/AccessToken.html.",
        " * (3) AMIdentity - https://backstage.forgerock.com/docs/am/7/apidocs/com/sun/identity/idm/AMIdentity.html.",
        " * (4) SSOToken - https://backstage.forgerock.com/docs/am/7/apidocs/com/iplanet/sso/SSOToken.html.",
        " * (5) Map - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashMap.html,",
        " *           or https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/LinkedHashMap.html.",
        " * (6) Set - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashSet.html.",
        " * (8) Client - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/http/Client.html.",
        " */",
        "",
        "/* EXAMPLE",
        "(function () {",
        "    var frJava = JavaImporter(",
        "        org.forgerock.http.protocol.Request,",
        "        org.forgerock.http.protocol.Response",
        "    );",
        "",
        "    // Always includes this field in the token.",
        "    accessToken.setField('key1', 'value1');",
        "",
        "    // Receives and adds to the access token additional values by performing a REST call to an external service.",
        "    // WARNING: Below, you will find a reference to a third-party site, which is provided only as an example.",
        "    var uri = 'https://jsonplaceholder.typicode.com/posts';",
        "",
        "    try {",
        "        var request = new frJava.Request();",
        "",
        "        // You can chain methods that return the request object.",
        "        request.setUri(uri)",
        "            .setMethod('POST')",
        "            .setEntity(JSON.stringify({",
        "                updatedFields: {",
        "                    key2: 'value2',",
        "                    key3: 'value3'",
        "                }",
        "            }));",
        "",
        "        // You can call a method when chaining is not possible.",
        "        request.getHeaders().add('Content-Type', 'application/json; charset=UTF-8');",
        "",
        "        // Sends the request and receives the response.",
        "        var response = httpClient.send(request).getOrThrow();",
        "",
        "        // Checks if the response status is as expected.",
        "        if (response.getStatus() === org.forgerock.http.protocol.Status.CREATED) {",
        "            var result = JSON.parse(response.getEntity().getString());",
        "",
        "            // Set multiple token fields at once.",
        "            accessToken.setFields(result.updatedFields);",
        "        } else {",
        "            logger.error('Unable to obtain access token modifications. Status: ' + response.getStatus() + '. Content: ' + response.getEntity().getString());",
        "        }",
        "    } catch (e) {",
        "        logger.error('The request processing was interrupted. ' + e);",
        "",
        "        // The access token request fails with the HTTP 500 error in this case.",
        "        throw ('Unable to obtain response from: ' + uri);",
        "    }",
        "",
        "    // Adds new fields containing identity attribute values to the access token.",
        "    accessToken.setField('mail', identity.getAttribute('mail'));",
        "    accessToken.setField('phone', identity.getAttribute('telephoneNumber').toArray()[0]);",
        "",
        "    // Adds new fields containing the session property values.",
        "    // NOTE: session may not be available for non-interactive authorization grants.",
        "    if (session) {",
        "        try {",
        "            accessToken.setField('ipAddress', session.getProperty('Host'));",
        "        } catch (e) {",
        "            logger.error('Unable to retrieve session property value. ' + e);",
        "        }",
        "    }",
        "",
        "    // Removes a native field from the token entry, that was set by AM.",
        "    // WARNING: removing native fields from the token may result in loss of functionality.",
        "    // accessToken.removeTokenName()",
        "",
        "    // No return value is expected. Let it be undefined.",
        "}());",
        "*/",
        "",
      ],
    },
    "3bd13a46-61c4-4974-8efb-1700c80c64e3": {
      "_id": "3bd13a46-61c4-4974-8efb-1700c80c64e3",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Inactive Device Match Script",
      "evaluatorVersion": "1.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Inactive Device Match Script",
      "script": [
        "/*",
        " * Inactive Device Match Script",
        " */",
        "",
        "outcome = "true";",
      ],
    },
    "3cb43516-ae69-433a-8787-501d45db14e9": {
      "_id": "3cb43516-ae69-433a-8787-501d45db14e9",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Display sharedState, transientState, and headers.",
      "evaluatorVersion": "1.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "debug",
      "script": [
        "/* debug",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Display sharedState, transientState, and headers.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " */",
        "var anchor = "anchor-".concat(generateNumericToken('xxx'));",
        "var halign = "left";",
        "var message = "<p><b>Shared State</b>:<br/>".concat(",
        "      sharedState.toString()).concat("</p>").concat(",
        "    "<p><b>Transient State</b>:<br/>").concat(",
        "      transientState.toString()).concat("</p>").concat(",
        "    "<p><b>Request Headers</b>:<br/>").concat(",
        "      requestHeaders.toString()).concat("</p>")",
        "var script = "Array.prototype.slice.call(\\n".concat(",
        "  "document.getElementsByClassName('callback-component')).forEach(\\n").concat(",
        "  "function (e) {\\n").concat(",
        "  "  var message = e.firstElementChild;\\n").concat(",
        "  "  if (message.firstChild && message.firstChild.nodeName == '#text' && message.firstChild.nodeValue.trim() == '").concat(anchor).concat("') {\\n").concat(",
        "  "    message.className = \\"text-left\\";\\n").concat(",
        "  "    message.align = \\"").concat(halign).concat("\\";\\n").concat(",
        "  "    message.innerHTML = '").concat(message).concat("';\\n").concat(",
        "  "  }\\n").concat(",
        "  "})")",
        "var fr = JavaImporter(",
        "    org.forgerock.openam.auth.node.api.Action,",
        "    javax.security.auth.callback.TextOutputCallback,",
        "    com.sun.identity.authentication.callbacks.ScriptTextOutputCallback",
        ")",
        "if (message.length && callbacks.isEmpty()) {",
        "    action = fr.Action.send(",
        "        new fr.TextOutputCallback(",
        "            fr.TextOutputCallback.INFORMATION,",
        "            anchor",
        "        ),",
        "        new fr.ScriptTextOutputCallback(script)",
        "    ).build()",
        "}",
        "else {",
        "  action = fr.Action.goTo("true").build();",
        "}",
        "",
        " /*",
        "  * Generate a token in the desired format. All 'x' characters will be replaced with a random number 0-9.",
        "  * ",
        "  * Example:",
        "  * 'xxxxx' produces '28535'",
        "  * 'xxx-xxx' produces '432-521'",
        "  */",
        "function generateNumericToken(format) {",
        "    return format.replace(/[x]/g, function(c) {",
        "        var r = Math.random()*10|0;",
        "        var v = r;",
        "        return v.toString(10);",
        "    });",
        "}",
      ],
    },
    "3d97c436-42c0-4dd0-a571-ea6f34f752b3": {
      "_id": "3d97c436-42c0-4dd0-a571-ea6f34f752b3",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Normalizes raw profile data from Itsme",
      "evaluatorVersion": "1.0",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Itsme Profile Normalization",
      "script": [
        "/*",
        " * Copyright 2020-2021 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "import org.forgerock.json.JsonValue",
        "",
        "JsonValue managedUser = json(object(",
        "        field("id", rawProfile.sub),",
        "        field("displayName", rawProfile.name),",
        "        field("givenName", rawProfile.given_name),",
        "        field("familyName", rawProfile.family_name),",
        "        field("username", rawProfile.email),",
        "        field("email", rawProfile.email)))",
        "return managedUser",
      ],
    },
    "3f93ef6e-e54a-4393-aba1-f322656db28a": {
      "_id": "3f93ef6e-e54a-4393-aba1-f322656db28a",
      "context": "OAUTH2_AUTHORIZE_ENDPOINT_DATA_PROVIDER",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Default global script for OAuth2 Authorize Endpoint Data Provider",
      "evaluatorVersion": "1.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "OAuth2 Authorize Endpoint Data Provider Script",
      "script": [
        "/*",
        " * Copyright 2021 ForgeRock AS. All Rights Reserved",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        " * This script lets you return additional data when authorize request is called.",
        " *",
        " * Defined variables:",
        " *",
        " * session - SSOToken (1)",
        " *           Present if the request contains the session cookie, the user's session object.",
        " *",
        " * httpClient - HTTP Client (2).",
        " *              Always present, the HTTP client that can be used to make external HTTP requests",
        " *",
        " * logger - Debug (3)",
        " *          Always present, the "ScriptedAuthorizeEndpointDataProvider" debug logger instance:",
        " *          https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.",
        " *          Corresponding log files will be prefixed with: scripts.OAUTH2_AUTHORIZE_ENDPOINT_DATA_PROVIDER.",
        " *",
        " * scriptName - String (primitive).",
        " *              Always present, the display name of the script",
        " *",
        " * Return - a Map<String, String> of additional data (4).",
        " *",
        " * Class reference:",
        " * (1) SSOToken - https://backstage.forgerock.com/docs/am/7/apidocs/com/iplanet/sso/SSOToken.html.",
        " * (2) Client - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/http/Client.html.",
        " * (3) Debug - https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.",
        " * (4) Map - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashMap.html.",
        " */",
        "",
        "/**",
        " * Default authorize endpoint data provider script to use as a template for new scripts.",
        " */",
        "",
        "/* EXAMPLE",
        "var map = new java.util.HashMap();",
        "",
        "function addAdditionalData() {",
        "",
        "    //If constant data needs to be returned",
        "    map.put("hello", "world");",
        "",
        "    //If some data needs to be returned from third party service",
        "    addAdditionalDataFromExternalService();",
        "",
        "    //If there is a need to return some user session data",
        "    addAdditionalDataFromSessionProperties()",
        "",
        "    return map;",
        "};",
        "",
        "function addAdditionalDataFromExternalService() {",
        "  var frJava = JavaImporter(",
        "        org.forgerock.oauth2.core.exceptions.ServerException",
        "    );",
        "  try {",
        "        //Obtain additional data by performing a REST call to an external service",
        "        var request = new org.forgerock.http.protocol.Request();",
        "        request.setUri("https://third.party.app/hello.jsp");",
        "        request.setMethod("POST");",
        "        //request.setEntity("foo=bar&hello=world");",
        "        request.setEntity(json(object(",
        "                    field("foo", "bar"))));",
        "        var response = httpClient.send(request).getOrThrow();",
        "        logResponse(response);",
        "        var result = JSON.parse(response.getEntity());",
        "        map.put("someKey",result.get("someKey"));",
        "  } catch (err) {",
        "     throw new frJava.ServerException(err);",
        "  }",
        "};",
        "",
        "function addAdditionalDataFromSessionProperties() {",
        "  //Add additional data from session property values",
        "   if (session != null) { // session is not available for resource owner password credentials grant",
        "     map.put("ipAddress", session.getProperty("Host"))",
        "   }",
        "};",
        "",
        "function logResponse(response) {",
        "    logger.message("User REST Call. Status: " + response.getStatus() + ", Body: " + response.getEntity());",
        "};",
        "",
        "addAdditionalData();",
        "*/",
      ],
    },
    "400e48ba-3f13-4144-ac7b-f824ea8e98c5": {
      "_id": "400e48ba-3f13-4144-ac7b-f824ea8e98c5",
      "context": "OAUTH2_SCRIPTED_JWT_ISSUER",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Default global script for scripted JWT Issuers",
      "evaluatorVersion": "1.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "OAuth2 JWT Issuer Script",
      "script": [
        "/*",
        " * Copyright 2022 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        " * This script lets you to derive the configuration for a dynamic JWT issuer from the issuer string.",
        " * A JWT issuer is made up of the following:",
        " *   - issuer - the identifier of the entity that issues JWTs",
        " *   - resource owner subject claim - the name of the claim in the JWT that identifies the resource owner",
        " *   - consented scope claim - the name of the claim in the JWT that represents scope that the resource owner",
        " *                             has already consented to externally",
        " *   - authorized subjects - the set of principal identifiers that are authorized to be used as resource owners",
        " *                           by the issuer",
        " *   - JWKs - either a set of JWKs or connection details for obtaining that set, that are the public keys that",
        " *            can verify the signature on the issued JWTs.",
        " *",
        " * Defined variables:",
        " * issuer - String",
        " *          The issuer from the bearer JWT.",
        " * realm - String",
        " *         The path of the realm that is handling the request.",
        " * scriptName - String.",
        " *              Always present, the display name of the script.",
        " * logger - Always present, the script debug logger instance:",
        " *          https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.",
        " *          Corresponding log files will be prefixed with: scripts.OAUTH2_SCRIPTED_JWT_ISSUER.",
        " * httpClient - HTTP Client (1).",
        " *              Always present, the HTTP Client instance:",
        " *              https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-http-client.html#scripting-api-global-http-client.",
        " * idRepository - Identity Repository (2). Always present.",
        " * secrets - Secrets accessor (3). Always present.",
        " *",
        " * Return - org.forgerock.oauth2.core.TrustedJwtIssuerConfig (4) - the configuration of the trusted JWT issuer.",
        " *",
        " * Class reference:",
        " * (1) Client - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/http/Client.html.",
        " * (2) ScriptedIdentityRepository - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openam/scripting/api/identity/ScriptedIdentityRepository.html.",
        " * (3) ScriptedSecrets - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openam/scripting/api/secrets/ScriptedSecrets.html.",
        " * (4) TrustedJwtIssuerConfig - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/oauth2/core/TrustedJwtIssuerConfig.html.",
        " */",
        "",
        "/* EXAMPLE",
        "(function () {",
        "    var frJava = JavaImporter(",
        "        org.forgerock.oauth2.core.TrustedJwtIssuerConfig,",
        "        java.util.Collections",
        "    );",
        "",
        "    var iss = idRepository.getIdentity(issuer);",
        "    if (iss == null) {",
        "        logger.message('No issuer found for: '+issuer);",
        "        return null;",
        "    }",
        "    logger.message('Found issuer: '+iss);",
        "    // in this example either a JWK set or a URI to a JWK set are in the postalAddress attribute",
        "    var jwksAttrs = iss.getAttributeValues('postalAddress');",
        "    var jwkSet = jwksAttrs.length === 0 ? null : jwksAttrs[0];",
        "    var config = new frJava.TrustedJwtIssuerConfig(",
        "        issuer,",
        "        'sub',",
        "        'scope',",
        "        // in this example, valid subjects are stored in the mail attribute",
        "        iss.getAttributeValues('mail'),",
        "        jwkSet.startsWith('{') ? jwkSet : null,",
        "        jwkSet.startsWith('http') ? jwkSet : null,",
        "        '5 minutes',",
        "        '1 minute'",
        "    );",
        "    return config;",
        "}());",
        "*/",
      ],
    },
    "403cf226-6051-4368-8b72-9ba14f9a5140": {
      "_id": "403cf226-6051-4368-8b72-9ba14f9a5140",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Normalizes raw profile data from VKontakte",
      "evaluatorVersion": "1.0",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "VKontakte Profile Normalization",
      "script": [
        "/*",
        " * Copyright 2020 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "return json(object(",
        "        field("id", rawProfile.id),",
        "        field("displayName", rawProfile.first_name),",
        "        field("givenName", rawProfile.first_name),",
        "        field("familyName", rawProfile.last_name),",
        "        field("photoUrl", rawProfile.photo_50),",
        "        field("email", rawProfile.email),",
        "        field("username", rawProfile.email)))",
      ],
    },
    "41c24257-d7fc-4654-8b46-c2666dc5b56d": {
      "_id": "41c24257-d7fc-4654-8b46-c2666dc5b56d",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "set per level shared state variable",
      "evaluatorVersion": "1.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "level",
      "script": [
        "(function () {",
        "  outcome = 'true';",
        "  var level = nodeState.get('level').asInteger();",
        "  sharedState.put('level' + level + 'Value', 'Level ' + level + ': This is a longer string value set at each level of the nested journeys. It contains an indicator in which level it was set.');",
        "}());",
      ],
    },
    "424da748-82cc-4b54-be6f-82bd64d82a74": {
      "_id": "424da748-82cc-4b54-be6f-82bd64d82a74",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Normalizes raw profile data from Yahoo",
      "evaluatorVersion": "1.0",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Yahoo Profile Normalization",
      "script": [
        "/*",
        " * Copyright 2020 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "return json(object(",
        "        field("id", rawProfile.sub),",
        "        field("displayName", rawProfile.name),",
        "        field("givenName", rawProfile.given_name),",
        "        field("familyName", rawProfile.family_name),",
        "        field("photoUrl", rawProfile.picture),",
        "        field("email", rawProfile.email),",
        "        field("username", rawProfile.email),",
        "        field("locale", rawProfile.locale)))",
      ],
    },
    "472534ec-a25f-468d-a606-3fb1935190df": {
      "_id": "472534ec-a25f-468d-a606-3fb1935190df",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Normalizes raw profile data from WeChat",
      "evaluatorVersion": "1.0",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "WeChat Profile Normalization",
      "script": [
        "/*",
        " * Copyright 2020 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "return json(object(",
        "        field("id", rawProfile.openid),",
        "        field("displayName", rawProfile.nickname),",
        "        field("photoUrl", rawProfile.headimgurl),",
        "        field("username", rawProfile.nickname)))",
      ],
    },
    "484e6246-dbc6-4288-97e6-54e55431402e": {
      "_id": "484e6246-dbc6-4288-97e6-54e55431402e",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Normalizes raw profile data from Apple",
      "evaluatorVersion": "1.0",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Apple Profile Normalization",
      "script": [
        "/*",
        " * Copyright 2021-2022 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " *",
        " * In some common default configurations, the following keys are required to be not empty:",
        " * username, givenName, familyName, email.",
        " *",
        " * From RFC4517: A value of the Directory String syntax is a string of one or more",
        " * arbitrary characters from the Universal Character Set (UCS).",
        " * A zero-length character string is not permitted.",
        " */",
        "",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "String email = "change@me.com"",
        "String subjectId = rawProfile.sub",
        "String firstName = " "",
        "String lastName = " "",
        "String username = subjectId",
        "String name",
        "",
        "if (rawProfile.isDefined("email") && rawProfile.email.isNotNull()){ // User can elect to not share their email",
        "    email = rawProfile.email.asString()",
        "    username = email",
        "}",
        "if (rawProfile.isDefined("name") && rawProfile.name.isNotNull()) {",
        "    if (rawProfile.name.isDefined("firstName") && rawProfile.name.firstName.isNotNull()) {",
        "        firstName = rawProfile.name.firstName.asString()",
        "    }",
        "    if (rawProfile.name.isDefined("lastName") && rawProfile.name.lastName.isNotNull()) {",
        "        lastName = rawProfile.name.lastName.asString()",
        "    }",
        "}",
        "",
        "name = (firstName?.trim() ? firstName : "") + (lastName?.trim() ? ((firstName?.trim() ? " " : "") + lastName) : "")",
        "name =  (!name?.trim()) ? " " : name",
        "",
        "return json(object(",
        "        field("id", subjectId),",
        "        field("displayName", name),",
        "        field("email", email),",
        "        field("givenName", firstName),",
        "        field("familyName", lastName),",
        "        field("username", username)))",
      ],
    },
    "4a171d3a-056b-4ab7-a19f-d7e93ddf7ae5": {
      "_id": "4a171d3a-056b-4ab7-a19f-d7e93ddf7ae5",
      "context": "SAML2_NAMEID_MAPPER",
      "createdBy": "id=dsameuser,ou=user,dc=openam,dc=forgerock,dc=org",
      "creationDate": 1433147666269,
      "default": true,
      "description": "Default global script for SAML2 NameID Mapper",
      "evaluatorVersion": "2.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "id=dsameuser,ou=user,dc=openam,dc=forgerock,dc=org",
      "lastModifiedDate": 1433147666269,
      "name": "SAML2 NameID Mapper Script",
      "script": [
        "/*",
        " * Copyright 2024 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        " * This is an example SAML2 NameID Mapper script.",
        " * This script should return a string value representing the SAML2 NameID identifier.",
        " * The example script delegates to the configured java plugin via the nameIDScriptHelper binding.",
        " */",
        "nameIDScriptHelper.getNameIDValue();",
      ],
    },
    "4c963bb3-7084-43d0-bcdc-a47482cf1825": {
      "_id": "4c963bb3-7084-43d0-bcdc-a47482cf1825",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Dummy",
      "evaluatorVersion": "2.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Dummy",
      "script": [
        "",
        "outcome = "true";",
        "",
      ],
    },
    "4e053815-adde-46ac-9fe2-d3ae93517c14": {
      "_id": "4e053815-adde-46ac-9fe2-d3ae93517c14",
      "context": "LIBRARY",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "evaluatorVersion": "2.0",
      "exports": [],
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "My Other Example Library Script",
      "script": [
        "console.log("hi there");",
      ],
    },
    "58c824ae-84ed-4724-82cd-db128fc3f6c": {
      "_id": "58c824ae-84ed-4724-82cd-db128fc3f6c",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Converts a normalized social profile into a managed user",
      "evaluatorVersion": "1.0",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Normalized Profile to Managed User",
      "script": [
        ""/*\\n * Copyright 2020 ForgeRock AS. All Rights Reserved\\n *\\n * Use of this code requires a commercial software license with ForgeRock AS.\\n * or with one of its affiliates. All use shall be exclusively subject\\n * to such license between the licensee and ForgeRock AS.\\n */\\n\\nimport static org.forgerock.json.JsonValue.field\\nimport static org.forgerock.json.JsonValue.json\\nimport static org.forgerock.json.JsonValue.object\\n\\nimport org.forgerock.json.JsonValue\\n\\nJsonValue managedUser = json(object(\\n        field(\\"givenName\\", normalizedProfile.givenName),\\n        field(\\"sn\\", normalizedProfile.familyName),\\n        field(\\"mail\\", normalizedProfile.email),\\n        field(\\"userName\\", normalizedProfile.username)))\\n\\nif (normalizedProfile.postalAddress.isNotNull()) managedUser.put(\\"postalAddress\\", normalizedProfile.postalAddress)\\nif (normalizedProfile.addressLocality.isNotNull()) managedUser.put(\\"city\\", normalizedProfile.addressLocality)\\nif (normalizedProfile.addressRegion.isNotNull()) managedUser.put(\\"stateProvince\\", normalizedProfile.addressRegion)\\nif (normalizedProfile.postalCode.isNotNull()) managedUser.put(\\"postalCode\\", normalizedProfile.postalCode)\\nif (normalizedProfile.country.isNotNull()) managedUser.put(\\"country\\", normalizedProfile.country)\\nif (normalizedProfile.phone.isNotNull()) managedUser.put(\\"telephoneNumber\\", normalizedProfile.phone)\\n\\n// if the givenName and familyName is null or empty\\n// then add a boolean flag to the shared state to indicate names are not present\\n// this could be used elsewhere\\n// for eg. this could be used in a scripted decision node to by-pass patching\\n// the user object with blank values when givenName  and familyName is not present\\nboolean noGivenName = normalizedProfile.givenName.isNull() || (!normalizedProfile.givenName.asString()?.trim())\\nboolean noFamilyName = normalizedProfile.familyName.isNull() || (!normalizedProfile.familyName.asString()?.trim())\\nsharedState.put(\\"nameEmptyOrNull\\", noGivenName && noFamilyName)\\n\\nreturn managedUser\\n"",
      ],
    },
    "58d29080-4563-480b-89bb-1e7719776a21": {
      "_id": "58d29080-4563-480b-89bb-1e7719776a21",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Normalizes raw profile data from Google",
      "evaluatorVersion": "1.0",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Google Profile Normalization",
      "script": [
        "/*",
        " * Copyright 2020 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "return json(object(",
        "        field("id", rawProfile.sub),",
        "        field("displayName", rawProfile.name),",
        "        field("givenName", rawProfile.given_name),",
        "        field("familyName", rawProfile.family_name),",
        "        field("photoUrl", rawProfile.picture),",
        "        field("email", rawProfile.email),",
        "        field("username", rawProfile.email),",
        "        field("locale", rawProfile.locale)))",
      ],
    },
    "5bbdaeff-ddee-44b9-b608-8d413d7d65a6": {
      "_id": "5bbdaeff-ddee-44b9-b608-8d413d7d65a6",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Check if mode has already been set.",
      "evaluatorVersion": "1.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "mode",
      "script": [
        "/* mode",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Collect mode if not already set and set outcome to mode.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - 'shared and level'",
        " * - 'shared only'",
        " * - 'level only'",
        " * - 'none'",
        " */",
        "(function () {",
        "  var mode = nodeState.get('mode');",
        "  if (mode) {",
        "    outcome = mode.asString();",
        "    var level = nodeState.get('level').asInteger() + 1;",
        "    logger.error('mode: mode=' + mode.asString() + ', level=' + level);",
        "    sharedState.put('level', level);",
        "  }",
        "  else {",
        "    var choices = ['shared and level', 'shared only', 'level only', 'none'];",
        "  ",
        "    var fr = JavaImporter(",
        "      org.forgerock.openam.auth.node.api.Action,",
        "      javax.security.auth.callback.ChoiceCallback",
        "    )",
        "",
        "    if (callbacks.isEmpty()) {",
        "      action = fr.Action.send([",
        "        new fr.ChoiceCallback('Choose test mode', choices, 0, false)",
        "      ]).build();",
        "    } else {",
        "      var choice = parseInt(callbacks.get(0).getSelectedIndexes()[0]);",
        "      nodeState.putShared('mode', choices[choice]);",
        "      nodeState.putShared('level', 0);",
        "      action = fr.Action.goTo(choices[choice]).build();",
        "    }",
        "  }",
        "}());",
      ],
    },
    "5ce0d38a-154c-4be5-bd22-f9879c77e895": {
      "_id": "5ce0d38a-154c-4be5-bd22-f9879c77e895",
      "context": "SAML2_SP_ADAPTER",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "evaluatorVersion": "1.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "FrodoSPAdapter - imported (1)",
      "script": [
        "/*",
        " * Copyright 2023 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        " * The script has these top level functions that could be executed during a SAML2 flow.",
        " *      - preSingleSignOnRequest",
        " *      - preSingleSignOnProcess",
        " *      - postSingleSignOnSuccess",
        " *      - postSingleSignOnFailure",
        " *      - postNewNameIDSuccess",
        " *      - postTerminateNameIDSuccess",
        " *      - preSingleLogoutProcess",
        " *      - postSingleLogoutSuccess",
        " *",
        " * Please see the JavaDoc for the interface for more information about these methods.",
        " * https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/org/forgerock/openam/saml2/plugins/SPAdapter.html",
        " * Note that the initialize method is not supported in the scripts.",
        " *",
        " * Defined variables. Check the documentation on the respective functions for the variables available to it.",
        " *",
        " * hostedEntityId - String",
        " *     Entity ID for the hosted IDP",
        " * realm - String",
        " *     Realm of the hosted IDP",
        " * idpEntityId - String",
        " *     The entity ID for the Identity Provider for which the sign-on request will be sent.",
        " * request - HttpServletRequest (1)",
        " *     Servlet request object",
        " * response - HttpServletResponse (2)",
        " *     Servlet response object",
        " * authnRequest - AuthnRequest (3)",
        " *     The authentication request sent that is sent from the Service Provider.",
        " * session - SSOToken (4)",
        " *     The single sign-on session. The reference type of this is Object and would need to be casted to SSOToken.",
        " * res - Response (5)",
        " *     The SSO Response received from the Identity Provider.",
        " * profile - String",
        " *     The protocol profile that is used, this will be one of the following values from SAML2Constants (6):",
        " *          - SAML2Constants.HTTP_POST",
        " *          - SAML2Constants.HTTP_ARTIFACT",
        " *          - SAML2Constants.PAOS",
        " * out - PrintWriter (7)",
        " *     The PrintWriter that can be used to write to.",
        " * isFederation - boolean",
        " *     Set to true if using federation, otherwise false.",
        " * failureCode - int",
        " *     An integer holding the failure code when an error has occurred. For potential values see SPAdapter.",
        " * userId - String",
        " *     The unique universal ID of the user with whom the new name identifier request was performed.",
        " * idRequest - ManageNameIDRequest (8)",
        " *     The new name identifier request, this will be null if the request object is not available",
        " * idResponse - ManageNameIDResponse (9)",
        " *     The new name identifier response, this will be null if the response object is not available",
        " * binding - String",
        " *     The binding used for the new name identifier request. This will be one of the following values:",
        " *          - SAML2Constants.SOAP",
        " *          - SAML2Constants.HTTP_REDIRECT",
        " * logoutRequest - LogoutRequest (10)",
        " *     The single logout request.",
        " * logoutResponse - LogoutResponse (11)",
        " *     The single logout response.",
        " * spAdapterScriptHelper - SpAdapterScriptHelper (12)",
        " *     An instance of SpAdapterScriptHelper containing helper methods. See Javadoc for more details.",
        " * logger - Logger instance",
        " *     https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.",
        " *     Corresponding log files will be prefixed with: scripts.<script name>",
        " *",
        " * Throws SAML2Exception (13):",
        " *     for any exceptions occurring in the adapter. The federation process will continue",
        " *",
        " * Class reference:",
        " * (1) HttpServletRequest - https://tomcat.apache.org/tomcat-7.0-doc/servletapi/javax/servlet/http/HttpServletRequest.html.",
        " * (2) HttpServletResponse - https://tomcat.apache.org/tomcat-7.0-doc/servletapi/javax/servlet/http/HttpServletResponse.html.",
        " * (3) AuthnRequest - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/protocol/AuthnRequest.html.",
        " * (4) SSOToken - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/iplanet/sso/SSOToken.html.",
        " * (5) Response - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/protocol/Response.html",
        " * (6) SAML2Constants - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/common/SAML2Constants.html",
        " * (7) PrintWriter - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/PrintWriter.html",
        " * (8) ManageNameIDRequest - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/protocol/ManageNameIDRequest.html",
        " * (9) ManageNameIDResponse - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/protocol/ManageNameIDResponse.html",
        " * (10) LogoutRequest - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/protocol/LogoutRequest.html",
        " * (11) LogoutResponse - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/protocol/LogoutResponse.html",
        " * (12) SpAdapterScriptHelper - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/plugins/scripted/SpAdapterScriptHelper.html.",
        " * (13) SAML2Exception - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/common/SAML2Exception.html.",
        " */",
        "",
        "/*",
        " * Template/default script for SAML2 SP Adapter scripted plugin.",
        " */",
        "",
        "/*",
        " * Available variables for preSingleSignOnRequest:",
        " *     hostedEntityId",
        " *     idpEntityId",
        " *     realm",
        " *     request",
        " *     response",
        " *     authnRequest",
        " *     spAdapterScriptHelper",
        " *     logger",
        " */",
        "function preSingleSignOnRequest() {",
        "}",
        "",
        "/*",
        " * Available variables for preSingleSignOnProcess:",
        " *     hostedEntityId",
        " *     realm",
        " *     request",
        " *     response",
        " *     authnRequest",
        " *     res",
        " *     profile",
        " *     spAdapterScriptHelper",
        " *     logger",
        " */",
        "function preSingleSignOnProcess() {",
        "}",
        "",
        "/*",
        " * Available variables for postSingleSignOnSuccess:",
        " *     hostedEntityId",
        " *     realm",
        " *     request",
        " *     response",
        " *     out",
        " *     session",
        " *     authnRequest",
        " *     res",
        " *     profile",
        " *     isFederation",
        " *     spAdapterScriptHelper",
        " *     logger",
        " *",
        " * Return - true if response is being redirected, false if not. Default to false.",
        " */",
        "function postSingleSignOnSuccess() {",
        "    return false;",
        "}",
        "",
        "/*",
        " * Available variables for postSingleSignOnFailure:",
        " *     hostedEntityId",
        " *     realm",
        " *     request",
        " *     response",
        " *     authnRequest",
        " *     res",
        " *     profile",
        " *     failureCode",
        " *     spAdapterScriptHelper",
        " *     logger",
        " *",
        " * Return - true if response is being redirected, false if not. Default to false.",
        " */",
        "function postSingleSignOnFailure() {",
        "    return false;",
        "}",
        "",
        "/*",
        " * Available variables for postNewNameIDSuccess:",
        " *     hostedEntityId",
        " *     realm",
        " *     request",
        " *     response",
        " *     userId",
        " *     idRequest",
        " *     idResponse",
        " *     binding",
        " *     spAdapterScriptHelper",
        " *     logger",
        " */",
        "function postNewNameIDSuccess() {",
        "}",
        "",
        "/*",
        " * Available variables for postTerminateNameIDSuccess:",
        " *     hostedEntityId",
        " *     realm",
        " *     request",
        " *     response",
        " *     userId",
        " *     idRequest",
        " *     idResponse",
        " *     binding",
        " *     spAdapterScriptHelper",
        " *     logger",
        " */",
        "function postTerminateNameIDSuccess() {",
        "}",
        "",
        "/*",
        " * Available variables for preSingleLogoutProcess:",
        " *     hostedEntityId",
        " *     realm",
        " *     request",
        " *     response",
        " *     userId",
        " *     logoutRequest",
        " *     logoutResponse",
        " *     binding",
        " *     spAdapterScriptHelper",
        " *     logger",
        " */",
        "function preSingleLogoutProcess() {",
        "}",
        "",
        "/*",
        " * Available variables for postSingleLogoutSuccess:",
        " *     hostedEntityId",
        " *     realm",
        " *     request",
        " *     response",
        " *     userId",
        " *     logoutRequest",
        " *     logoutResponse",
        " *     binding",
        " *     spAdapterScriptHelper",
        " *     logger",
        " */",
        "function postSingleLogoutSuccess() {",
        "}",
      ],
    },
    "5e854779-6ec1-4c39-aeba-0477e0986646": {
      "_id": "5e854779-6ec1-4c39-aeba-0477e0986646",
      "context": "CONFIG_PROVIDER_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Script to provide values for a config provider node",
      "evaluatorVersion": "1.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Config Provider Node Script",
      "script": [
        "/*",
        " * Copyright 2021-2022 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/**",
        " * The following script is a simplified template for understanding how to build",
        " * up a config Map object with custom values. The Config Provider Node will then",
        " * provide this config Map to the desired node type. It is important that the Map",
        " * you build here is named 'config'.",
        " *",
        " * Defined variables:",
        " *",
        " * nodeState - Node State (1)",
        " *           Always present, this represents the current values stored in the node state.",
        " *",
        " * idRepository - Profile Data (2)",
        " *           Always present, a repository to retrieve user information.",
        " *",
        " * secrets - Credentials and Secrets (3)",
        " *           Always present, an interface to access the Secrets API from a scripting context.",
        " *",
        " * requestHeaders (4) - Map (5)",
        " *           Always present, an object that provides methods for accessing headers in the login request.",
        " *",
        " * logger - Debug Logging (6)",
        " *          Always present, the debug logger instance.",
        " *",
        " * httpClient - HTTP Client (7)",
        " *          Always present, the HTTP client that can be used to make external HTTP requests.",
        " *",
        " * realm - String (primitive).",
        " *          Always present, the name of the realm the user is authenticating to.",
        " *",
        " * existingSession - Map<String, String> (5)",
        " *          Present if the request contains the session cookie, the user's session object. The returned map from",
        " *          SSOToken.getProperties() (8)",
        " *",
        " * requestParameters - Map (5)",
        " *          Always present, the object that contains the authentication request parameters.",
        " *",
        " *",
        " * Outputs:",
        " *",
        " * config - Map (5)",
        " *           Define and fill a Map object named 'config' with custom values, this will define the configuration for the",
        " *           associated node selected in the ConfigProviderNode.",
        " *",
        " * Reference:",
        " * (1) Node State - https://backstage.forgerock.com/docs/idcloud-am/latest/authentication-guide/scripting-api-node.html#scripting-api-node-nodeState",
        " * (2) Profile Data - https://backstage.forgerock.com/docs/am/7.1/authentication-guide/scripting-api-node.html#scripting-api-node-id-repo",
        " * (3) Credentials and Secrets - https://backstage.forgerock.com/docs/am/7.1/authentication-guide/scripting-api-node.html#scripting-api-authn-secrets",
        " * (4) Request Headers - https://backstage.forgerock.com/docs/am/7/authentication-guide/scripting-api-node.html#scripting-api-node-requestHeaders.",
        " * (5) Map - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html",
        " * (6) Debug Logging - https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.",
        " * (7) HTTP Client - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/http/Client.html.",
        " * (8) SSOToken - https://backstage.forgerock.com/docs/am/7/apidocs/com/iplanet/sso/SSOToken.html.",
        " */",
        "",
        "config = {",
        "    "key0": {"subKey": "value0"},",
        "    "key1": "value1"",
        "};",
      ],
    },
    "6002c349-f1d0-4317-baa2-a18590fc3cff": {
      "_id": "6002c349-f1d0-4317-baa2-a18590fc3cff",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Normalizes raw profile data from GitHub",
      "evaluatorVersion": "1.0",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Okta Profile Normalization - imported (1)",
      "script": [
        "/*",
        " * Copyright 2022 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "logger.warning("Okta rawProfile: "+rawProfile)",
        "",
        "return json(object(",
        "        field("id", rawProfile.id),",
        "        field("displayName", rawProfile.name),",
        "        field("givenName", rawProfile.first_name),",
        "        field("familyName", rawProfile.last_name),",
        "        field("photoUrl", rawProfile.picture.data.url),",
        "        field("email", rawProfile.email),",
        "        field("username", rawProfile.preferred_username)))",
      ],
    },
    "60609c1a-4cef-4729-a417-354aafdebf3f": {
      "_id": "60609c1a-4cef-4729-a417-354aafdebf3f",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "id=dsameuser,ou=user,dc=openam,dc=forgerock,dc=org",
      "creationDate": 1433147666269,
      "default": true,
      "description": "Normalizes raw profile data from LINE",
      "evaluatorVersion": "1.0",
      "language": "GROOVY",
      "lastModifiedBy": "id=dsameuser,ou=user,dc=openam,dc=forgerock,dc=org",
      "lastModifiedDate": 1433147666269,
      "name": "LINE Profile Normalization",
      "script": [
        "/*",
        " * Copyright 2024 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "// LINE does not return the email from the userInfo endpoint but should return it from the token endpoint and therefore",
        "// it should be set in the shared state",
        "var email = "change@me.com"",
        "var subjectId = rawProfile.sub",
        "var username = subjectId",
        "var firstName = " "",
        "var lastName = " "",
        "",
        "if (sharedState.get("claims_set") != null && sharedState.get("claims_set").email != null) {",
        "    email = sharedState.get("claims_set").email",
        "    username = email",
        "}",
        "",
        "if (rawProfile.isDefined("name") && rawProfile.name.isNotNull()) {",
        "    var splitName = rawProfile.name.asString().split(" ")",
        "    firstName = splitName[0]",
        "    lastName = splitName[-1]",
        "}",
        "",
        "return json(object(",
        "        field("id", rawProfile.sub),",
        "        field("displayName", rawProfile.name),",
        "        field("photoUrl", rawProfile.picture),",
        "        field("email", email),",
        "        field("givenName", firstName),",
        "        field("familyName", lastName),",
        "        field("username", username)))",
      ],
    },
    "6325cf19-a49b-471e-8d26-7e4df76df0e2": {
      "_id": "6325cf19-a49b-471e-8d26-7e4df76df0e2",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Normalizes raw profile data from GitHub",
      "evaluatorVersion": "1.0",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Okta Profile Normalization",
      "script": [
        "/*",
        " * Copyright 2022 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "logger.warning("Okta rawProfile: "+rawProfile)",
        "",
        "return json(object(",
        "        field("id", rawProfile.id),",
        "        field("displayName", rawProfile.name),",
        "        field("givenName", rawProfile.first_name),",
        "        field("familyName", rawProfile.last_name),",
        "        field("photoUrl", rawProfile.picture.data.url),",
        "        field("email", rawProfile.email),",
        "        field("username", rawProfile.preferred_username)))",
      ],
    },
    "647f2a33-9211-4315-a83f-a521d8b77d7b": {
      "_id": "647f2a33-9211-4315-a83f-a521d8b77d7b",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Normalizes raw profile data from GitHub",
      "evaluatorVersion": "1.0",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Okta Profile Normalization - imported (2)",
      "script": [
        "/*",
        " * Copyright 2022 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "logger.warning("Okta rawProfile: "+rawProfile)",
        "",
        "return json(object(",
        "        field("id", rawProfile.id),",
        "        field("displayName", rawProfile.name),",
        "        field("givenName", rawProfile.first_name),",
        "        field("familyName", rawProfile.last_name),",
        "        field("photoUrl", rawProfile.picture.data.url),",
        "        field("email", rawProfile.email),",
        "        field("username", rawProfile.preferred_username)))",
      ],
    },
    "69f06e63-128c-4e2f-af52-079a8a6f448b": {
      "_id": "69f06e63-128c-4e2f-af52-079a8a6f448b",
      "context": "SAML2_SP_ADAPTER",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Default global script for SAML2 SP Adapter",
      "evaluatorVersion": "1.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "SAML2 SP Adapter Script",
      "script": [
        "/*",
        " * Copyright 2023 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        " * The script has these top level functions that could be executed during a SAML2 flow.",
        " *      - preSingleSignOnRequest",
        " *      - preSingleSignOnProcess",
        " *      - postSingleSignOnSuccess",
        " *      - postSingleSignOnFailure",
        " *      - postNewNameIDSuccess",
        " *      - postTerminateNameIDSuccess",
        " *      - preSingleLogoutProcess",
        " *      - postSingleLogoutSuccess",
        " *",
        " * Please see the JavaDoc for the interface for more information about these methods.",
        " * https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/org/forgerock/openam/saml2/plugins/SPAdapter.html",
        " * Note that the initialize method is not supported in the scripts.",
        " *",
        " * Defined variables. Check the documentation on the respective functions for the variables available to it.",
        " *",
        " * hostedEntityId - String",
        " *     Entity ID for the hosted IDP",
        " * realm - String",
        " *     Realm of the hosted IDP",
        " * idpEntityId - String",
        " *     The entity ID for the Identity Provider for which the sign-on request will be sent.",
        " * request - HttpServletRequest (1)",
        " *     Servlet request object",
        " * response - HttpServletResponse (2)",
        " *     Servlet response object",
        " * authnRequest - AuthnRequest (3)",
        " *     The authentication request sent that is sent from the Service Provider.",
        " * session - SSOToken (4)",
        " *     The single sign-on session. The reference type of this is Object and would need to be casted to SSOToken.",
        " * res - Response (5)",
        " *     The SSO Response received from the Identity Provider.",
        " * profile - String",
        " *     The protocol profile that is used, this will be one of the following values from SAML2Constants (6):",
        " *          - SAML2Constants.HTTP_POST",
        " *          - SAML2Constants.HTTP_ARTIFACT",
        " *          - SAML2Constants.PAOS",
        " * out - PrintWriter (7)",
        " *     The PrintWriter that can be used to write to.",
        " * isFederation - boolean",
        " *     Set to true if using federation, otherwise false.",
        " * failureCode - int",
        " *     An integer holding the failure code when an error has occurred. For potential values see SPAdapter.",
        " * userId - String",
        " *     The unique universal ID of the user with whom the new name identifier request was performed.",
        " * idRequest - ManageNameIDRequest (8)",
        " *     The new name identifier request, this will be null if the request object is not available",
        " * idResponse - ManageNameIDResponse (9)",
        " *     The new name identifier response, this will be null if the response object is not available",
        " * binding - String",
        " *     The binding used for the new name identifier request. This will be one of the following values:",
        " *          - SAML2Constants.SOAP",
        " *          - SAML2Constants.HTTP_REDIRECT",
        " * logoutRequest - LogoutRequest (10)",
        " *     The single logout request.",
        " * logoutResponse - LogoutResponse (11)",
        " *     The single logout response.",
        " * spAdapterScriptHelper - SpAdapterScriptHelper (12)",
        " *     An instance of SpAdapterScriptHelper containing helper methods. See Javadoc for more details.",
        " * logger - Logger instance",
        " *     https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.",
        " *     Corresponding log files will be prefixed with: scripts.<script name>",
        " *",
        " * Throws SAML2Exception (13):",
        " *     for any exceptions occurring in the adapter. The federation process will continue",
        " *",
        " * Class reference:",
        " * (1) HttpServletRequest - https://tomcat.apache.org/tomcat-7.0-doc/servletapi/javax/servlet/http/HttpServletRequest.html.",
        " * (2) HttpServletResponse - https://tomcat.apache.org/tomcat-7.0-doc/servletapi/javax/servlet/http/HttpServletResponse.html.",
        " * (3) AuthnRequest - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/protocol/AuthnRequest.html.",
        " * (4) SSOToken - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/iplanet/sso/SSOToken.html.",
        " * (5) Response - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/protocol/Response.html",
        " * (6) SAML2Constants - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/common/SAML2Constants.html",
        " * (7) PrintWriter - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/PrintWriter.html",
        " * (8) ManageNameIDRequest - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/protocol/ManageNameIDRequest.html",
        " * (9) ManageNameIDResponse - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/protocol/ManageNameIDResponse.html",
        " * (10) LogoutRequest - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/protocol/LogoutRequest.html",
        " * (11) LogoutResponse - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/protocol/LogoutResponse.html",
        " * (12) SpAdapterScriptHelper - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/plugins/scripted/SpAdapterScriptHelper.html.",
        " * (13) SAML2Exception - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/common/SAML2Exception.html.",
        " */",
        "",
        "/*",
        " * Template/default script for SAML2 SP Adapter scripted plugin.",
        " */",
        "",
        "/*",
        " * Available variables for preSingleSignOnRequest:",
        " *     hostedEntityId",
        " *     idpEntityId",
        " *     realm",
        " *     request",
        " *     response",
        " *     authnRequest",
        " *     spAdapterScriptHelper",
        " *     logger",
        " */",
        "function preSingleSignOnRequest() {",
        "}",
        "",
        "/*",
        " * Available variables for preSingleSignOnProcess:",
        " *     hostedEntityId",
        " *     realm",
        " *     request",
        " *     response",
        " *     authnRequest",
        " *     res",
        " *     profile",
        " *     spAdapterScriptHelper",
        " *     logger",
        " */",
        "function preSingleSignOnProcess() {",
        "}",
        "",
        "/*",
        " * Available variables for postSingleSignOnSuccess:",
        " *     hostedEntityId",
        " *     realm",
        " *     request",
        " *     response",
        " *     out",
        " *     session",
        " *     authnRequest",
        " *     res",
        " *     profile",
        " *     isFederation",
        " *     spAdapterScriptHelper",
        " *     logger",
        " *",
        " * Return - true if response is being redirected, false if not. Default to false.",
        " */",
        "function postSingleSignOnSuccess() {",
        "    return false;",
        "}",
        "",
        "/*",
        " * Available variables for postSingleSignOnFailure:",
        " *     hostedEntityId",
        " *     realm",
        " *     request",
        " *     response",
        " *     authnRequest",
        " *     res",
        " *     profile",
        " *     failureCode",
        " *     spAdapterScriptHelper",
        " *     logger",
        " *",
        " * Return - true if response is being redirected, false if not. Default to false.",
        " */",
        "function postSingleSignOnFailure() {",
        "    return false;",
        "}",
        "",
        "/*",
        " * Available variables for postNewNameIDSuccess:",
        " *     hostedEntityId",
        " *     realm",
        " *     request",
        " *     response",
        " *     userId",
        " *     idRequest",
        " *     idResponse",
        " *     binding",
        " *     spAdapterScriptHelper",
        " *     logger",
        " */",
        "function postNewNameIDSuccess() {",
        "}",
        "",
        "/*",
        " * Available variables for postTerminateNameIDSuccess:",
        " *     hostedEntityId",
        " *     realm",
        " *     request",
        " *     response",
        " *     userId",
        " *     idRequest",
        " *     idResponse",
        " *     binding",
        " *     spAdapterScriptHelper",
        " *     logger",
        " */",
        "function postTerminateNameIDSuccess() {",
        "}",
        "",
        "/*",
        " * Available variables for preSingleLogoutProcess:",
        " *     hostedEntityId",
        " *     realm",
        " *     request",
        " *     response",
        " *     userId",
        " *     logoutRequest",
        " *     logoutResponse",
        " *     binding",
        " *     spAdapterScriptHelper",
        " *     logger",
        " */",
        "function preSingleLogoutProcess() {",
        "}",
        "",
        "/*",
        " * Available variables for postSingleLogoutSuccess:",
        " *     hostedEntityId",
        " *     realm",
        " *     request",
        " *     response",
        " *     userId",
        " *     logoutRequest",
        " *     logoutResponse",
        " *     binding",
        " *     spAdapterScriptHelper",
        " *     logger",
        " */",
        "function postSingleLogoutSuccess() {",
        "}",
      ],
    },
    "6b3cfd48-62d3-48ff-a96f-fe8f3a22ab30": {
      "_id": "6b3cfd48-62d3-48ff-a96f-fe8f3a22ab30",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Normalizes raw profile data from Amazon",
      "evaluatorVersion": "1.0",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Amazon Profile Normalization",
      "script": [
        "/*",
        " * Copyright 2020 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "return json(object(",
        "        field("id", rawProfile.user_id),",
        "        field("displayName", rawProfile.name),",
        "        field("email", rawProfile.email),",
        "        field("username", rawProfile.email)))",
      ],
    },
    "6c49bebe-3a62-11ed-a261-0242ac120002": {
      "_id": "6c49bebe-3a62-11ed-a261-0242ac120002",
      "context": "LIBRARY",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Default global library script to be referenced from other scripts",
      "evaluatorVersion": "2.0",
      "exports": [
        {
          "arity": 2,
          "id": "logError",
          "type": "Function",
        },
        {
          "arity": 2,
          "id": "logWarning",
          "type": "Function",
        },
        {
          "arity": 2,
          "id": "logInfo",
          "type": "Function",
        },
        {
          "arity": 2,
          "id": "logDebug",
          "type": "Function",
        },
      ],
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Library Script",
      "script": [
        "/*",
        " * Copyright 2022-2023 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        " * This is an example library script with methods that can be used in other scripts.",
        " * To reference it, use the following:",
        " *",
        " * var library = require("Library Script");",
        " *",
        " * library.logError(logger, "Error message");",
        " * library.logDebug(logger, "Debug message");",
        " */",
        "",
        "function logError(log, errorMessage) {",
        "  log.error(errorMessage);",
        "}",
        "",
        "function logWarning(log, warningMessage) {",
        "  log.warn(warningMessage);",
        "}",
        "",
        "exports.logError = logError;",
        "exports.logWarning = logWarning;",
        "",
        "// Alternatively, exports can be declared using an inline arrow function",
        "",
        "exports.logInfo = (log, infoMessage) => log.info(infoMessage);",
        "exports.logDebug = (log, debugMessage) => log.debug(debugMessage);",
        "",
      ],
    },
    "703dab1a-1921-4981-98dd-b8e5349d8548": {
      "_id": "703dab1a-1921-4981-98dd-b8e5349d8548",
      "context": "AUTHENTICATION_SERVER_SIDE",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Default global script for server side Device Id (Match) Authentication Module",
      "evaluatorVersion": "1.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Device Id (Match) - Server Side",
      "script": [
        "/*",
        " * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.",
        " *",
        " * Copyright (c) 2009 Sun Microsystems Inc. All Rights Reserved",
        " *",
        " * The contents of this file are subject to the terms",
        " * of the Common Development and Distribution License",
        " * (the License). You may not use this file except in",
        " * compliance with the License.",
        " *",
        " * You can obtain a copy of the License at",
        " * https://opensso.dev.java.net/public/CDDLv1.0.html or",
        " * opensso/legal/CDDLv1.0.txt",
        " * See the License for the specific language governing",
        " * permission and limitations under the License.",
        " *",
        " * When distributing Covered Code, include this CDDL",
        " * Header Notice in each file and include the License file",
        " * at opensso/legal/CDDLv1.0.txt.",
        " * If applicable, add the following below the CDDL Header,",
        " * with the fields enclosed by brackets [] replaced by",
        " * your own identifying information:",
        " * "Portions Copyrighted [year] [name of copyright owner]"",
        " *",
        " */",
        "/*",
        " * Portions Copyrighted 2013 Syntegrity.",
        " * Portions Copyrighted 2013-2023 ForgeRock AS.",
        " */",
        "",
        "var ScalarComparator = {}, ScreenComparator = {}, MultiValueComparator = {}, UserAgentComparator = {}, GeolocationComparator = {};",
        "",
        "var config = {",
        "    profileExpiration: 30,              //in days",
        "    maxProfilesAllowed: 5,",
        "    maxPenaltyPoints: 0,",
        "    attributes: {",
        "        screen: {",
        "            required: true,",
        "            comparator: ScreenComparator,",
        "            args: {",
        "                penaltyPoints: 50",
        "            }",
        "        },",
        "        plugins: {",
        "            installedPlugins: {",
        "                required: false,",
        "                comparator: MultiValueComparator,",
        "                args: {",
        "                    maxPercentageDifference: 10,",
        "                    maxDifferences: 5,",
        "                    penaltyPoints: 100",
        "                }",
        "            }",
        "        },",
        "        fonts: {",
        "            installedFonts: {",
        "                required: false,",
        "                comparator: MultiValueComparator,",
        "                args: {",
        "                    maxPercentageDifference: 10,",
        "                    maxDifferences: 5,",
        "                    penaltyPoints: 100",
        "                }",
        "            }",
        "        },",
        "        timezone: {",
        "            timezone: {",
        "                required: false,",
        "                comparator: ScalarComparator,",
        "                args: {",
        "                    penaltyPoints: 100",
        "                }",
        "            }",
        "        },",
        "        userAgent: {",
        "            required: true,",
        "            comparator: UserAgentComparator,",
        "            args: {",
        "                ignoreVersion: true,",
        "                penaltyPoints: 100",
        "            }",
        "        },",
        "        geolocation: {",
        "            required: false,",
        "            comparator: GeolocationComparator,",
        "            args: {",
        "                allowedRange: 100,            //in miles",
        "                penaltyPoints: 100",
        "            }",
        "        }",
        "    }",
        "};",
        "",
        "//---------------------------------------------------------------------------//",
        "//                           Comparator functions                            //",
        "//---------------------------------------------------------------------------//",
        "",
        "var all, any, calculateDistance, calculateIntersection, calculatePercentage, nullOrUndefined, splitAndTrim,",
        "    undefinedLocation;",
        "",
        "// ComparisonResult",
        "",
        "/**",
        " * Constructs an instance of a ComparisonResult with the given penalty points.",
        " *",
        " * @param penaltyPoints (Number) The penalty points for the comparison (defaults to 0).",
        " * @param additionalInfoInCurrentValue (boolean) Whether the current value contains more information",
        " *                                               than the stored value (defaults to false).",
        " */",
        "function ComparisonResult() {",
        "",
        "    var penaltyPoints = 0,",
        "        additionalInfoInCurrentValue = false;",
        "",
        "    if (arguments[0] !== undefined && arguments[1] !== undefined) {",
        "        penaltyPoints = arguments[0];",
        "        additionalInfoInCurrentValue = arguments[1];",
        "    }",
        "",
        "    if (arguments[0] !== undefined && arguments[1] === undefined) {",
        "        if (typeof(arguments[0]) === "boolean") {",
        "            additionalInfoInCurrentValue = arguments[0];",
        "        } else {",
        "            penaltyPoints = arguments[0];",
        "        }",
        "    }",
        "",
        "    this.penaltyPoints = penaltyPoints;",
        "    this.additionalInfoInCurrentValue = additionalInfoInCurrentValue;",
        "",
        "}",
        "",
        "ComparisonResult.ZERO_PENALTY_POINTS = new ComparisonResult(0);",
        "",
        "/**",
        " * Static method for functional programming.",
        " *",
        " * @return boolean true if comparisonResult.isSuccessful().",
        " */",
        "ComparisonResult.isSuccessful =  function(comparisonResult) {",
        "    return comparisonResult.isSuccessful();",
        "};",
        "",
        "",
        "/**",
        " * Static method for functional programming.",
        " *",
        " * @return boolean true if comparisonResult.additionalInfoInCurrentValue.",
        " */",
        "ComparisonResult.additionalInfoInCurrentValue =  function(comparisonResult) {",
        "    return comparisonResult.additionalInfoInCurrentValue;",
        "};",
        "",
        "/**",
        " * Comparison function that can be provided as an argument to array.sort",
        " */",
        "ComparisonResult.compare = function(first, second) {",
        "    if (nullOrUndefined(first) && nullOrUndefined(second)) {",
        "        return 0;",
        "    } else if (nullOrUndefined(first)) {",
        "        return -1;",
        "    } else if (nullOrUndefined(second)) {",
        "        return 1;",
        "    } else {",
        "        if (first.penaltyPoints !== second.penaltyPoints) {",
        "            return first.penaltyPoints - second.penaltyPoints;",
        "        } else {",
        "            return (first.additionalInfoInCurrentValue ? 1 : 0) - (second.additionalInfoInCurrentValue ? 1 : 0);",
        "        }",
        "    }",
        "};",
        "",
        "/**",
        " * Amalgamates the given ComparisonResult into this ComparisonResult.",
        " *",
        " * @param comparisonResult The ComparisonResult to include.",
        " */",
        "ComparisonResult.prototype.addComparisonResult = function(comparisonResult) {",
        "    this.penaltyPoints += comparisonResult.penaltyPoints;",
        "    if (comparisonResult.additionalInfoInCurrentValue) {",
        "        this.additionalInfoInCurrentValue = comparisonResult.additionalInfoInCurrentValue;",
        "    }",
        "};",
        "",
        "/**",
        " * Returns true if no penalty points have been assigned for the comparison.",
        " *",
        " * @return boolean true if the comparison was successful.",
        " */",
        "ComparisonResult.prototype.isSuccessful = function() {",
        "    return nullOrUndefined(this.penaltyPoints) || this.penaltyPoints === 0;",
        "};",
        "",
        "/**",
        " * Compares two simple objects (String|Number) and if they are equal then returns a ComparisonResult with zero",
        " * penalty points assigned, otherwise returns a ComparisonResult with the given number of penalty points assigned.",
        " *",
        " * @param currentValue (String|Number) The current value.",
        " * @param storedValue (String|Number) The stored value.",
        " * @param config: {",
        " *            "penaltyPoints": (Number) The number of penalty points.",
        " *        }",
        " * @return ComparisonResult.",
        " */",
        "ScalarComparator.compare = function (currentValue, storedValue, config) {",
        "    if (logger.messageEnabled()) {",
        "        logger.message("StringComparator.compare:currentValue: " + JSON.stringify(currentValue));",
        "        logger.message("StringComparator.compare:storedValue: " + JSON.stringify(storedValue));",
        "        logger.message("StringComparator.compare:config: " + JSON.stringify(config));",
        "    }",
        "    if (config.penaltyPoints === 0) {",
        "        return ComparisonResult.ZERO_PENALTY_POINTS;",
        "    }",
        "",
        "    if (!nullOrUndefined(storedValue)) {",
        "        if (nullOrUndefined(currentValue) || currentValue !== storedValue) {",
        "            return new ComparisonResult(config.penaltyPoints);",
        "        }",
        "    } else if (!nullOrUndefined(currentValue)) {",
        "        return new ComparisonResult(true);",
        "    }",
        "",
        "    return ComparisonResult.ZERO_PENALTY_POINTS;",
        "};",
        "",
        "/**",
        " * Compares two screens and if they are equal then returns a ComparisonResult with zero penalty points assigned,",
        " * otherwise returns a ComparisonResult with the given number of penalty points assigned.",
        " *",
        " * @param currentValue: {",
        " *            "screenWidth": (Number) The current client screen width.",
        " *            "screenHeight": (Number) The current client screen height.",
        " *            "screenColourDepth": (Number) The current client screen colour depth.",
        " *        }",
        " * @param storedValue: {",
        " *            "screenWidth": (Number) The stored client screen width.",
        " *            "screenHeight": (Number) The stored client screen height.",
        " *            "screenColourDepth": (Number) The stored client screen colour depth.",
        " *        }",
        " * @param config: {",
        " *            "penaltyPoints": (Number) The number of penalty points.",
        " *        }",
        " * @return ComparisonResult",
        " */",
        "ScreenComparator.compare = function (currentValue, storedValue, config) {",
        "    if (logger.messageEnabled()) {",
        "        logger.message("ScreenComparator.compare:currentValue: " + JSON.stringify(currentValue));",
        "        logger.message("ScreenComparator.compare:storedValue: " + JSON.stringify(storedValue));",
        "        logger.message("ScreenComparator.compare:config: " + JSON.stringify(config));",
        "    }",
        "",
        "    if (nullOrUndefined(currentValue)) {",
        "        currentValue = {screenWidth: null, screenHeight: null, screenColourDepth: null};",
        "    }",
        "    if (nullOrUndefined(storedValue)) {",
        "        storedValue = {screenWidth: null, screenHeight: null, screenColourDepth: null};",
        "    }",
        "",
        "    var comparisonResults = [",
        "        ScalarComparator.compare(currentValue.screenWidth, storedValue.screenWidth, config),",
        "        ScalarComparator.compare(currentValue.screenHeight, storedValue.screenHeight, config),",
        "        ScalarComparator.compare(currentValue.screenColourDepth, storedValue.screenColourDepth, config)];",
        "",
        "    if (all(comparisonResults, ComparisonResult.isSuccessful)) {",
        "        return new ComparisonResult(any(comparisonResults, ComparisonResult.additionalInfoInCurrentValue));",
        "    } else {",
        "        return new ComparisonResult(config.penaltyPoints);",
        "    }",
        "};",
        "",
        "/**",
        " * Splits both values using delimiter, trims every value and compares collections of values.",
        " * Returns zero-result for same multi-value attributes.",
        " *",
        " * If collections are not same checks if number of differences is less or equal maxDifferences or",
        " * percentage of difference is less or equal maxPercentageDifference.",
        " *",
        " * If yes then returns zero-result with additional info, else returns penaltyPoints-result.",
        " *",
        " * @param currentValue: (String) The current value.",
        " * @param storedValue: (String) The stored value.",
        " * @param config: {",
        " *            "maxPercentageDifference": (Number) The max difference percentage in the values,",
        " *                                                before the penalty is assigned.",
        " *            "maxDifferences": (Number) The max number of differences in the values,",
        " *                                       before the penalty points are assigned.",
        " *            "penaltyPoints": (Number) The number of penalty points.",
        "  *        }",
        " * @return ComparisonResult",
        " */",
        "MultiValueComparator.compare = function (currentValue, storedValue, config) {",
        "    if (logger.messageEnabled()) {",
        "        logger.message("MultiValueComparator.compare:currentValue: " + JSON.stringify(currentValue));",
        "        logger.message("MultiValueComparator.compare:storedValue: " + JSON.stringify(storedValue));",
        "        logger.message("MultiValueComparator.compare:config: " + JSON.stringify(config));",
        "    }",
        "",
        "    var delimiter = ";",",
        "        currentValues = splitAndTrim(currentValue, delimiter),",
        "        storedValues = splitAndTrim(storedValue, delimiter),",
        "        maxNumberOfElements = Math.max(currentValues.length, storedValues.length),",
        "        numberOfTheSameElements = calculateIntersection(currentValues, storedValues).length,",
        "        numberOfDifferences = maxNumberOfElements - numberOfTheSameElements,",
        "        percentageOfDifferences = calculatePercentage(numberOfDifferences, maxNumberOfElements);",
        "",
        "    if (nullOrUndefined(storedValue) && !nullOrUndefined(currentValue)) {",
        "        return new ComparisonResult(true);",
        "    }",
        "",
        "    if (logger.messageEnabled()) {",
        "        logger.message(numberOfTheSameElements + " of " + maxNumberOfElements + " are same");",
        "    }",
        "",
        "    if (maxNumberOfElements === 0) {",
        "        logger.message("Ignored because no attributes found in both profiles");",
        "        return ComparisonResult.ZERO_PENALTY_POINTS;",
        "    }",
        "",
        "    if (numberOfTheSameElements === maxNumberOfElements) {",
        "        logger.message("Ignored because all attributes are same");",
        "        return ComparisonResult.ZERO_PENALTY_POINTS;",
        "    }",
        "",
        "    if (numberOfDifferences > config.maxDifferences) {",
        "        if (logger.messageEnabled()) {",
        "            logger.message("Would be ignored if not more than " + config.maxDifferences + " differences");",
        "        }",
        "        return new ComparisonResult(config.penaltyPoints);",
        "    }",
        "",
        "    if (percentageOfDifferences > config.maxPercentageDifference) {",
        "        if (logger.messageEnabled()) {",
        "            logger.message(percentageOfDifferences + " percents are different");",
        "            logger.message("Would be ignored if not more than " + config.maxPercentageDifference + " percent");",
        "        }",
        "        return new ComparisonResult(config.penaltyPoints);",
        "    }",
        "",
        "    if (logger.messageEnabled()) {",
        "        logger.message("Ignored because number of differences(" + numberOfDifferences + ") not more than "",
        "            + config.maxDifferences);",
        "        logger.message(percentageOfDifferences + " percents are different");",
        "        logger.message("Ignored because not more than " + config.maxPercentageDifference + " percent");",
        "    }",
        "    return new ComparisonResult(true);",
        "};",
        "",
        "/**",
        " * Compares two User Agent Strings and if they are equal then returns a ComparisonResult with zero penalty",
        " * points assigned, otherwise returns a ComparisonResult with the given number of penalty points assigned.",
        " *",
        " * @param currentValue (String) The current value.",
        " * @param storedValue (String) The stored value.",
        " * @param config: {",
        " *            "ignoreVersion": (boolean) If the version numbers in the User Agent Strings should be ignore",
        " *                                       in the comparison.",
        " *            "penaltyPoints": (Number) The number of penalty points.",
        " *        }",
        " * @return A ComparisonResult.",
        " */",
        "UserAgentComparator.compare = function (currentValue, storedValue, config) {",
        "    if (logger.messageEnabled()) {",
        "        logger.message("UserAgentComparator.compare:currentValue: " + JSON.stringify(currentValue));",
        "        logger.message("UserAgentComparator.compare:storedValue: " + JSON.stringify(storedValue));",
        "        logger.message("UserAgentComparator.compare:config: " + JSON.stringify(config));",
        "    }",
        "",
        "    if (config.ignoreVersion) {",
        "        // remove version number",
        "        currentValue = nullOrUndefined(currentValue) ? null : currentValue.replace(/[\\d\\.]+/g, "").trim();",
        "        storedValue = nullOrUndefined(storedValue) ? null : storedValue.replace(/[\\d\\.]+/g, "").trim();",
        "    }",
        "",
        "    return ScalarComparator.compare(currentValue, storedValue, config);",
        "};",
        "",
        "/**",
        " * Compares two locations, taking into account a degree of difference.",
        " *",
        " * @param currentValue: {",
        " *            "latitude": (Number) The current latitude.",
        " *            "longitude": (Number) The current longitude.",
        " *        }",
        " * @param storedValue: {",
        " *            "latitude": (Number) The stored latitude.",
        " *            "longitude": (Number) The stored longitude.",
        " *        }",
        " * @param config: {",
        " *            "allowedRange": (Number) The max difference allowed in the two locations, before the penalty is assigned.",
        " *            "penaltyPoints": (Number) The number of penalty points.",
        "*         }",
        " * @return ComparisonResult",
        " */",
        "GeolocationComparator.compare = function (currentValue, storedValue, config) {",
        "    if (logger.messageEnabled()) {",
        "        logger.message("GeolocationComparator.compare:currentValue: " + JSON.stringify(currentValue));",
        "        logger.message("GeolocationComparator.compare:storedValue: " + JSON.stringify(storedValue));",
        "        logger.message("GeolocationComparator.compare:config: " + JSON.stringify(config));",
        "    }",
        "",
        "    // Check for undefined stored or current locations",
        "",
        "    if (undefinedLocation(currentValue) && undefinedLocation(storedValue)) {",
        "        return ComparisonResult.ZERO_PENALTY_POINTS;",
        "    }",
        "    if (undefinedLocation(currentValue) && !undefinedLocation(storedValue)) {",
        "        return new ComparisonResult(config.penaltyPoints);",
        "    }",
        "    if (!undefinedLocation(currentValue) && undefinedLocation(storedValue)) {",
        "        return new ComparisonResult(true);",
        "    }",
        "",
        "    // Both locations defined, therefore perform comparison",
        "",
        "    var distance = calculateDistance(currentValue, storedValue);",
        "",
        "    if (logger.messageEnabled()) {",
        "        logger.message("Distance between (" + currentValue.latitude + "," + currentValue.longitude + ") and (" +",
        "            storedValue.latitude + "," + storedValue.longitude + ") is " + distance + " miles");",
        "    }",
        "",
        "    if (parseFloat(distance.toPrecision(5)) === 0) {",
        "        logger.message("Location is the same");",
        "        return ComparisonResult.ZERO_PENALTY_POINTS;",
        "    }",
        "",
        "    if (distance <= config.allowedRange) {",
        "        if (logger.messageEnabled()) {",
        "            logger.message("Tolerated because distance not more then " + config.allowedRange);",
        "        }",
        "        return new ComparisonResult(true);",
        "    } else {",
        "        if (logger.messageEnabled()) {",
        "            logger.message("Would be ignored if distance not more then " + config.allowedRange);",
        "        }",
        "        return new ComparisonResult(config.penaltyPoints);",
        "    }",
        "};",
        "",
        "",
        "//---------------------------------------------------------------------------//",
        "//                    Device Print Logic - DO NOT MODIFY                     //",
        "//---------------------------------------------------------------------------//",
        "",
        "// Utility functions",
        "",
        "/**",
        " * Returns true if evaluating function f on each element of the Array a returns true.",
        " *",
        " * @param a: (Array) The array of elements to evaluate",
        " * @param f: (Function) A single argument function for mapping elements of the array to boolean.",
        " * @return boolean.",
        " */",
        "all = function(a, f) {",
        "    var i;",
        "    for (i = 0; i < a.length; i++) {",
        "        if (f(a[i]) === false) {",
        "            return false;",
        "        }",
        "    }",
        "    return true;",
        "};",
        "",
        "/**",
        " * Returns true if evaluating function f on any element of the Array a returns true.",
        " *",
        " * @param a: (Array) The array of elements to evaluate",
        " * @param f: (Function) A single argument function for mapping elements of the array to boolean.",
        " * @return boolean.",
        " */",
        "any = function(a, f) {",
        "    var i;",
        "    for (i = 0; i < a.length; i++) {",
        "        if (f(a[i]) === true) {",
        "            return true;",
        "        }",
        "    }",
        "    return false;",
        "};",
        "",
        "/**",
        " * Returns true if the provided location is null or has undefined longitude or latitude values.",
        " *",
        " * @param location: {",
        " *            "latitude": (Number) The latitude.",
        " *            "longitude": (Number) The longitude.",
        " *        }",
        " * @return boolean",
        " */",
        "undefinedLocation = function(location) {",
        "    return nullOrUndefined(location) || nullOrUndefined(location.latitude) || nullOrUndefined(location.longitude);",
        "};",
        "",
        "/**",
        " * Returns true if the provided value is null or undefined.",
        " *",
        " * @param value: a value of any type",
        " * @return boolean",
        " */",
        "nullOrUndefined = function(value) {",
        "    return value === null || value === undefined;",
        "};",
        "",
        "/**",
        " * Calculates the distances between the two locations.",
        " *",
        " * @param first: {",
        " *            "latitude": (Number) The first latitude.",
        " *            "longitude": (Number) The first longitude.",
        " *        }",
        " * @param second: {",
        " *            "latitude": (Number) The second latitude.",
        " *            "longitude": (Number) The second longitude.",
        " *        }",
        " * @return Number The distance between the two locations.",
        " */",
        "calculateDistance = function(first, second) {",
        "    var factor = (Math.PI / 180),",
        "        theta,",
        "        dist;",
        "    function degreesToRadians(degrees) {",
        "        return degrees * factor;",
        "    }",
        "    function radiansToDegrees(radians) {",
        "        return radians / factor;",
        "    }",
        "    theta = first.longitude - second.longitude;",
        "    dist = Math.sin(degreesToRadians(first.latitude)) * Math.sin(degreesToRadians(second.latitude))",
        "        + Math.cos(degreesToRadians(first.latitude)) * Math.cos(degreesToRadians(second.latitude))",
        "        * Math.cos(degreesToRadians(theta));",
        "    dist = Math.acos(dist);",
        "    dist = radiansToDegrees(dist);",
        "    dist = dist * 60 * 1.1515;",
        "    return dist;",
        "};",
        "",
        "/**",
        " * Converts a String holding a delimited sequence of values into an array.",
        " *",
        " * @param text (String) The String representation of a delimited sequence of values.",
        " * @param delimiter (String) The character delimiting values within the text String.",
        " * @return (Array) The comma separated values.",
        " */",
        "splitAndTrim = function(text, delimiter) {",
        "",
        "    var results = [],",
        "        i,",
        "        values,",
        "        value;",
        "    if (text === null) {",
        "        return results;",
        "    }",
        "",
        "    values = text.split(delimiter);",
        "    for (i = 0; i < values.length; i++) {",
        "        value = values[i].trim();",
        "        if (value !== "") {",
        "            results.push(value);",
        "        }",
        "    }",
        "",
        "    return results;",
        "};",
        "",
        "/**",
        " * Converts value to a percentage of range.",
        " *",
        " * @param value (Number) The actual number to be converted to a percentage.",
        " * @param range (Number) The total number of values (i.e. represents 100%).",
        " * @return (Number) The percentage.",
        " */",
        "calculatePercentage = function(value, range) {",
        "    if (range === 0) {",
        "        return 0;",
        "    }",
        "    return parseFloat((value / range).toPrecision(2)) * 100;",
        "};",
        "",
        "/**",
        " * Creates a new array containing only those elements found in both arrays received as arguments.",
        " *",
        " * @param first (Array) The first array.",
        " * @param second (Array) The second array.",
        " * @return (Array) The elements that found in first and second.",
        " */",
        "calculateIntersection = function(first, second) {",
        "    return first.filter(function(element) {",
        "        return second.indexOf(element) !== -1;",
        "    });",
        "};",
        "",
        "function getValue(obj, attributePath) {",
        "    var value = obj,",
        "        i;",
        "    for (i = 0; i < attributePath.length; i++) {",
        "        if (value === undefined) {",
        "            return null;",
        "        }",
        "        value = value[attributePath[i]];",
        "    }",
        "    return value;",
        "}",
        "",
        "",
        "function isLeafNode(attributeConfig) {",
        "    return attributeConfig.comparator !== undefined;",
        "}",
        "",
        "function getAttributePaths(attributeConfig, attributePath) {",
        "",
        "    var attributePaths = [],",
        "        attributeName,",
        "        attrPaths,",
        "        attrPath,",
        "        i;",
        "",
        "    for (attributeName in attributeConfig) {",
        "        if (attributeConfig.hasOwnProperty(attributeName)) {",
        "",
        "            if (isLeafNode(attributeConfig[attributeName])) {",
        "                attrPath = attributePath.slice();",
        "                attrPath.push(attributeName);",
        "                attributePaths.push(attrPath);",
        "            } else {",
        "                attrPath = attributePath.slice();",
        "                attrPath.push(attributeName);",
        "                attrPaths = getAttributePaths(attributeConfig[attributeName], attrPath);",
        "                for (i = 0; i < attrPaths.length; i++) {",
        "                    attributePaths.push(attrPaths[i]);",
        "                }",
        "            }",
        "        }",
        "    }",
        "",
        "    return attributePaths;",
        "}",
        "",
        "function getDevicePrintAttributePaths(attributeConfig) {",
        "    return getAttributePaths(attributeConfig, []);",
        "}",
        "",
        "function hasRequiredAttributes(devicePrint, attributeConfig) {",
        "",
        "    var attributePaths = getDevicePrintAttributePaths(attributeConfig),",
        "        i,",
        "        attrValue,",
        "        attrConfig;",
        "",
        "    for (i = 0; i < attributePaths.length; i++) {",
        "",
        "        attrValue = getValue(devicePrint, attributePaths[i]);",
        "        attrConfig = getValue(attributeConfig, attributePaths[i]);",
        "",
        "        if (attrConfig.required && attrValue === undefined) {",
        "            logger.warning("Device Print profile missing required attribute, " + attributePaths[i]);",
        "            return false;",
        "        }",
        "    }",
        "",
        "    logger.message("device print has required attributes");",
        "    return true;",
        "}",
        "",
        "function compareDevicePrintProfiles(attributeConfig, devicePrint, devicePrintProfiles, maxPenaltyPoints) {",
        "",
        "    var attributePaths = getDevicePrintAttributePaths(attributeConfig),",
        "        dao = sharedState.get('_DeviceIdDao'),",
        "        results,",
        "        j,",
        "        aggregatedComparisonResult,",
        "        i,",
        "        currentValue,",
        "        storedValue,",
        "        attrConfig,",
        "        comparisonResult,",
        "        selectedComparisonResult,",
        "        selectedProfile,",
        "        curDevicePrintProfile,",
        "        vals;",
        "",
        "    results = [];",
        "    for (j = 0; j < devicePrintProfiles.length; j++) {",
        "        curDevicePrintProfile = JSON.parse(org.forgerock.json.JsonValue.json(devicePrintProfiles[j]));",
        "        aggregatedComparisonResult = new ComparisonResult();",
        "        for (i = 0; i < attributePaths.length; i++) {",
        "",
        "            currentValue = getValue(devicePrint, attributePaths[i]);",
        "            storedValue = getValue(curDevicePrintProfile.devicePrint, attributePaths[i]);",
        "            attrConfig = getValue(attributeConfig, attributePaths[i]);",
        "",
        "            if (storedValue === null) {",
        "                comparisonResult = new ComparisonResult(attrConfig.penaltyPoints);",
        "            } else {",
        "                comparisonResult = attrConfig.comparator.compare(currentValue, storedValue, attrConfig.args);",
        "            }",
        "",
        "            if (logger.messageEnabled()) {",
        "                logger.message("Comparing attribute path: " + attributePaths[i]",
        "                    + ", Comparison result: successful=" + comparisonResult.isSuccessful() + ", penaltyPoints="",
        "                    + comparisonResult.penaltyPoints + ", additionalInfoInCurrentValue="",
        "                    + comparisonResult.additionalInfoInCurrentValue);",
        "            }",
        "            aggregatedComparisonResult.addComparisonResult(comparisonResult);",
        "        }",
        "        if (logger.messageEnabled()) {",
        "            logger.message("Aggregated comparison result: successful="",
        "                + aggregatedComparisonResult.isSuccessful() + ", penaltyPoints="",
        "                + aggregatedComparisonResult.penaltyPoints + ", additionalInfoInCurrentValue="",
        "                + aggregatedComparisonResult.additionalInfoInCurrentValue);",
        "        }",
        "",
        "        results.push({",
        "            key: aggregatedComparisonResult,",
        "            value: devicePrintProfiles[j]",
        "        });",
        "    }",
        "",
        "    if (results.length === 0) {",
        "        return null;",
        "    }",
        "",
        "    results.sort(function(a, b) {",
        "        return ComparisonResult.compare(a.key, b.key);",
        "    });",
        "    selectedComparisonResult = results[0].key;",
        "    if (logger.messageEnabled()) {",
        "        logger.message("Selected comparison result: successful=" + selectedComparisonResult.isSuccessful()",
        "            + ", penaltyPoints=" + selectedComparisonResult.penaltyPoints + ", additionalInfoInCurrentValue="",
        "            + selectedComparisonResult.additionalInfoInCurrentValue);",
        "    }",
        "",
        "    selectedProfile = null;",
        "    if (selectedComparisonResult.penaltyPoints <= maxPenaltyPoints) {",
        "        selectedProfile = results[0].value;",
        "        if (logger.messageEnabled()) {",
        "            logger.message("Selected profile: " + selectedProfile +",
        "                " with " + selectedComparisonResult.penaltyPoints + " penalty points");",
        "        }",
        "    }",
        "",
        "    if (selectedProfile === null) {",
        "        return false;",
        "    }",
        "",
        "    /* update profile */",
        "    selectedProfile.put("selectionCounter",",
        "        java.lang.Integer.valueOf(parseInt(selectedProfile.get("selectionCounter"), 10) + 1));",
        "    selectedProfile.put("lastSelectedDate", java.lang.Long.valueOf(new Date().getTime()));",
        "    selectedProfile.put("devicePrint", devicePrint);",
        "",
        "    vals = [];",
        "    for (i = 0; i < devicePrintProfiles.length; i++) {",
        "        vals.push(org.forgerock.json.JsonValue.json(devicePrintProfiles[i]));",
        "    }",
        "",
        "    dao.saveDeviceProfiles(username, realm, vals);",
        "",
        "    return true;",
        "}",
        "",
        "function matchDevicePrint() {",
        "",
        "    if (!username) {",
        "        logger.error("Username not set. Cannot compare user's device print profiles.");",
        "        authState = FAILED;",
        "    } else {",
        "",
        "        if (logger.messageEnabled()) {",
        "            logger.message("client devicePrint: " + clientScriptOutputData);",
        "        }",
        "",
        "        var getProfiles = function () {",
        "",
        "                function isExpiredProfile(devicePrintProfile) {",
        "                    var expirationDate = new Date(),",
        "                        lastSelectedDate;",
        "                    expirationDate.setDate(expirationDate.getDate() - config.profileExpiration);",
        "",
        "                    lastSelectedDate = new Date(devicePrintProfile.lastSelectedDate);",
        "",
        "                    return lastSelectedDate < expirationDate;",
        "                }",
        "",
        "                function getNotExpiredProfiles() {",
        "                    var profile,",
        "                        dao = sharedState.get('_DeviceIdDao'),",
        "                        results = [],",
        "                        profiles,",
        "                        iter;",
        "",
        "                    profiles = dao.getDeviceProfiles(username, realm);",
        "",
        "                    if (profiles) {",
        "                        iter = profiles.iterator();",
        "",
        "                        while (iter.hasNext()) {",
        "                            profile = iter.next().getObject();",
        "                            if (!isExpiredProfile(profile)) {",
        "                                results.push(profile);",
        "                            }",
        "                        }",
        "                    }",
        "                    if (logger.messageEnabled()) {",
        "                        logger.message("stored non-expired profiles: " + results);",
        "                    }",
        "                    return results;",
        "                }",
        "",
        "                return getNotExpiredProfiles();",
        "            },",
        "            devicePrint = JSON.parse(clientScriptOutputData),",
        "            devicePrintProfiles = getProfiles();",
        "",
        "        if (!hasRequiredAttributes(devicePrint, config.attributes)) {",
        "            logger.message("devicePrint.hasRequiredAttributes: false");",
        "            // Will fail this module but fall-through to next module. Which should be OTP.",
        "            authState = FAILED;",
        "        } else if (compareDevicePrintProfiles(config.attributes, devicePrint, devicePrintProfiles, config.maxPenaltyPoints)) {",
        "            logger.message("devicePrint.hasValidProfile: true");",
        "            authState = SUCCESS;",
        "        } else {",
        "            logger.message("devicePrint.hasValidProfile: false");",
        "            sharedState.put('devicePrintProfile', JSON.stringify(devicePrint));",
        "            // Will fail this module but fall-through to next module. Which should be OTP.",
        "            authState = FAILED;",
        "        }",
        "    }",
        "}",
        "",
        "matchDevicePrint();",
        "",
      ],
    },
    "739bdc48-fd24-4c52-b353-88706d75558a": {
      "_id": "739bdc48-fd24-4c52-b353-88706d75558a",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Check if username has already been collected.",
      "evaluatorVersion": "1.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Check Username",
      "script": [
        ""/* Check Username\\n *\\n * Author: volker.scheuber@forgerock.com\\n * \\n * Check if username has already been collected.\\n * Return \\"known\\" if yes, \\"unknown\\" otherwise.\\n * \\n * This script does not need to be parametrized. It will work properly as is.\\n * \\n * The Scripted Decision Node needs the following outcomes defined:\\n * - known\\n * - unknown\\n */\\n(function () {\\n    if (null != sharedState.get(\\"username\\")) {\\n        outcome = \\"known\\";\\n    }\\n    else {\\n        outcome = \\"unknown\\";\\n    }\\n}());"",
      ],
    },
    "73cecbfc-dad0-4395-be6a-6858ee3a80e5": {
      "_id": "73cecbfc-dad0-4395-be6a-6858ee3a80e5",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Normalizes raw profile data from Microsoft",
      "evaluatorVersion": "1.0",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Microsoft Profile Normalization",
      "script": [
        "/*",
        " * Copyright 2020 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        "{",
        "    "@odata.context": "https://graph.microsoft.com/v1.0/$metadata#users/$entity",",
        "    "@odata.id": "https://graph.microsoft.com/v2/711ffa9c-5972-4713-ace3-688c9732614a/directoryObjects/7d7759e2-36d8-4e64-b173-3f890d7d46d6/Microsoft.DirectoryServices.User",",
        "    "businessPhones": [",
        "        "18014735451"",
        "    ],",
        "    "displayName": "Volker Scheuber",",
        "    "givenName": "Volker",",
        "    "jobTitle": null,",
        "    "mail": "vscheuber@vscheuber.onmicrosoft.com",",
        "    "mobilePhone": null,",
        "    "officeLocation": null,",
        "    "preferredLanguage": null,",
        "    "surname": "Scheuber",",
        "    "userPrincipalName": "vscheuber@vscheuber.onmicrosoft.com",",
        "    "id": "7d7759e2-36d8-4e64-b173-3f890d7d46d6"",
        "}",
        " */",
        "",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "logger.message("Kauai Microsoft Profile Normalization: rawProfile={}", rawProfile)",
        "",
        "return json(object(",
        "        field("id", rawProfile.id),",
        "        field("displayName", rawProfile.displayName),",
        "        field("givenName", rawProfile.givenName),",
        "        field("familyName", rawProfile.surname),",
        "        field("email", rawProfile.userPrincipalName),",
        "        field("username", rawProfile.userPrincipalName),",
        "        field("groups", rawProfile.groups)))",
      ],
    },
    "7e3d7067-d50f-4674-8c76-a3e13a810c33": {
      "_id": "7e3d7067-d50f-4674-8c76-a3e13a810c33",
      "context": "AUTHENTICATION_SERVER_SIDE",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Default global script for server side Scripted Authentication Module",
      "evaluatorVersion": "1.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Scripted Module - Server Side",
      "script": [
        "/*",
        " * Copyright 2015-2023 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "var START_TIME = 9;  // 9am",
        "var END_TIME   = 17; // 5pm",
        "var longitude, latitude;",
        "var localTime;",
        "",
        "logger.message("Starting scripted authentication");",
        "logger.message("User: " + username);",
        "",
        "var userPostalAddress = getUserPostalAddress();",
        "logger.message("User address: " + userPostalAddress);",
        "",
        "getLongitudeLatitudeFromUserPostalAddress();",
        "getLocalTime();",
        "",
        "logger.message("Current time at the users location: " + localTime.getHours());",
        "if (localTime.getHours() < START_TIME || localTime.getHours() > END_TIME) {",
        "    logger.error("Login forbidden outside work hours!");",
        "    authState = FAILED;",
        "} else {",
        "    logger.message("Authentication allowed!");",
        "    authState = SUCCESS;",
        "}",
        "",
        "function getLongitudeLatitudeFromUserPostalAddress() {",
        "",
        "    var request = new org.forgerock.http.protocol.Request();",
        "    request.setUri("http://maps.googleapis.com/maps/api/geocode/json?address=" + encodeURIComponent(userPostalAddress));",
        "      request.setMethod("GET");",
        "      //the above URI has to be extended with an API_KEY if used in a frequent manner",
        "      //see documentation: https://developers.google.com/maps/documentation/geocoding/intro",
        "",
        "    var response = httpClient.send(request).get();",
        "    logResponse(response);",
        "",
        "    var geocode = JSON.parse(response.getEntity().getString());",
        "    var i;",
        "    for (i = 0; i < geocode.results.length; i++) {",
        "        var result = geocode.results[i];",
        "        latitude = result.geometry.location.lat;",
        "        longitude = result.geometry.location.lng;",
        "",
        "           logger.message("latitude:" + latitude + " longitude:" + longitude);",
        "    }",
        "}",
        "",
        "function getLocalTime() {",
        "",
        "    var now = new Date().getTime() / 1000;",
        "    var location = "location=" + latitude + "," + longitude;",
        "    var timestamp = "timestamp=" + now;",
        "",
        "    var request = new org.forgerock.http.protocol.Request();",
        "    request.setUri("https://maps.googleapis.com/maps/api/timezone/json?" + location + "&" + timestamp);",
        "      request.setMethod("GET");",
        "      //the above URI has to be extended with an API_KEY if used in a frequent manner",
        "      //see documentation: https://developers.google.com/maps/documentation/timezone/intro",
        "",
        "    var response = httpClient.send(request).get();",
        "    logResponse(response);",
        "",
        "    var timezone = JSON.parse(response.getEntity().getString());",
        "    var localTimestamp = parseInt(now) + parseInt(timezone.dstOffset) + parseInt(timezone.rawOffset);",
        "    localTime = new Date(localTimestamp*1000);",
        "}",
        "",
        "function getUserPostalAddress() {",
        "    var userAddressSet = idRepository.getAttribute(username, "postalAddress");",
        "    if (userAddressSet == null || userAddressSet.isEmpty()) {",
        "        logger.warning("No address specified for user: " + username);",
        "        return false;",
        "    }",
        "    return userAddressSet.iterator().next()",
        "}",
        "",
        "function logResponse(response) {",
        "    logger.message("User REST Call. Status: " + response.getStatus() + ", Body: " + response.getEntity().getString());",
        "}",
        "",
      ],
    },
    "85523e71-2d77-4577-b078-6f9674cc54e2": {
      "_id": "85523e71-2d77-4577-b078-6f9674cc54e2",
      "context": "SAML2_IDP_ADAPTER",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Always redirect browser pre-auth",
      "evaluatorVersion": "1.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Saml2 IDP Adapter Always Auth",
      "script": [
        "/*",
        " * Copyright 2021-2022 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        " * The script has these top level functions that could be executed during a SAML2 flow.",
        " *      - preSingleSignOn",
        " *      - preAuthentication",
        " *      - preSendResponse",
        " *      - preSignResponse",
        " *      - preSendFailureResponse",
        " *",
        " * Please see the javadoc for the interface definition and more information about these methods.",
        " * https://backstage.forgerock.com/docs/am/7.2/apidocs/com/sun/identity/saml2/plugins/SAML2IdentityProviderAdapter.html",
        " * Note that the initialize method is not supported in the scripts.",
        " *",
        " * Defined variables. Check the documentation on the respective functions for the variables available to it.",
        " *",
        " * hostedEntityId - String",
        " *     Entity ID for the hosted IDP",
        " * realm - String",
        " *     Realm of the hosted IDP",
        " * idpAdapterScriptHelper - IdpAdapterScriptHelper (1)",
        " *     An instance of IdpAdapterScriptHelper containing helper methods. See Javadoc for more details.",
        " * request - HttpServletRequest (2)",
        " *     Servlet request object",
        " * response - HttpServletResponse (3)",
        " *     Servlet response object",
        " * authnRequest - AuthnRequest (4)",
        " *     The original authentication request sent from SP",
        " * reqId - String",
        " *     The id to use for continuation of processing if the adapter redirects",
        " * res - Response (5)",
        " *     The SAML Response",
        " * session - SSOToken (6)",
        " *     The single sign-on session. The reference type of this is Object and would need to be casted to SSOToken.",
        " * relayState - String",
        " *     The relayState that will be used in the redirect",
        " * faultCode - String",
        " *     the fault code that will be returned in the SAML response",
        " * faultDetail - String",
        " *     the fault detail that will be returned in the SAML response",
        " * logger - Logger instance",
        " *     https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.",
        " *     Corresponding log files will be prefixed with: scripts.<script name>",
        " *",
        " * Throws SAML2Exception (7):",
        " *     for any exceptions occurring in the adapter. The federation process will continue",
        " *",
        " * Class reference:",
        " * (1) idpAdapterScriptHelper - https://backstage.forgerock.com/docs/am/7.2/apidocs/com/sun/identity/saml2/plugins/scripted/IdpAdapterScriptHelper.html.",
        " * (2) HttpServletRequest - https://tomcat.apache.org/tomcat-7.0-doc/servletapi/javax/servlet/http/HttpServletRequest.html.",
        " * (3) HttpServletResponse - https://tomcat.apache.org/tomcat-7.0-doc/servletapi/javax/servlet/http/HttpServletResponse.html.",
        " * (4) AuthnRequest - https://backstage.forgerock.com/docs/am/7.2/apidocs/com/sun/identity/saml2/protocol/AuthnRequest.html.",
        " * (5) Response - https://backstage.forgerock.com/docs/am/7.2/apidocs/com/sun/identity/saml2/protocol/Response.html.",
        " * (6) SSOToken - https://backstage.forgerock.com/docs/am/7.2/apidocs/com/iplanet/sso/SSOToken.html.",
        " * (7) SAML2Exception - https://backstage.forgerock.com/docs/am/7.2/apidocs/com/sun/identity/saml2/common/SAML2Exception.html.",
        " */",
        "",
        "/*",
        " * Template/default script for SAML2 IDP Adapter scripted plugin.",
        " */",
        "",
        "/*",
        " * Available variables for preSingleSignOn:",
        " *     hostedEntityId",
        " *     realm",
        " *     idpAdapterScriptHelper",
        " *     request",
        " *     authnRequest",
        " *     response",
        " *     reqId",
        " *     logger",
        " *",
        " * Return - true if browser redirection is happening after processing, false otherwise. Default to false.",
        " */",
        "function preSingleSignOn () {",
        "      logger.error("Chicago: preSingleSignOn");",
        "    return true;",
        "}",
        "",
        "/*",
        " * Available variables for preAuthentication:",
        " *     hostedEntityId",
        " *     realm",
        " *     idpAdapterScriptHelper",
        " *     request",
        " *     authnRequest",
        " *     response",
        " *     reqId",
        " *     session",
        " *     relayState",
        " *     logger",
        " *",
        " * Return - true if browser redirection is happening after processing, false otherwise. Default to false.",
        " */",
        "function preAuthentication () {",
        "      logger.error("Chicago: preAuthentication");",
        "    return true;",
        "}",
        "",
        "/*",
        " * Available variables for preSendResponse:",
        " *     hostedEntityId",
        " *     realm",
        " *     idpAdapterScriptHelper",
        " *     request",
        " *     authnRequest",
        " *     response",
        " *     reqId",
        " *     session",
        " *     relayState",
        " *     logger",
        " *",
        " * Return - true if browser redirection happened after processing, false otherwise. Default to false.",
        " */",
        "function preSendResponse () {",
        "      logger.error("Chicago: preSendResponse");",
        "      logger.error("Chicago: authnRequest: "+authnRequest);",
        "      response.sendRedirect("https://idc.scheuber.io/am/XUI/?realm=alpha&authIndexType=service&authIndexValue=Dispatcher&ForceAuth=true&goto="+relayState);",
        "    return true;",
        "}",
        "",
        "/*",
        " * Available variables for preSignResponse:",
        " *     hostedEntityId",
        " *     realm",
        " *     idpAdapterScriptHelper",
        " *     request",
        " *     authnRequest",
        " *     session",
        " *     relayState",
        " *     res",
        " *     logger",
        " */",
        "function preSignResponse () {",
        "      logger.error("Chicago: preSignResponse");",
        "}",
        "",
        "/*",
        " * Available variables for preSendFailureResponse:",
        " *     hostedEntityId",
        " *     realm",
        " *     idpAdapterScriptHelper",
        " *     request",
        " *     response",
        " *     faultCode",
        " *     faultDetail",
        " *     logger",
        " */",
        "function preSendFailureResponse () {",
        "      logger.error("Chicago: preSendFailureResponse");",
        "}",
      ],
    },
    "8862ca8f-7770-4af5-a888-ac0df0947f36": {
      "_id": "8862ca8f-7770-4af5-a888-ac0df0947f36",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Normalizes raw profile data from LinkedIn",
      "evaluatorVersion": "1.0",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "LinkedIn Profile Normalization",
      "script": [
        "/*",
        " * Copyright 2020 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "return json(object(",
        "        field("id", rawProfile.id),",
        "        field("givenName", rawProfile.firstName.localized.get(0)),",
        "        field("familyName", rawProfile.lastName.localized.get(0)),",
        "        field("photoUrl", rawProfile.profilePicture.displayImage),",
        "        field("email", rawProfile.elements.get(0).get("handle~").emailAddress),",
        "        field("username", rawProfile.elements.get(0).get("handle~").emailAddress)))",
      ],
    },
    "8e298710-b55e-4085-a464-88a375a4004b": {
      "_id": "8e298710-b55e-4085-a464-88a375a4004b",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Normalizes raw profile data from Twitter",
      "evaluatorVersion": "1.0",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Twitter Profile Normalization",
      "script": [
        "/*",
        " * Copyright 2020 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "return json(object(",
        "        field("id", rawProfile.id_str),",
        "        field("displayName", rawProfile.name),",
        "        field("photoUrl", rawProfile.profile_image_url),",
        "        field("email", rawProfile.email),",
        "        field("username", rawProfile.screen_name)))",
      ],
    },
    "91d197de-5916-4dca-83b5-9a4df26e7159": {
      "_id": "91d197de-5916-4dca-83b5-9a4df26e7159",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Normalizes raw profile data from WordPress",
      "evaluatorVersion": "1.0",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "WordPress Profile Normalization",
      "script": [
        "/*",
        " * Copyright 2020 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "return json(object(",
        "        field("id", rawProfile.username),",
        "        field("displayName", rawProfile.display_name),",
        "        field("photoUrl", rawProfile.avatar_URL),",
        "        field("email", rawProfile.email),",
        "        field("username", rawProfile.username)))",
      ],
    },
    "9535446c-0ff6-4a76-8576-616599119d64": {
      "_id": "9535446c-0ff6-4a76-8576-616599119d64",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Remove button from page.",
      "evaluatorVersion": "1.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Remove Button",
      "script": [
        "/* Remove Button",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Hide buttons on the journey page.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " */",
        "(function () {",
        "    var script = "Array.prototype.slice.call(document.getElementsByTagName('button')).forEach(function (e) {e.style.display = 'none'})"",
        "    var fr = JavaImporter(",
        "        org.forgerock.openam.auth.node.api.Action,",
        "        javax.security.auth.callback.TextOutputCallback,",
        "        com.sun.identity.authentication.callbacks.ScriptTextOutputCallback",
        "    )",
        "    var message = " "",
        "    if (callbacks.isEmpty()) {",
        "        action = fr.Action.send(",
        "            new fr.TextOutputCallback(",
        "                fr.TextOutputCallback.INFORMATION,",
        "                message",
        "            ),",
        "            new fr.ScriptTextOutputCallback(script)",
        "        ).build()",
        "    }",
        "}());",
      ],
    },
    "994a4e8f-2741-424a-83e7-3c5f78da01f5": {
      "_id": "994a4e8f-2741-424a-83e7-3c5f78da01f5",
      "context": "SAML2_IDP_ADAPTER",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Always redirect browser pre-auth",
      "evaluatorVersion": "1.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Saml2 IDP Adapter Always Auth - imported (2)",
      "script": [
        "/*",
        " * Copyright 2021-2022 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        " * The script has these top level functions that could be executed during a SAML2 flow.",
        " *      - preSingleSignOn",
        " *      - preAuthentication",
        " *      - preSendResponse",
        " *      - preSignResponse",
        " *      - preSendFailureResponse",
        " *",
        " * Please see the javadoc for the interface definition and more information about these methods.",
        " * https://backstage.forgerock.com/docs/am/7.2/apidocs/com/sun/identity/saml2/plugins/SAML2IdentityProviderAdapter.html",
        " * Note that the initialize method is not supported in the scripts.",
        " *",
        " * Defined variables. Check the documentation on the respective functions for the variables available to it.",
        " *",
        " * hostedEntityId - String",
        " *     Entity ID for the hosted IDP",
        " * realm - String",
        " *     Realm of the hosted IDP",
        " * idpAdapterScriptHelper - IdpAdapterScriptHelper (1)",
        " *     An instance of IdpAdapterScriptHelper containing helper methods. See Javadoc for more details.",
        " * request - HttpServletRequest (2)",
        " *     Servlet request object",
        " * response - HttpServletResponse (3)",
        " *     Servlet response object",
        " * authnRequest - AuthnRequest (4)",
        " *     The original authentication request sent from SP",
        " * reqId - String",
        " *     The id to use for continuation of processing if the adapter redirects",
        " * res - Response (5)",
        " *     The SAML Response",
        " * session - SSOToken (6)",
        " *     The single sign-on session. The reference type of this is Object and would need to be casted to SSOToken.",
        " * relayState - String",
        " *     The relayState that will be used in the redirect",
        " * faultCode - String",
        " *     the fault code that will be returned in the SAML response",
        " * faultDetail - String",
        " *     the fault detail that will be returned in the SAML response",
        " * logger - Logger instance",
        " *     https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.",
        " *     Corresponding log files will be prefixed with: scripts.<script name>",
        " *",
        " * Throws SAML2Exception (7):",
        " *     for any exceptions occurring in the adapter. The federation process will continue",
        " *",
        " * Class reference:",
        " * (1) idpAdapterScriptHelper - https://backstage.forgerock.com/docs/am/7.2/apidocs/com/sun/identity/saml2/plugins/scripted/IdpAdapterScriptHelper.html.",
        " * (2) HttpServletRequest - https://tomcat.apache.org/tomcat-7.0-doc/servletapi/javax/servlet/http/HttpServletRequest.html.",
        " * (3) HttpServletResponse - https://tomcat.apache.org/tomcat-7.0-doc/servletapi/javax/servlet/http/HttpServletResponse.html.",
        " * (4) AuthnRequest - https://backstage.forgerock.com/docs/am/7.2/apidocs/com/sun/identity/saml2/protocol/AuthnRequest.html.",
        " * (5) Response - https://backstage.forgerock.com/docs/am/7.2/apidocs/com/sun/identity/saml2/protocol/Response.html.",
        " * (6) SSOToken - https://backstage.forgerock.com/docs/am/7.2/apidocs/com/iplanet/sso/SSOToken.html.",
        " * (7) SAML2Exception - https://backstage.forgerock.com/docs/am/7.2/apidocs/com/sun/identity/saml2/common/SAML2Exception.html.",
        " */",
        "",
        "/*",
        " * Template/default script for SAML2 IDP Adapter scripted plugin.",
        " */",
        "",
        "/*",
        " * Available variables for preSingleSignOn:",
        " *     hostedEntityId",
        " *     realm",
        " *     idpAdapterScriptHelper",
        " *     request",
        " *     authnRequest",
        " *     response",
        " *     reqId",
        " *     logger",
        " *",
        " * Return - true if browser redirection is happening after processing, false otherwise. Default to false.",
        " */",
        "function preSingleSignOn () {",
        "      logger.error("Chicago: preSingleSignOn");",
        "    return true;",
        "}",
        "",
        "/*",
        " * Available variables for preAuthentication:",
        " *     hostedEntityId",
        " *     realm",
        " *     idpAdapterScriptHelper",
        " *     request",
        " *     authnRequest",
        " *     response",
        " *     reqId",
        " *     session",
        " *     relayState",
        " *     logger",
        " *",
        " * Return - true if browser redirection is happening after processing, false otherwise. Default to false.",
        " */",
        "function preAuthentication () {",
        "      logger.error("Chicago: preAuthentication");",
        "    return true;",
        "}",
        "",
        "/*",
        " * Available variables for preSendResponse:",
        " *     hostedEntityId",
        " *     realm",
        " *     idpAdapterScriptHelper",
        " *     request",
        " *     authnRequest",
        " *     response",
        " *     reqId",
        " *     session",
        " *     relayState",
        " *     logger",
        " *",
        " * Return - true if browser redirection happened after processing, false otherwise. Default to false.",
        " */",
        "function preSendResponse () {",
        "      logger.error("Chicago: preSendResponse");",
        "      logger.error("Chicago: authnRequest: "+authnRequest);",
        "      response.sendRedirect("https://idc.scheuber.io/am/XUI/?realm=alpha&authIndexType=service&authIndexValue=Dispatcher&ForceAuth=true&goto="+relayState);",
        "    return true;",
        "}",
        "",
        "/*",
        " * Available variables for preSignResponse:",
        " *     hostedEntityId",
        " *     realm",
        " *     idpAdapterScriptHelper",
        " *     request",
        " *     authnRequest",
        " *     session",
        " *     relayState",
        " *     res",
        " *     logger",
        " */",
        "function preSignResponse () {",
        "      logger.error("Chicago: preSignResponse");",
        "}",
        "",
        "/*",
        " * Available variables for preSendFailureResponse:",
        " *     hostedEntityId",
        " *     realm",
        " *     idpAdapterScriptHelper",
        " *     request",
        " *     response",
        " *     faultCode",
        " *     faultDetail",
        " *     logger",
        " */",
        "function preSendFailureResponse () {",
        "      logger.error("Chicago: preSendFailureResponse");",
        "}",
      ],
    },
    "9de3eb62-f131-4fac-a294-7bd170fd4acb": {
      "_id": "9de3eb62-f131-4fac-a294-7bd170fd4acb",
      "context": "POLICY_CONDITION",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Default global script for Scripted Policy Conditions",
      "evaluatorVersion": "1.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Scripted Policy Condition",
      "script": [
        "/*",
        " * Copyright 2015-2023 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "/**",
        " * This is a Policy Condition example script. It demonstrates how to access a user's information,",
        " * use that information in external HTTP calls and make a policy decision based on the outcome.",
        " */",
        "",
        "var userAddress, userIP, resourceHost;",
        "",
        "if (validateAndInitializeParameters()) {",
        "",
        "    var countryFromUserAddress = getCountryFromUserAddress();",
        "    logger.message("Country retrieved from user's address: " + countryFromUserAddress);",
        "    var countryFromUserIP = getCountryFromUserIP();",
        "    logger.message("Country retrieved from user's IP: " + countryFromUserIP);",
        "    var countryFromResourceURI = getCountryFromResourceURI();",
        "    logger.message("Country retrieved from resource URI: " + countryFromResourceURI);",
        "",
        "    if (countryFromUserAddress === countryFromUserIP && countryFromUserAddress === countryFromResourceURI) {",
        "        logger.message("Authorization Succeeded");",
        "        responseAttributes.put("countryOfOrigin", [countryFromUserAddress]);",
        "        authorized = true;",
        "    } else {",
        "        logger.message("Authorization Failed");",
        "        authorized = false;",
        "    }",
        "",
        "} else {",
        "    logger.message("Required parameters not found. Authorization Failed.");",
        "    authorized = false;",
        "}",
        "",
        "/**",
        " * Use the user's address to lookup their country of residence.",
        " *",
        " * @returns {*} The user's country of residence.",
        " */",
        "function getCountryFromUserAddress() {",
        "",
        "    var request = new org.forgerock.http.protocol.Request();",
        "    request.setUri("http://maps.googleapis.com/maps/api/geocode/json?address=" + encodeURIComponent(userAddress));",
        "      request.setMethod("GET");",
        "",
        "    var response = httpClient.send(request).get();",
        "    logResponse(response);",
        "",
        "    var geocode = JSON.parse(response.getEntity().getString());",
        "    var i;",
        "    for (i = 0; i < geocode.results.length; i++) {",
        "        var result = geocode.results[i];",
        "        var j;",
        "        for (j = 0; j < result.address_components.length; i++) {",
        "            if (result.address_components[i].types[0] == "country") {",
        "                return result.address_components[i].long_name;",
        "            }",
        "        }",
        "    }",
        "}",
        "",
        "/**",
        " * Use the user's IP to lookup the country from which the request originated.",
        " *",
        " * @returns {*} The country from which the request originated.",
        " */",
        "function getCountryFromUserIP() {",
        "    var request = new org.forgerock.http.protocol.Request();",
        "    request.setUri("http://ip-api.com/json/" + userIP);",
        "      request.setMethod("GET");",
        "",
        "    var response = httpClient.send(request).get();",
        "    logResponse(response);",
        "",
        "    var result = JSON.parse(response.getEntity().getString());",
        "    if (result) {",
        "        return result.country;",
        "    }",
        "}",
        "",
        "/**",
        " * Use the requested resource's host name to lookup the country where the resource is hosted.",
        " *",
        " * @returns {*} The country in which the resource is hosted.",
        " */",
        "function getCountryFromResourceURI() {",
        "    var request = new org.forgerock.http.protocol.Request();",
        "    request.setUri("http://ip-api.com/json/" + encodeURIComponent(resourceHost));",
        "      request.setMethod("GET");",
        "",
        "    var response = httpClient.send(request).get();",
        "    logResponse(response);",
        "",
        "    var result = JSON.parse(response.getEntity().getString());",
        "    if (result) {",
        "        return result.country;",
        "    }",
        "}",
        "",
        "/**",
        " * Retrieve and validate the variables required to make the external HTTP calls.",
        " *",
        " * @returns {boolean} Will be true if validation was successful.",
        " */",
        "function validateAndInitializeParameters() {",
        "    var userAddressSet = identity.getAttribute("postalAddress");",
        "    if (userAddressSet == null || userAddressSet.isEmpty()) {",
        "        logger.warning("No address specified for user: " + username);",
        "        return false;",
        "    }",
        "    userAddress = userAddressSet.iterator().next();",
        "    logger.message("User address: " + userAddress);",
        "",
        "    if (!environment) {",
        "        logger.warning("No environment parameters specified in the evaluation request.");",
        "        return false;",
        "    }",
        "",
        "    var ipSet = environment.get("IP");",
        "    if (ipSet == null || ipSet.isEmpty()) {",
        "        logger.warning("No IP specified in the evaluation request environment parameters.");",
        "        return false;",
        "    }",
        "    userIP = ipSet.iterator().next();",
        "    logger.message("User IP: " + userIP);",
        "",
        "    if (!resourceURI) {",
        "        logger.warning("No resource URI specified.");",
        "        return false;",
        "    }",
        "    resourceHost = resourceURI.match(/^(.*:\\/\\/)(www\\.)?([A-Za-z0-9\\-\\.]+)(:[0-9]+)?(.*)$/)[3];",
        "    logger.message("Resource host: " + resourceHost);",
        "",
        "    return true;",
        "}",
        "",
        "function logResponse(response) {",
        "    logger.message("User REST Call. Status: " + response.getStatus() + ", Body: " + response.getEntity().getString());",
        "}",
        "",
      ],
    },
    "a7a78773-445b-4eca-bb93-409e86bced81": {
      "_id": "a7a78773-445b-4eca-bb93-409e86bced81",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Normalizes raw profile data from GitHub",
      "evaluatorVersion": "1.0",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "GitHub Profile Normalization",
      "script": [
        "/*",
        " * Copyright 2022 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "return json(object(",
        "        field("id", rawProfile.id),",
        "        field("displayName", rawProfile.name),",
        "        field("username", rawProfile.login)))",
      ],
    },
    "b4f3facb-c754-4e7f-b1c0-f4d46f592126": {
      "_id": "b4f3facb-c754-4e7f-b1c0-f4d46f592126",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "id=dsameuser,ou=user,dc=openam,dc=forgerock,dc=org",
      "creationDate": 1433147666269,
      "default": true,
      "description": "Normalizes raw profile data from LinkedIn",
      "evaluatorVersion": "1.0",
      "language": "GROOVY",
      "lastModifiedBy": "id=dsameuser,ou=user,dc=openam,dc=forgerock,dc=org",
      "lastModifiedDate": 1433147666269,
      "name": "LinkedIn Profile Normalization",
      "script": [
        "/*",
        " * Copyright 2024 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "return json(object(",
        "        field("id", rawProfile.sub),",
        "        field("displayName", rawProfile.name),",
        "        field("givenName", rawProfile.given_name),",
        "        field("familyName", rawProfile.family_name),",
        "        field("photoUrl", rawProfile.picture),",
        "        field("email", rawProfile.email),",
        "        field("emailVerified", rawProfile.email_verified),",
        "        field("username", rawProfile.email)))",
      ],
    },
    "b7259916-71ed-4675-8c5a-de86a80e4aed": {
      "_id": "b7259916-71ed-4675-8c5a-de86a80e4aed",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Check if username has already been collected.",
      "evaluatorVersion": "1.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "FrodoTestScript2",
      "script": [
        "/* Check Username",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Check if username has already been collected.",
        " * Return "known" if yes, "unknown" otherwise.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - known",
        " * - unknown",
        " */",
        "(function () {",
        "    if (null != sharedState.get("username")) {",
        "        outcome = "known";",
        "    }",
        "    else {",
        "        outcome = "unknown";",
        "    }",
        "}());",
      ],
    },
    "bae1d54a-e97d-4997-aa5d-c027f21af82c": {
      "_id": "bae1d54a-e97d-4997-aa5d-c027f21af82c",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Normalizes raw profile data from Facebook",
      "evaluatorVersion": "1.0",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Facebook Profile Normalization",
      "script": [
        "/*",
        " * Copyright 2020 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "return json(object(",
        "        field("id", rawProfile.id),",
        "        field("displayName", rawProfile.name),",
        "        field("givenName", rawProfile.first_name),",
        "        field("familyName", rawProfile.last_name),",
        "        field("photoUrl", rawProfile.picture.data.url),",
        "        field("email", rawProfile.email),",
        "        field("username", rawProfile.email)))",
      ],
    },
    "bb393d07-a121-47e2-9d24-1a1066f39ec0": {
      "_id": "bb393d07-a121-47e2-9d24-1a1066f39ec0",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "My Example Script Using Libraries",
      "evaluatorVersion": "2.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "My Example Script Using Libraries",
      "script": [
        "/**",
        " * Testing library scripts",
        " */",
        "var mylib = require('My Example Library');",
        "var loggers = require('Library Script');",
        "",
        "mylib.add(1);",
        "mylib.logTotal(logger);",
        "mylib.add(3);",
        "mylib.logTotalWithMessage(logger, mylib.MSG);",
        "",
        "outcome = 'true';",
      ],
    },
    "c234ba0b-58a1-4cfd-9567-09edde980745": {
      "_id": "c234ba0b-58a1-4cfd-9567-09edde980745",
      "context": "OAUTH2_ACCESS_TOKEN_MODIFICATION",
      "createdBy": "null",
      "creationDate": 1433147666269,
      "default": true,
      "description": "Internal token modification script",
      "evaluatorVersion": "1.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "ForgeRock Internal: OAuth2 Access Token Modification Script",
      "script": [
        "/*",
        " * Copyright 2023 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "// Script is intentionally empty",
        "",
      ],
    },
    "c4f22465-2368-4e27-8013-e6399974fd48": {
      "_id": "c4f22465-2368-4e27-8013-e6399974fd48",
      "context": "SAML2_IDP_ATTRIBUTE_MAPPER",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Default global script for SAML2 IDP Attribute Mapper",
      "evaluatorVersion": "1.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "SAML2 IDP Attribute Mapper Script",
      "script": [
        "/*",
        " * Copyright 2021-2022 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        " * This script returns a list of SAML Attribute objects for the IDP framework to insert into the generated Assertion.",
        " *",
        " * Defined variables:",
        " * session - SSOToken (1)",
        " *           The single sign-on session.",
        " * hostedEntityId - String (primitive).",
        " *                  The hosted entity ID.",
        " * remoteEntityId - String (primitive).",
        " *                  The remote entity ID.",
        " * realm - String (primitive).",
        " *         The name of the realm the user is authenticating to.",
        " * logger - Always present, the debug logger instance:",
        " *          https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.",
        " *          Corresponding log files will be prefixed with: scripts.SAML2_IDP_ATTRIBUTE_MAPPER",
        " * idpAttributeMapperScriptHelper - IdpAttributeMapperScriptHelper (2)",
        " *                                - An IdpAttributeMapperScriptHelper instance containing methods used for IDP attribute mapping.",
        " *",
        " * Throws SAML2Exception:",
        " *      - on failing to map the IDP attributes.",
        " *",
        " * Return - a list of SAML Attribute (3) objects.",
        " *",
        " * Class reference:",
        " * (1) SSOToken - https://backstage.forgerock.com/docs/am/7/apidocs/com/iplanet/sso/SSOToken.html.",
        " * (2) IdpAttributeMapperScriptHelper - https://backstage.forgerock.com/docs/am/7.2/apidocs/com/sun/identity/saml2/plugins/scripted/IdpAttributeMapperScriptHelper.html.",
        " * (3) Attribute - https://backstage.forgerock.com/docs/am/7/apidocs/com/sun/identity/saml2/assertion/Attribute.html.",
        " */",
        "",
        "/**",
        " * Default SAML2 IDP Attribute Mapper.",
        " */",
        "function getAttributes() {",
        "    var frJava = JavaImporter(",
        "        com.sun.identity.saml2.common.SAML2Exception",
        "    );",
        "",
        "    const debugMethod = "ScriptedIDPAttributeMapper.getAttributes:: ";",
        "",
        "    try {",
        "",
        "        if (!idpAttributeMapperScriptHelper.isSessionValid(session)) {",
        "            logger.error(debugMethod + "Invalid session.");",
        "            return null;",
        "        }",
        "",
        "        var configMap = idpAttributeMapperScriptHelper.getRemoteSPConfigAttributeMap(realm, remoteEntityId);",
        "        logger.message(debugMethod + "Remote SP attribute map = {}", configMap);",
        "        if (configMap == null || configMap.isEmpty()) {",
        "            configMap = idpAttributeMapperScriptHelper.getHostedIDPConfigAttributeMap(realm, hostedEntityId);",
        "            if (configMap == null || configMap.isEmpty()) {",
        "                logger.message(debugMethod + "Configuration map is not defined.");",
        "                return null;",
        "            }",
        "            logger.message(debugMethod + "Hosted IDP attribute map = {}", configMap);",
        "        }",
        "",
        "        var attributes = new java.util.ArrayList();",
        "        var stringValueMap = new java.util.HashSet();",
        "        var binaryValueMap;",
        "        var localAttribute;",
        "",
        "        // Don't try to read the attributes from the datastore if the ignored profile is enabled in this realm.",
        "        if (!idpAttributeMapperScriptHelper.isIgnoredProfile(session, realm)) {",
        "            try {",
        "                // Resolve attributes to be read from the datastore.",
        "                var stringAttributes = new java.util.HashSet();",
        "                var binaryAttributes = new java.util.HashSet();",
        "                var keyIter = configMap.keySet().iterator();",
        "                while (keyIter.hasNext()) {",
        "                    var key = keyIter.next();",
        "                    localAttribute = configMap.get(key);",
        "                    if (!idpAttributeMapperScriptHelper.isStaticAttribute(localAttribute)) {",
        "                        if (idpAttributeMapperScriptHelper.isBinaryAttribute(localAttribute)) {",
        "                            // add it to the list of attributes to treat as being binary",
        "                            binaryAttributes.add(idpAttributeMapperScriptHelper.removeBinaryAttributeFlag(localAttribute));",
        "                        } else {",
        "                            stringAttributes.add(localAttribute);",
        "                        }",
        "                    }",
        "                }",
        "",
        "                if (!stringAttributes.isEmpty()) {",
        "                    stringValueMap = idpAttributeMapperScriptHelper.getAttributes(session, stringAttributes);",
        "                }",
        "                if (!binaryAttributes.isEmpty()) {",
        "                    binaryValueMap = idpAttributeMapperScriptHelper.getBinaryAttributes(session, binaryAttributes);",
        "                }",
        "            } catch (error) {",
        "                logger.error(debugMethod + "Error accessing the datastore. " + error);",
        "                //continue to check in ssotoken.",
        "            }",
        "        }",
        "",
        "        var keyIter = configMap.keySet().iterator();",
        "        while (keyIter.hasNext()) {",
        "            var key = keyIter.next()",
        "            var nameFormat = null;",
        "            var samlAttribute = key;",
        "            localAttribute = configMap.get(key);",
        "            // check if samlAttribute has format nameFormat|samlAttribute",
        "            var samlAttributes = String(new java.lang.String(samlAttribute));",
        "            var tokens = samlAttributes.split('|');",
        "",
        "            if (tokens.length > 1) {",
        "                nameFormat = tokens[0];",
        "                samlAttribute = tokens[1];",
        "            }",
        "",
        "            var attributeValues = new java.util.HashSet();",
        "            if (idpAttributeMapperScriptHelper.isStaticAttribute(localAttribute)) {",
        "                // Remove the static flag before using it as the static value",
        "                localAttribute = idpAttributeMapperScriptHelper.removeStaticAttributeFlag(localAttribute);",
        "                attributeValues = new java.util.HashSet([localAttribute]);",
        "                logger.message(debugMethod + "Adding static value {} for attribute named {}", localAttribute, samlAttribute);",
        "            } else {",
        "                if (idpAttributeMapperScriptHelper.isBinaryAttribute(localAttribute)) {",
        "                    // Remove the flag as not used for lookup",
        "                    localAttribute = idpAttributeMapperScriptHelper.removeBinaryAttributeFlag(localAttribute);",
        "                    attributeValues = idpAttributeMapperScriptHelper.getBinaryAttributeValues(samlAttribute, localAttribute,",
        "                        binaryValueMap);",
        "                } else {",
        "                    if (stringValueMap != null && !stringValueMap.isEmpty()) {",
        "                        attributeValues = stringValueMap.get(localAttribute);",
        "                    } else {",
        "                        logger.message(debugMethod + "{} string value map was empty or null.", localAttribute);",
        "                    }",
        "                }",
        "",
        "                // If all else fails, try to get the value from the users ssoToken",
        "                if (attributeValues == null || attributeValues.isEmpty()) {",
        "                    logger.message(debugMethod + "User profile does not have value for {}, checking SSOToken.", localAttribute);",
        "                    attributeValues = new java.util.HashSet(idpAttributeMapperScriptHelper.getPropertySet(session, localAttribute));",
        "                }",
        "            }",
        "",
        "            if (attributeValues == null || attributeValues.isEmpty()) {",
        "                logger.message(debugMethod + "{} not found in user profile or SSOToken.", localAttribute);",
        "            } else {",
        "                attributes.add(idpAttributeMapperScriptHelper.createSAMLAttribute(samlAttribute, nameFormat, attributeValues));",
        "            }",
        "        }",
        "",
        "        return attributes;",
        "",
        "    } catch (error) {",
        "        logger.error(debugMethod + "Error mapping IDP attributes. " + error);",
        "        throw new frJava.SAML2Exception(error);",
        "    }",
        "}",
        "",
        "getAttributes();",
      ],
    },
    "c735de08-f8f2-4e69-aa4a-2d8d3d438323": {
      "_id": "c735de08-f8f2-4e69-aa4a-2d8d3d438323",
      "context": "OAUTH2_MAY_ACT",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Default global script for OAuth2 May Act",
      "evaluatorVersion": "1.0",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "OAuth2 May Act Script",
      "script": [
        "/*",
        " * Copyright 2020 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/**",
        " * Defined variables:",
        " * token - The access token to be updated. Mutable object, all changes to the access token will be reflected.",
        " * logger - always present, corresponding log files will be prefixed with: scripts.OAUTH2_ACCESS_TOKEN_MODIFICATION.",
        " * scriptName - always present, the display name of the script",
        " * session - present if the request contains the session cookie, the user's session object",
        " * requestProperties - always present, contains a map of request properties:",
        " *                     requestUri - the request URI",
        " *                     realm - the realm that the request relates to",
        " *                     requestParams - a map of the request params and/or posted data. Each value is a list of one or",
        " *                     more properties. Please note that these should be handled in accordance with OWASP best",
        " *                     practices.",
        " * clientProperties - present if the client specified in the request was identified, contains a map of client",
        " *                    properties:",
        " *                    clientId - the client's Uri for the request locale",
        " *                    allowedGrantTypes - list of the allowed grant types (org.forgerock.oauth2.core.GrantType)",
        " *                                        for the client",
        " *                    allowedResponseTypes - list of the allowed response types for the client",
        " *                    allowedScopes - list of the allowed scopes for the client",
        " *                    customProperties - A map of the custom properties of the client.",
        " *                                       Lists or maps will be included as sub-maps, e.g:",
        " *                                       testMap[Key1]=Value1 will be returned as testmap -> Key1 -> Value1",
        " *",
        " * identity - always present, the identity of the resource owner",
        " * scopes - always present, the requested scopes",
        " */",
        "/*",
        "import org.forgerock.json.JsonValue",
        "",
        "token.setMayAct(",
        "    JsonValue.json(JsonValue.object(",
        "        JsonValue.field("client_id", "myClient"), ",
        "        JsonValue.field("sub", "(usr!myActor)"))))",
        "*/",
      ],
    },
    "c827d2b4-3608-4693-868e-bbcf86bd87c7": {
      "_id": "c827d2b4-3608-4693-868e-bbcf86bd87c7",
      "context": "AUTHENTICATION_CLIENT_SIDE",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Default global script for client side Scripted Authentication Module",
      "evaluatorVersion": "1.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Scripted Module - Client Side",
      "script": [
        "/*",
        " * Copyright 2016-2023 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "/* Default Authentication client side script to use as a template for new scripts */",
        "",
      ],
    },
    "c9cb4b1e-1cd3-4e5b-8f56-140f83ba9f6d": {
      "_id": "c9cb4b1e-1cd3-4e5b-8f56-140f83ba9f6d",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Check if username has already been collected.",
      "evaluatorVersion": "1.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "FrodoTestScript1",
      "script": [
        "/* Check Username",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Check if username has already been collected.",
        " * Return "known" if yes, "unknown" otherwise.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - known",
        " * - unknown",
        " */",
        "(function () {",
        "    if (null != sharedState.get("username")) {",
        "        outcome = "known";",
        "    }",
        "    else {",
        "        outcome = "unknown";",
        "    }",
        "}());",
      ],
    },
    "cf3515f0-8278-4ee3-a530-1bad7424c416": {
      "_id": "cf3515f0-8278-4ee3-a530-1bad7424c416",
      "context": "OIDC_CLAIMS",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Default alpha realm script for OIDC claims",
      "evaluatorVersion": "1.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Alpha OIDC Claims Script",
      "script": [
        "/*",
        " * Copyright 2014-2021 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        " * This script computes claim values returned in ID tokens and/or at the UserInfo Endpoint.",
        " * The claim values are computed for:",
        " * the claims derived from the requested scopes,",
        " * the claims provided by the authorization server,",
        " * and the claims requested by the client via the claims parameter.",
        " *",
        " * In the CONFIGURATION AND CUSTOMIZATION section, you can",
        " * define the scope-to-claims mapping, and",
        " * assign to each claim a resolver function that will compute the claim value.",
        " *",
        " * Defined variables (class references are provided below):",
        " * scopes - Set<String> (6).",
        " *          Always present, the requested scopes.",
        " * claims - Map<String, Object> (5).",
        " *          Always present, default server provided claims.",
        " * claimObjects - List<Claim> (7, 2).",
        " *                Always present, the default server provided claims.",
        " * requestedClaims - Map<String, Set<String>> (5).",
        " *                   Always present, not empty if the request contains the claims parameter and the server has enabled",
        " *                   claims_parameter_supported. A map of the requested claims to possible values, otherwise empty;",
        " *                   requested claims with no requested values will have a key but no value in the map. A key with",
        " *                   a single value in its Set (6) indicates that this is the only value that should be returned.",
        " * requestedTypedClaims - List<Claim> (7, 2).",
        " *                        Always present, the requested claims.",
        " *                        Requested claims with no requested values will have a claim with no values.",
        " *                        A claim with a single value indicates this is the only value that should be returned.",
        " * claimsLocales - List<String> (7).",
        " *                 The values from the 'claims_locales' parameter.",
        " *                 See https://openid.net/specs/openid-connect-core-1_0.html#ClaimsLanguagesAndScripts for the OIDC specification details.",
        " * requestProperties - Unmodifiable Map (5).",
        " *                     Always present, contains a map of request properties:",
        " *                     requestUri - The request URI.",
        " *                     realm - The realm that the request relates to.",
        " *                     requestParams - A map of the request params and/or posted data.",
        " *                                     Each value is a list of one or more properties.",
        " *                                     Please note that these should be handled in accordance with OWASP best practices:",
        " *                                     https://owasp.org/www-community/vulnerabilities/Unsafe_use_of_Reflection.",
        " * clientProperties - Unmodifiable Map (5).",
        " *                    Present if the client specified in the request was identified, contains a map of client properties:",
        " *                    clientId - The client's URI for the request locale.",
        " *                    allowedGrantTypes - List of the allowed grant types (org.forgerock.oauth2.core.GrantType) for the client.",
        " *                    allowedResponseTypes - List of the allowed response types for the client.",
        " *                    allowedScopes - List of the allowed scopes for the client.",
        " *                    customProperties - A map of the custom properties of the client.",
        " *                                       Lists or maps will be included as sub-maps; for example:",
        " *                                       customMap[Key1]=Value1 will be returned as customMap -> Key1 -> Value1.",
        " *                                       To add custom properties to a client, update the Custom Properties field",
        " *                                       in AM Console > Realm Name > Applications > OAuth 2.0 > Clients > Client ID > Advanced.",
        " * identity - AMIdentity (3).",
        " *            Always present, the identity of the resource owner.",
        " * session - SSOToken (4).",
        " *           Present if the request contains the session cookie, the user's session object.",
        " * scriptName - String (primitive).",
        " *              Always present, the display name of the script.",
        " * logger - Always present, the "OAuth2Provider" debug logger instance:",
        " *          https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.",
        " *          Corresponding files will be prefixed with: scripts.OIDC_CLAIMS.",
        " * httpClient - HTTP Client (8).",
        " *              Always present, the HTTP Client instance:",
        " *              https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-http-client.html#scripting-api-global-http-client.",
        " *              In order to use the client, you may need to add",
        " *              org.forgerock.http.Client,",
        " *              org.forgerock.http.protocol.*,",
        " *              and org.forgerock.util.promise.PromiseImpl",
        " *              to the allowed Java classes in the scripting engine configuration, as described in:",
        " *              https://backstage.forgerock.com/docs/am/7/scripting-guide/script-engine-security.html",
        " *",
        " * Return - a new UserInfoClaims(Map<String, Object> values, Map<String, List<String>> compositeScopes) (1) object.",
        " *          The result of the last statement in the script is returned to the server.",
        " *          Currently, the Immediately Invoked Function Expression (also known as Self-Executing Anonymous Function)",
        " *          is the last (and only) statement in this script, and its return value will become the script result.",
        " *          Do not use "return variable" statement outside of a function definition.",
        " *          See RESULTS section for additional details.",
        " *",
        " * Class reference:",
        " * (1) UserInfoClaims - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/oauth2/core/UserInfoClaims.html.",
        " * (2) Claim - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html).",
        " *         An instance of org.forgerock.openidconnect.Claim has methods to access",
        " *         the claim name, requested values, locale, and whether the claim is essential.",
        " * (3) AMIdentity - https://backstage.forgerock.com/docs/am/7/apidocs/com/sun/identity/idm/AMIdentity.html.",
        " * (4) SSOToken - https://backstage.forgerock.com/docs/am/7/apidocs/com/iplanet/sso/SSOToken.html.",
        " * (5) Map - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashMap.html,",
        " *           or https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/LinkedHashMap.html.",
        " * (6) Set - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashSet.html.",
        " * (7) List - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/ArrayList.html.",
        " * (8) Client - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/http/Client.html.",
        "*/",
        "",
        "(function () {",
        "    // SETUP",
        "",
        "    /**",
        "     * Claim processing utilities.",
        "     * An object that contains reusable functions for processing claims.",
        "     * @see CLAIM PROCESSING UTILITIES section for details.",
        "     */",
        "    var utils = getUtils();",
        "",
        "    // CONFIGURATION AND CUSTOMIZATION",
        "",
        "    /**",
        "     * OAuth 2.0 scope values (scopes) can be used by the Client to request OIDC claims.",
        "     *",
        "     * Call this configuration method, and pass in as the first argument",
        "     * an object that maps a scope value to an array of claim names",
        "     * to specify which claims need to be processed and returned for the requested scopes.",
        "     * @see {@link https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims}",
        "     * for the scope values that could be used to request claims as defined in the OIDC specification.",
        "     *",
        "     * Below, find a default configuration that is expected to work in the current environment.",
        "     *",
        "     * CUSTOMIZATION",
        "     * You can choose the claim names returned for a scope.",
        "     */",
        "    utils.setScopeClaimsMap({",
        "        profile: [",
        "            'name',",
        "            'family_name',",
        "            'given_name',",
        "            'zoneinfo',",
        "            'locale'",
        "        ],",
        "        email: ['email'],",
        "        address: ['address'],",
        "        phone: ['phone_number']",
        "    });",
        "",
        "    /**",
        "     * In this script, each claim",
        "     * derived from the requested scopes,",
        "     * provided by the authorization server, and",
        "     * requested by the client via the claims parameter",
        "     * will be processed by a function associated with the claim name.",
        "     *",
        "     * Call this configuration method, and pass in as the first argument",
        "     * an object that maps a claim name to a resolver function,",
        "     * which will be automatically executed for each claim processed by the script.",
        "     *",
        "     * The claim resolver function will receive the requested claim information",
        "     * in an instance of org.forgerock.openidconnect.Claim as the first argument.",
        "     * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html}",
        "     * for details on the Claim class.",
        "     *",
        "     * If the claim resolver function returns a value,",
        "     * other than undefined or null,",
        "     * the claim will be included in the script's results.",
        "     *",
        "     * The Claim instance provides methods to check",
        "     * what the name of the claim is,",
        "     * which values the claim request contains,",
        "     * whether the claim is essential, and",
        "     * which locale the claim is associated with.",
        "     * The resolver function can consider this information when computing and returning the claim value.",
        "     *",
        "     * Below, find a default configuration that is expected to work in the current environment.",
        "     * A reusable function, utils.getUserProfileClaimResolver(String attribute-name),",
        "     * is called to return a claim resolver function based on a user profile attribute.",
        "     * @see CLAIM RESOLVERS section for the implementation details and examples.",
        "     * For the address claim, an example of a claim resolver that uses another claim resolver is provided.",
        "     *",
        "     * CUSTOMIZATION",
        "     * You can reuse the predefined utils methods with your custom arguments.",
        "     * You can also specify a custom resolver function for a claim name,",
        "     * that will compute and return the claim value—as shown in the commented out example below.",
        "     */",
        "    utils.setClaimResolvers({",
        "        /*",
        "        // An example of a simple claim resolver function that is defined for a claim",
        "        // directly in the configuration object:",
        "        custom-claim-name: function (requestedClaim) {",
        "            // In this case, initially, the claim value comes straight from a user profile attribute value:",
        "            var claimValue = identity.getAttribute('custom-attribute-name').toArray()[0]",
        "",
        "            // Optionally, provide additional logic for processing (filtering, formatting, etc.) the claim value.",
        "            // You can use:",
        "            // requestedClaim.getName()",
        "            // requestedClaim.getValues()",
        "            // requestedClaim.getLocale()",
        "            // requestedClaim.isEssential()",
        "",
        "            return claimValue",
        "        },",
        "        */",
        "        /**",
        "         * The use of utils.getUserProfileClaimResolver shows how",
        "         * an argument passed to a function that returns a claim resolver",
        "         * becomes available to the resolver function (via its lexical context).",
        "         */",
        "        name: utils.getUserProfileClaimResolver('cn'),",
        "        family_name: utils.getUserProfileClaimResolver('sn'),",
        "        given_name: utils.getUserProfileClaimResolver('givenname'),",
        "        zoneinfo: utils.getUserProfileClaimResolver('preferredtimezone'),",
        "        locale: utils.getUserProfileClaimResolver('preferredlocale'),",
        "        email: utils.getUserProfileClaimResolver('mail'),",
        "        address: utils.getAddressClaimResolver(",
        "            /**",
        "             * The passed in user profile claim resolver function",
        "             * can be used by the address claim resolver function",
        "             * to obtain the claim value to be formatted as per the OIDC specification:",
        "             * @see https://openid.net/specs/openid-connect-core-1_0.html#AddressClaim.",
        "             */",
        "            utils.getUserProfileClaimResolver('postaladdress')",
        "        ),",
        "        phone_number: utils.getUserProfileClaimResolver('telephonenumber')",
        "    });",
        "",
        "    // CLAIM PROCESSING UTILITIES",
        "",
        "    /**",
        "     * @returns {object} An object that contains reusable claim processing utilities.",
        "     * @see PUBLIC METHODS section and the return statement for the list of exported functions.",
        "     */",
        "    function getUtils () {",
        "        // IMPORT JAVA",
        "",
        "        /**",
        "         * Provides Java scripting functionality.",
        "         * @see {@link https://developer.mozilla.org/en-US/docs/Mozilla/Projects/Rhino/Scripting_Java#javaimporter_constructor}.",
        "         */",
        "        var frJava = JavaImporter(",
        "            org.forgerock.oauth2.core.exceptions.InvalidRequestException,",
        "            org.forgerock.oauth2.core.UserInfoClaims,",
        "            org.forgerock.openidconnect.Claim,",
        "",
        "            java.util.LinkedHashMap,",
        "            java.util.ArrayList",
        "        );",
        "",
        "        // SET UP CONFIGURATION",
        "",
        "        /**",
        "         * Placeholder for a configuration option that contains",
        "         * an object that maps the supported scope values (scopes)",
        "         * and the corresponding claim names for each scope value.",
        "         */",
        "        var scopeClaimsMap;",
        "",
        "        /**",
        "         * Placeholder for a configuration option that contains",
        "         * an object that maps the supported claim names",
        "         * and the resolver functions returning the claim value.",
        "         */",
        "        var claimResolvers;",
        "",
        "        /**",
        "         * A (public) method that accepts an object that maps the supported scopes and the corresponding claim names,",
        "         * and assigns it to a (private) variable that serves as a configuration option.",
        "         * @param {object} params - An object that maps each supported scope value to an array of claim names,",
        "         * in order to specify which claims need to be processed for the requested scopes.",
        "         * @see {@link https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims} for details.",
        "         * @param {string[]} [params.profile] - An array of claim names to be returned if the profile scope is requested.",
        "         * @param {string[]} [params.email] - An array of claim names to be returned if the email scope is requested.",
        "         * @param {string[]} [params.address] - An array of claim names to be returned if the address scope is requested.",
        "         * @param {string[]} [params.phone] - An array of claim names to be returned if the phone scope is requested.",
        "         * @returns {undefined}",
        "         */",
        "        function setScopeClaimsMap(params) {",
        "            scopeClaimsMap = params;",
        "        }",
        "",
        "        /**",
        "         * A (public) method that accepts an object that maps the supported claim names",
        "         * and the resolver functions returning the claim value,",
        "         * and assigns it to a (private) variable that serves as a configuration option.",
        "         * @param {object} params - An object that maps",
        "         * each supported claim name to a function that computes and returns the claim value.",
        "         */",
        "        function setClaimResolvers(params) {",
        "            claimResolvers = params;",
        "        }",
        "",
        "        // CLAIM RESOLVERS",
        "",
        "        /**",
        "         * Claim resolvers are functions that return a claim value.",
        "         * @param {*}",
        "         * @returns {*}",
        "         */",
        "",
        "        /**",
        "         * Defines a claim resolver based on a user profile attribute.",
        "         * @param {string} attributeName - Name of the user profile attribute.",
        "         * @returns {function} A function that will determine the claim value",
        "         * based on the user profile attribute and the (requested) claim properties.",
        "         */",
        "        function getUserProfileClaimResolver (attributeName) {",
        "            /**",
        "             * Resolves a claim with a user profile attribute value.",
        "             * Returns undefined if the identity attribute is not populated,",
        "             * OR if the claim has requested values that do not contain the identity attribute value.",
        "             * ATTENTION: the aforementioned comparison is case-sensitive.",
        "             * @param {org.forgerock.openidconnect.Claim} claim",
        "             * An object that provides methods to obtain information/requirements associated with a claim.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "             * @returns {string|HashSet|undefined}",
        "             */",
        "            function resolveClaim(claim) {",
        "                var userProfileValue;",
        "",
        "                if (identity) {",
        "                    userProfileValue = getClaimValueFromSet(claim, identity.getAttribute(attributeName));",
        "",
        "                    if (userProfileValue && !userProfileValue.isEmpty()) {",
        "                        if (!claim.getValues() || claim.getValues().isEmpty() || claim.getValues().contains(userProfileValue)) {",
        "                            return userProfileValue;",
        "                        }",
        "                    }",
        "                }",
        "            }",
        "",
        "            return resolveClaim;",
        "        }",
        "",
        "        /**",
        "         * Returns an address claim resolver based on a claim value obtained with another claim resolver.",
        "         * @param {function} resolveClaim - A function that returns a claim value.",
        "         * @returns {function} A function that will accept a claim as an argument,",
        "         * run the claim resolver function for the claim and obtain the claim value,",
        "         * and apply additional formatting to the value before returning it.",
        "         */",
        "        function getAddressClaimResolver (resolveClaim) {",
        "            /**",
        "             * Creates an address claim object from a value returned by a claim resolver,",
        "             * and returns the address claim object as the claim value.",
        "             * @see {@link https://openid.net/specs/openid-connect-core-1_0.html#AddressClaim}.",
        "             * The claim value is obtained with a claim resolving function available from the closure.",
        "             * @param {org.forgerock.openidconnect.Claim} claim",
        "             * An object that provides methods to obtain information/requirements associated with a claim.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "             * @returns {java.util.LinkedHashMap|undefined} The address claim object created from a claim value.",
        "             */",
        "            function resolveAddressClaim(claim) {",
        "                var claimValue = resolveClaim(claim);",
        "                var addressObject;",
        "",
        "                if (isClaimValueValid(claimValue)) {",
        "                    addressObject = new frJava.LinkedHashMap();",
        "",
        "                    addressObject.put('formatted', claimValue);",
        "",
        "                    return addressObject;",
        "                }",
        "            }",
        "",
        "            return resolveAddressClaim;",
        "        }",
        "",
        "        /**",
        "         * Returns an essential claim resolver based on a claim value obtained with another claim resolver.",
        "         * @param {function} resolveClaim - A function that returns a claim value.",
        "         * @returns {function} A function that will accept a claim as an argument,",
        "         * run the claim resolver function for the claim and obtain the claim value,",
        "         * and apply additional logic for essential claims.",
        "         */",
        "        function getEssentialClaimResolver (resolveClaim) {",
        "            /**",
        "             * Returns a claim value or throws an error.",
        "             * The claim value is obtained with a claim resolving function available from the closure.",
        "             * Throws an exception if the claim is essential and no value is returned for the claim.",
        "             *",
        "             * Use of this resolver is optional.",
        "             * @see {@link https://openid.net/specs/openid-connect-core-1_0.html#IndividualClaimsRequests} stating:",
        "             * "Note that even if the Claims are not available because the End-User did not authorize their release or they are not present,",
        "             * the Authorization Server MUST NOT generate an error when Claims are not returned, whether they are Essential or Voluntary,",
        "             * unless otherwise specified in the description of the specific claim."",
        "             *",
        "             * @param {org.forgerock.openidconnect.Claim} claim",
        "             * An object that provides methods to obtain information/requirements associated with a claim.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "             * @returns {*}",
        "             * @throws {org.forgerock.oauth2.core.exceptions.InvalidRequestException}",
        "             */",
        "            function resolveEssentialClaim(claim) {",
        "                var claimValue = resolveClaim(claim);",
        "",
        "                if (claim.isEssential() && !isClaimValueValid(claimValue)) {",
        "                    throw new frJava.InvalidRequestException('Could not provide value for essential claim: ' + claim.getName());",
        "                }",
        "",
        "                return claimValue;",
        "            }",
        "",
        "            return resolveEssentialClaim;",
        "        }",
        "",
        "        /**",
        "         * Provides default resolution for a claim.",
        "         * Use it if a claim-specific resolver is not defined in the configuration.",
        "         * @param {org.forgerock.openidconnect.Claim} claim",
        "         * An object that provides methods to obtain information/requirements associated with a claim.",
        "         * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "         * @returns {*} A single value associated with this claim.",
        "         */",
        "        function resolveAnyClaim (claim) {",
        "            if (claim.getValues().size() === 1) {",
        "                return claim.getValues().toArray()[0];",
        "            }",
        "        }",
        "",
        "        // UTILITIES",
        "",
        "        /**",
        "         * Returns claim value from a set.",
        "         * If the set contains a single value, returns the value.",
        "         * If the set contains multiple values, returns the set.",
        "         * Otherwise, returns undefined.",
        "         *",
        "         * @param {org.forgerock.openidconnect.Claim} claim",
        "         * An object that provides methods to obtain information/requirements associated with a claim.",
        "         * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "         * @param {java.util.HashSet} set The set—for example, a user profile attribute value.",
        "         * @returns {string|java.util.HashSet|undefined}",
        "         */",
        "        function getClaimValueFromSet (claim, set) {",
        "            if (set && set.size()) {",
        "                if (set.size() === 1) {",
        "                    return set.toArray()[0];",
        "                } else {",
        "                    return set;",
        "                }",
        "            } else if (logger.warningEnabled()) {",
        "                logger.warning('OIDC Claims script. Got an empty set for claim: ' + claim.getName());",
        "            }",
        "        }",
        "",
        "        function isClaimValueValid (claimValue) {",
        "            if (typeof claimValue === 'undefined' || claimValue === null) {",
        "                return false;",
        "            }",
        "",
        "            return true;",
        "        }",
        "",
        "        // CLAIM PROCESSING",
        "",
        "        /**",
        "         * Constructs and returns an object populated with the computed claim values",
        "         * and the requested scopes mapped to the claim names.",
        "         * @returns {org.forgerock.oauth2.core.UserInfoClaims} The object to be returned to the authorization server.",
        "         * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/oauth2/core/UserInfoClaims.html}.",
        "         * @see RESULTS section for the use of this function.",
        "         */",
        "        function getUserInfoClaims () {",
        "            return new frJava.UserInfoClaims(getComputedClaims(), getCompositeScopes());",
        "        }",
        "",
        "        /**",
        "         * Creates a map of (requested) claim names populated with the computed claim values.",
        "         * @returns {java.util.LinkedHashMap}",
        "         * A map of the requested claim names and the corresponding claim values.",
        "         */",
        "        function getComputedClaims () {",
        "            /**",
        "             * Creates a complete list of claim objects from:",
        "             * the claims derived from the scopes,",
        "             * the claims provided by the authorization server,",
        "             * and the claims requested by the client.",
        "             * @returns {java.util.ArrayList}",
        "             * Returns a complete list of org.forgerock.openidconnect.Claim objects available to the script.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for the claim object details.",
        "             */",
        "            function getClaims() {",
        "                /**",
        "                 * Returns a list of claim objects for the requested scopes.",
        "                 * Uses the scopeClaimsMap configuration option to derive the claim names;",
        "                 * no other properties of a claim derived from a scope are populated.",
        "                 * @returns {java.util.ArrayList}",
        "                 * A list of org.forgerock.openidconnect.Claim objects derived from the requested scopes.",
        "                 * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for the claim object details.",
        "                 */",
        "                function convertScopeToClaims() {",
        "                    var claims = new frJava.ArrayList();",
        "",
        "                    scopes.toArray().forEach(function (scope) {",
        "                        if (String(scope) !== 'openid' && scopeClaimsMap[scope]) {",
        "                            scopeClaimsMap[scope].forEach(function (claimName) {",
        "                                claims.add(new frJava.Claim(claimName));",
        "                            });",
        "                        }",
        "                    });",
        "",
        "                    return claims;",
        "                }",
        "",
        "                var claims = new frJava.ArrayList();",
        "",
        "                claims.addAll(convertScopeToClaims());",
        "                claims.addAll(claimObjects);",
        "                claims.addAll(requestedTypedClaims);",
        "",
        "                return claims;",
        "            }",
        "",
        "            /**",
        "             * Computes and returns a claim value.",
        "             * To obtain the claim value, uses the resolver function specified for the claim in the claimResolvers configuration object.",
        "             * @see claimResolvers",
        "             * If no resolver function is found, uses the default claim resolver function.",
        "             *",
        "             * @param {org.forgerock.openidconnect.Claim} claim",
        "             * An object that provides methods to obtain information/requirements associated with a claim.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "             * @returns {*} Claim value.",
        "             * @throws {org.forgerock.oauth2.core.exceptions.InvalidRequestException}",
        "             * Rethrows this exception if a claim resolver throws it.",
        "             * You can throw org.forgerock.oauth2.core.exceptions.InvalidRequestException from your custom claim resolver",
        "             * if you want to terminate the claim processing.",
        "             */",
        "            function computeClaim(claim) {",
        "                var resolveClaim;",
        "                var message;",
        "",
        "                try {",
        "                    resolveClaim = claimResolvers[claim.getName()] || resolveAnyClaim;",
        "",
        "                    return resolveClaim(claim);",
        "                } catch (e) {",
        "                    message = 'OIDC Claims script exception. Unable to resolve OIDC Claim. ' + e;",
        "",
        "                    if (String(e).indexOf('org.forgerock.oauth2.core.exceptions.InvalidRequestException') !== -1) {",
        "                        throw e;",
        "                    }",
        "",
        "                    if (logger.warningEnabled()) {",
        "                        logger.warning(message);",
        "                    }",
        "                }",
        "            }",
        "",
        "            var computedClaims = new frJava.LinkedHashMap();",
        "",
        "            getClaims().toArray().forEach(function (claim) {",
        "                var claimValue = computeClaim(claim);",
        "",
        "                if (isClaimValueValid(claimValue)) {",
        "                    computedClaims.put(claim.getName(), claimValue);",
        "                } else {",
        "                    /**",
        "                     * If a claim has been processed, but appears in the list again,",
        "                     * and its value cannot be computed under the new conditions,",
        "                     * the claim is removed from the final result.",
        "                     *",
        "                     * For example, a claim could be mapped to a scope and found in the user profile,",
        "                     * but also requested by the client with required values that don't match the computed one.",
        "                     * @see {link https://openid.net/specs/openid-connect-core-1_0.html#IndividualClaimsRequests}.",
        "                     * for the relevant OIDC specification details.",
        "                     */",
        "                    computedClaims.remove(claim.getName());",
        "                }",
        "            });",
        "",
        "            return computedClaims;",
        "        }",
        "",
        "        /**",
        "         * Creates a map of requested scopes and the corresponding claim names.",
        "         * @returns {java.util.LinkedHashMap}",
        "         */",
        "        function getCompositeScopes () {",
        "            var compositeScopes = new frJava.LinkedHashMap();",
        "",
        "            scopes.toArray().forEach(function (scope) {",
        "                var scopeClaims = new frJava.ArrayList();",
        "",
        "                if (scopeClaimsMap[scope]) {",
        "                    scopeClaimsMap[scope].forEach(function (claimName) {",
        "                        scopeClaims.add(claimName);",
        "                    });",
        "                }",
        "",
        "                if (scopeClaims.size()) {",
        "                    compositeScopes.put(scope, scopeClaims);",
        "                }",
        "            });",
        "",
        "            return compositeScopes;",
        "        }",
        "",
        "        // PUBLIC METHODS",
        "",
        "        return {",
        "            setScopeClaimsMap: setScopeClaimsMap,",
        "            setClaimResolvers: setClaimResolvers,",
        "            getUserProfileClaimResolver: getUserProfileClaimResolver,",
        "            getAddressClaimResolver: getAddressClaimResolver,",
        "            getEssentialClaimResolver: getEssentialClaimResolver,",
        "            getUserInfoClaims: getUserInfoClaims",
        "        };",
        "    }",
        "",
        "    // RESULTS",
        "",
        "    /**",
        "     * This script returns an instance of the org.forgerock.oauth2.core.UserInfoClaims class",
        "     * populated with the computed claim values and",
        "     * the requested scopes mapped to the claim names.",
        "     * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/oauth2/core/UserInfoClaims.html}.",
        "     *",
        "     * Assigning it to a variable gives you an opportunity",
        "     * to log the content of the returned value during development.",
        "     */",
        "    var userInfoClaims = utils.getUserInfoClaims();",
        "",
        "    /*",
        "    logger.error(scriptName + ' results:')",
        "    logger.error('Values: ' + userInfoClaims.getValues())",
        "    logger.error('Scopes: ' + userInfoClaims.getCompositeScopes())",
        "    */",
        "",
        "    return userInfoClaims;",
        "}());",
        "",
      ],
    },
    "d22f9a0c-426a-4466-b95e-d0f125b0d5fa": {
      "_id": "d22f9a0c-426a-4466-b95e-d0f125b0d5fa",
      "context": "OAUTH2_ACCESS_TOKEN_MODIFICATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Default global script for OAuth2 Access Token Modification",
      "evaluatorVersion": "1.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "OAuth2 Access Token Modification Script",
      "script": [
        "/*",
        " * Copyright 2019-2023 ForgeRock AS. All Rights Reserved.",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        " * This script lets you modify information associated with an OAuth2 access token",
        " * with methods provided by the AccessToken (1) interface.",
        " * The changes made to OAuth2 access tokens will directly impact the size of the CTS tokens,",
        " * and, similarly, the size of the JWTs if client-based OAuth2 tokens are utilized.",
        " * When adding/updating fields make sure that the token size remains within client/user-agent limits.",
        " *",
        " * Defined variables:",
        " * accessToken - AccessToken (1).",
        " *               The access token to be updated.",
        " *               Mutable object, all changes to the access token will be reflected.",
        " * scopes - Set<String> (6).",
        " *          Always present, the requested scopes.",
        " * requestProperties - Unmodifiable Map (5).",
        " *                     Always present, contains a map of request properties:",
        " *                     requestUri - The request URI.",
        " *                     realm - The realm that the request relates to.",
        " *                     requestParams - A map of the request params and/or posted data.",
        " *                                     Each value is a list of one or more properties.",
        " *                                     Please note that these should be handled in accordance with OWASP best practices:",
        " *                                     https://owasp.org/www-community/vulnerabilities/Unsafe_use_of_Reflection.",
        " * clientProperties - Unmodifiable Map (5).",
        " *                    Present if the client specified in the request was identified, contains a map of client properties:",
        " *                    clientId - The client's URI for the request locale.",
        " *                    allowedGrantTypes - List of the allowed grant types (org.forgerock.oauth2.core.GrantType) for the client.",
        " *                    allowedResponseTypes - List of the allowed response types for the client.",
        " *                    allowedScopes - List of the allowed scopes for the client.",
        " *                    customProperties - A map of the custom properties of the client.",
        " *                                       Lists or maps will be included as sub-maps; for example:",
        " *                                       customMap[Key1]=Value1 will be returned as customMap -> Key1 -> Value1.",
        " *                                       To add custom properties to a client, update the Custom Properties field",
        " *                                       in AM Console > Realm Name > Applications > OAuth 2.0 > Clients > Client ID > Advanced.",
        " * identity - AMIdentity (3).",
        " *            Always present, the identity of the resource owner.",
        " * session - SSOToken (4).",
        " *           Present if the request contains the session cookie, the user's session object.",
        " * scriptName - String (primitive).",
        " *              Always present, the display name of the script.",
        " * logger - Always present, the "OAuth2Provider" debug logger instance:",
        " *          https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.",
        " *          Corresponding log files will be prefixed with: scripts.OAUTH2_ACCESS_TOKEN_MODIFICATION.",
        " * httpClient - HTTP Client (8).",
        " *              Always present, the HTTP Client instance:",
        " *              https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-http-client.html#scripting-api-global-http-client.",
        " *",
        " * Return - no value is expected, changes shall be made to the accessToken parameter directly.",
        " *",
        " * Class reference:",
        " * (1) AccessToken - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/oauth2/core/AccessToken.html.",
        " * (3) AMIdentity - https://backstage.forgerock.com/docs/am/7/apidocs/com/sun/identity/idm/AMIdentity.html.",
        " * (4) SSOToken - https://backstage.forgerock.com/docs/am/7/apidocs/com/iplanet/sso/SSOToken.html.",
        " * (5) Map - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashMap.html,",
        " *           or https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/LinkedHashMap.html.",
        " * (6) Set - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashSet.html.",
        " * (8) Client - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/http/Client.html.",
        " */",
        "",
        "/* EXAMPLE",
        "(function () {",
        "    var frJava = JavaImporter(",
        "        org.forgerock.http.protocol.Request,",
        "        org.forgerock.http.protocol.Response",
        "    );",
        "",
        "    // Always includes this field in the token.",
        "    accessToken.setField('key1', 'value1');",
        "",
        "    // Receives and adds to the access token additional values by performing a REST call to an external service.",
        "    // WARNING: Below, you will find a reference to a third-party site, which is provided only as an example.",
        "    var uri = 'https://jsonplaceholder.typicode.com/posts';",
        "",
        "    try {",
        "        var request = new frJava.Request();",
        "",
        "        // You can chain methods that return the request object.",
        "        request.setUri(uri)",
        "            .setMethod('POST')",
        "            .setEntity(JSON.stringify({",
        "                updatedFields: {",
        "                    key2: 'value2',",
        "                    key3: 'value3'",
        "                }",
        "            }));",
        "",
        "        // You can call a method when chaining is not possible.",
        "        request.getHeaders().add('Content-Type', 'application/json; charset=UTF-8');",
        "",
        "        // Sends the request and receives the response.",
        "        var response = httpClient.send(request).getOrThrow();",
        "",
        "        // Checks if the response status is as expected.",
        "        if (response.getStatus() === org.forgerock.http.protocol.Status.CREATED) {",
        "            var result = JSON.parse(response.getEntity().getString());",
        "",
        "            // Set multiple token fields at once.",
        "            accessToken.setFields(result.updatedFields);",
        "        } else {",
        "            logger.error('Unable to obtain access token modifications. Status: ' + response.getStatus() + '. Content: ' + response.getEntity().getString());",
        "        }",
        "    } catch (e) {",
        "        logger.error('The request processing was interrupted. ' + e);",
        "",
        "        // The access token request fails with the HTTP 500 error in this case.",
        "        throw ('Unable to obtain response from: ' + uri);",
        "    }",
        "",
        "    // Adds new fields containing identity attribute values to the access token.",
        "    accessToken.setField('mail', identity.getAttribute('mail'));",
        "    accessToken.setField('phone', identity.getAttribute('telephoneNumber').toArray()[0]);",
        "",
        "    // Adds new fields containing the session property values.",
        "    // NOTE: session may not be available for non-interactive authorization grants.",
        "    if (session) {",
        "        try {",
        "            accessToken.setField('ipAddress', session.getProperty('Host'));",
        "        } catch (e) {",
        "            logger.error('Unable to retrieve session property value. ' + e);",
        "        }",
        "    }",
        "",
        "    // Removes a native field from the token entry, that was set by AM.",
        "    // WARNING: removing native fields from the token may result in loss of functionality.",
        "    // accessToken.removeTokenName()",
        "",
        "    // No return value is expected. Let it be undefined.",
        "}());",
        "*/",
        "",
      ],
    },
    "d2dc1ae7-ca1b-4ce4-81b8-5d58dfba73b1": {
      "_id": "d2dc1ae7-ca1b-4ce4-81b8-5d58dfba73b1",
      "context": "SAML2_IDP_ADAPTER",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Always redirect browser pre-auth",
      "evaluatorVersion": "1.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Saml2 IDP Adapter Always Auth - imported (1)",
      "script": [
        "/*",
        " * Copyright 2021-2022 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        " * The script has these top level functions that could be executed during a SAML2 flow.",
        " *      - preSingleSignOn",
        " *      - preAuthentication",
        " *      - preSendResponse",
        " *      - preSignResponse",
        " *      - preSendFailureResponse",
        " *",
        " * Please see the javadoc for the interface definition and more information about these methods.",
        " * https://backstage.forgerock.com/docs/am/7.2/apidocs/com/sun/identity/saml2/plugins/SAML2IdentityProviderAdapter.html",
        " * Note that the initialize method is not supported in the scripts.",
        " *",
        " * Defined variables. Check the documentation on the respective functions for the variables available to it.",
        " *",
        " * hostedEntityId - String",
        " *     Entity ID for the hosted IDP",
        " * realm - String",
        " *     Realm of the hosted IDP",
        " * idpAdapterScriptHelper - IdpAdapterScriptHelper (1)",
        " *     An instance of IdpAdapterScriptHelper containing helper methods. See Javadoc for more details.",
        " * request - HttpServletRequest (2)",
        " *     Servlet request object",
        " * response - HttpServletResponse (3)",
        " *     Servlet response object",
        " * authnRequest - AuthnRequest (4)",
        " *     The original authentication request sent from SP",
        " * reqId - String",
        " *     The id to use for continuation of processing if the adapter redirects",
        " * res - Response (5)",
        " *     The SAML Response",
        " * session - SSOToken (6)",
        " *     The single sign-on session. The reference type of this is Object and would need to be casted to SSOToken.",
        " * relayState - String",
        " *     The relayState that will be used in the redirect",
        " * faultCode - String",
        " *     the fault code that will be returned in the SAML response",
        " * faultDetail - String",
        " *     the fault detail that will be returned in the SAML response",
        " * logger - Logger instance",
        " *     https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.",
        " *     Corresponding log files will be prefixed with: scripts.<script name>",
        " *",
        " * Throws SAML2Exception (7):",
        " *     for any exceptions occurring in the adapter. The federation process will continue",
        " *",
        " * Class reference:",
        " * (1) idpAdapterScriptHelper - https://backstage.forgerock.com/docs/am/7.2/apidocs/com/sun/identity/saml2/plugins/scripted/IdpAdapterScriptHelper.html.",
        " * (2) HttpServletRequest - https://tomcat.apache.org/tomcat-7.0-doc/servletapi/javax/servlet/http/HttpServletRequest.html.",
        " * (3) HttpServletResponse - https://tomcat.apache.org/tomcat-7.0-doc/servletapi/javax/servlet/http/HttpServletResponse.html.",
        " * (4) AuthnRequest - https://backstage.forgerock.com/docs/am/7.2/apidocs/com/sun/identity/saml2/protocol/AuthnRequest.html.",
        " * (5) Response - https://backstage.forgerock.com/docs/am/7.2/apidocs/com/sun/identity/saml2/protocol/Response.html.",
        " * (6) SSOToken - https://backstage.forgerock.com/docs/am/7.2/apidocs/com/iplanet/sso/SSOToken.html.",
        " * (7) SAML2Exception - https://backstage.forgerock.com/docs/am/7.2/apidocs/com/sun/identity/saml2/common/SAML2Exception.html.",
        " */",
        "",
        "/*",
        " * Template/default script for SAML2 IDP Adapter scripted plugin.",
        " */",
        "",
        "/*",
        " * Available variables for preSingleSignOn:",
        " *     hostedEntityId",
        " *     realm",
        " *     idpAdapterScriptHelper",
        " *     request",
        " *     authnRequest",
        " *     response",
        " *     reqId",
        " *     logger",
        " *",
        " * Return - true if browser redirection is happening after processing, false otherwise. Default to false.",
        " */",
        "function preSingleSignOn () {",
        "      logger.error("Chicago: preSingleSignOn");",
        "    return true;",
        "}",
        "",
        "/*",
        " * Available variables for preAuthentication:",
        " *     hostedEntityId",
        " *     realm",
        " *     idpAdapterScriptHelper",
        " *     request",
        " *     authnRequest",
        " *     response",
        " *     reqId",
        " *     session",
        " *     relayState",
        " *     logger",
        " *",
        " * Return - true if browser redirection is happening after processing, false otherwise. Default to false.",
        " */",
        "function preAuthentication () {",
        "      logger.error("Chicago: preAuthentication");",
        "    return true;",
        "}",
        "",
        "/*",
        " * Available variables for preSendResponse:",
        " *     hostedEntityId",
        " *     realm",
        " *     idpAdapterScriptHelper",
        " *     request",
        " *     authnRequest",
        " *     response",
        " *     reqId",
        " *     session",
        " *     relayState",
        " *     logger",
        " *",
        " * Return - true if browser redirection happened after processing, false otherwise. Default to false.",
        " */",
        "function preSendResponse () {",
        "      logger.error("Chicago: preSendResponse");",
        "      logger.error("Chicago: authnRequest: "+authnRequest);",
        "      response.sendRedirect("https://idc.scheuber.io/am/XUI/?realm=alpha&authIndexType=service&authIndexValue=Dispatcher&ForceAuth=true&goto="+relayState);",
        "    return true;",
        "}",
        "",
        "/*",
        " * Available variables for preSignResponse:",
        " *     hostedEntityId",
        " *     realm",
        " *     idpAdapterScriptHelper",
        " *     request",
        " *     authnRequest",
        " *     session",
        " *     relayState",
        " *     res",
        " *     logger",
        " */",
        "function preSignResponse () {",
        "      logger.error("Chicago: preSignResponse");",
        "}",
        "",
        "/*",
        " * Available variables for preSendFailureResponse:",
        " *     hostedEntityId",
        " *     realm",
        " *     idpAdapterScriptHelper",
        " *     request",
        " *     response",
        " *     faultCode",
        " *     faultDetail",
        " *     logger",
        " */",
        "function preSendFailureResponse () {",
        "      logger.error("Chicago: preSendFailureResponse");",
        "}",
      ],
    },
    "d58977ed-0542-4147-8197-973ef7300191": {
      "_id": "d58977ed-0542-4147-8197-973ef7300191",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Custom Device Match Script",
      "evaluatorVersion": "1.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Custom Device Match Script",
      "script": [
        ""/*\\n * Custom Device Match Script\\n */\\n\\noutcome = \\"true\\";"",
      ],
    },
    "da56fe60-8b38-4c46-a405-d6b306d4b336": {
      "_id": "da56fe60-8b38-4c46-a405-d6b306d4b336",
      "context": "OAUTH2_EVALUATE_SCOPE",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Default global script for OAuth2 Scope Evaluation",
      "evaluatorVersion": "1.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "OAuth2 Evaluate Scope Script",
      "script": [
        "/*",
        " * Copyright 2021 ForgeRock AS. All Rights Reserved",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        " * This script lets you populate the scopes with profile attribute values when the tokeninfo endpoint is called.",
        " * For example, if one of the scopes is mail, AM sets mail to the resource owner's email address in the token information returned.",
        " *",
        " * Defined variables:",
        " * accessToken - AccessToken (1).",
        " *               The access token to be updated.",
        " *               Mutable object, all changes to the access token will be reflected.",
        " * identity - AMIdentity (2).",
        " *            The client's identity if present or the resource owner's identity. Can be null.",
        " * scriptName - String (primitive).",
        " *              Always present, the display name of the script.",
        " * logger - Always present, the debug logger instance:",
        " *          https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.",
        " *          Corresponding log files will be prefixed with: scripts.OAUTH2_EVALUATE_SCOPE",
        " * httpClient - HTTP Client (3).",
        " *              Always present, the HTTP Client instance:",
        " *              https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-http-client.html#scripting-api-global-http-client.",
        " *",
        " * Return - a Map<String, Object> of the access token's information (4).",
        " *",
        " * Class reference:",
        " * (1) AccessToken - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/oauth2/core/AccessToken.html.",
        " * (2) AMIdentity - https://backstage.forgerock.com/docs/am/7/apidocs/com/sun/identity/idm/AMIdentity.html.",
        " * (3) Client - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/http/Client.html.",
        " * (4) Map - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashMap.html.",
        " */",
        "",
        "/**",
        " * Default evaluate scope script to use as a template for new scripts.",
        " */",
        "",
        "(function () {",
        "    var map = new java.util.HashMap();",
        "    if (identity !== null) {",
        "        var scopes = accessToken.getScope().toArray();",
        "        scopes.forEach(function (scope) {",
        "            var attributes = identity.getAttribute(scope).toArray();",
        "            map.put(scope, attributes.join(","));",
        "        });",
        "    } else {",
        "        logger.error('identity is null');",
        "    }",
        "    return map;",
        "}());",
      ],
    },
    "da7a96a8-7969-4dab-9c6e-a812938cc76d": {
      "_id": "da7a96a8-7969-4dab-9c6e-a812938cc76d",
      "context": "LIBRARY",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Script that uses secrets and variables",
      "evaluatorVersion": "2.0",
      "exports": [],
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "test-script-with-secrets-and-variables",
      "script": [
        "console.log(\`pi: \${systemEnv.getProperty("esv.test.var.pi")}\`);",
        "console.log(\`pi secret: \${systemEnv.getProperty("esv.test.secret.pi")}\`);",
        "console.log(\`speed of light: \${systemEnv.getProperty("esv.test.variable.light")}\`);",
        "console.log(\`euler's number: \${systemEnv.getProperty("esv.test.secret.euler")}\`);",
        "console.log(\`Area of circle with radius 7: \${7 * 7 * systemEnv.getProperty("esv.test.var.pi")}\`);",
        "console.log(\`Volume of sphere with radius 7: \${4 * 7 * 7 * 7 * systemEnv.getProperty("esv.test.secret.pi") / 3}\`);",
        "",
      ],
    },
    "dbe0bf9a-72aa-49d5-8483-9db147985a47": {
      "_id": "dbe0bf9a-72aa-49d5-8483-9db147985a47",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Normalizes raw profile data from ADFS",
      "evaluatorVersion": "1.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "ADFS Profile Normalization (JS)",
      "script": [
        ""/*\\n * Copyright 2022 ForgeRock AS. All Rights Reserved\\n *\\n * Use of this code requires a commercial software license with ForgeRock AS\\n * or with one of its affiliates. All use shall be exclusively subject\\n * to such license between the licensee and ForgeRock AS.\\n */\\n\\n/*\\n * This script returns the social identity profile information for the authenticating user\\n * in a standard form expected by the Social Provider Handler Node.\\n *\\n * Defined variables:\\n * rawProfile - The social identity provider profile information for the authenticating user.\\n *              JsonValue (1).\\n * logger - The debug logger instance:\\n *          https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.\\n * realm - String (primitive).\\n *         The name of the realm the user is authenticating to.\\n * requestHeaders - TreeMap (2).\\n *                  The object that provides methods for accessing headers in the login request:\\n *                  https://backstage.forgerock.com/docs/am/7/authentication-guide/scripting-api-node.html#scripting-api-node-requestHeaders.\\n * requestParameters - TreeMap (2).\\n *                     The object that contains the authentication request parameters.\\n * selectedIdp - String (primitive).\\n *               The social identity provider name. For example: google.\\n * sharedState - LinkedHashMap (3).\\n *               The object that holds the state of the authentication tree and allows data exchange between the stateless nodes:\\n *               https://backstage.forgerock.com/docs/am/7/auth-nodes/core-action.html#accessing-tree-state.\\n * transientState - LinkedHashMap (3).\\n *                  The object for storing sensitive information that must not leave the server unencrypted,\\n *                  and that may not need to persist between authentication requests during the authentication session:\\n *                  https://backstage.forgerock.com/docs/am/7/auth-nodes/core-action.html#accessing-tree-state.\\n *\\n * Return - a JsonValue (1).\\n *          The result of the last statement in the script is returned to the server.\\n *          Currently, the Immediately Invoked Function Expression (also known as Self-Executing Anonymous Function)\\n *          is the last (and only) statement in this script, and its return value will become the script result.\\n *          Do not use \\"return variable\\" statement outside of a function definition.\\n *\\n *          This script's last statement should result in a JsonValue (1) with the following keys:\\n *          {\\n *              {\\"displayName\\": \\"corresponding-social-identity-provider-value\\"},\\n *              {\\"email\\": \\"corresponding-social-identity-provider-value\\"},\\n *              {\\"familyName\\": \\"corresponding-social-identity-provider-value\\"},\\n *              {\\"givenName\\": \\"corresponding-social-identity-provider-value\\"},\\n *              {\\"id\\": \\"corresponding-social-identity-provider-value\\"},\\n *              {\\"locale\\": \\"corresponding-social-identity-provider-value\\"},\\n *              {\\"photoUrl\\": \\"corresponding-social-identity-provider-value\\"},\\n *              {\\"username\\": \\"corresponding-social-identity-provider-value\\"}\\n *          }\\n *\\n *          The consumer of this data defines which keys are required and which are optional.\\n *          For example, the script associated with the Social Provider Handler Node and,\\n *          ultimately, the managed object created/updated with this data\\n *          will expect certain keys to be populated.\\n *          In some common default configurations, the following keys are required to be not empty:\\n *          username, givenName, familyName, email.\\n *\\n *          From RFC4517: A value of the Directory String syntax is a string of one or more\\n *          arbitrary characters from the Universal Character Set (UCS).\\n *          A zero-length character string is not permitted.\\n *\\n * (1) JsonValue - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/json/JsonValue.html.\\n * (2) TreeMap - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/TreeMap.html.\\n * (3) LinkedHashMap - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/LinkedHashMap.html.\\n */\\n\\n(function () {\\n    var frJava = JavaImporter(\\n        org.forgerock.json.JsonValue\\n    );\\n\\n    var normalizedProfileData = frJava.JsonValue.json(frJava.JsonValue.object());\\n  \\n  \\t//logger.message('Seguin rawProfile: '+rawProfile);\\n\\n    normalizedProfileData.put('id', rawProfile.get('sub').asString());\\n    normalizedProfileData.put('displayName', rawProfile.get('givenName').asString() + ' ' + rawProfile.get('sn').asString());\\n    normalizedProfileData.put('email', rawProfile.get('mail').asString());\\n    normalizedProfileData.put('givenName', rawProfile.get('givenName').asString());\\n    normalizedProfileData.put('familyName', rawProfile.get('sn').asString());\\n    normalizedProfileData.put('username', rawProfile.get('upn').asString());\\n    normalizedProfileData.put('roles', rawProfile.get('roles').asString());\\n  \\n  \\t//logger.message('Seguin normalizedProfileData: '+normalizedProfileData);\\n\\n    return normalizedProfileData;\\n}());"",
      ],
    },
    "e1db8a0a-0329-4962-a5bf-ecffaca376ae": {
      "_id": "e1db8a0a-0329-4962-a5bf-ecffaca376ae",
      "context": "OIDC_CLAIMS",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Used by endUserUIClient",
      "evaluatorVersion": "1.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Alpha endUserUIClient OIDC Claims Script",
      "script": [
        "/*",
        " * Copyright 2014-2021 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        " * This script computes claim values returned in ID tokens and/or at the UserInfo Endpoint.",
        " * The claim values are computed for:",
        " * the claims derived from the requested scopes,",
        " * the claims provided by the authorization server,",
        " * and the claims requested by the client via the claims parameter.",
        " *",
        " * In the CONFIGURATION AND CUSTOMIZATION section, you can",
        " * define the scope-to-claims mapping, and",
        " * assign to each claim a resolver function that will compute the claim value.",
        " *",
        " * Defined variables (class references are provided below):",
        " * scopes - Set<String> (6).",
        " *          Always present, the requested scopes.",
        " * claims - Map<String, Object> (5).",
        " *          Always present, default server provided claims.",
        " * claimObjects - List<Claim> (7, 2).",
        " *                Always present, the default server provided claims.",
        " * requestedClaims - Map<String, Set<String>> (5).",
        " *                   Always present, not empty if the request contains the claims parameter and the server has enabled",
        " *                   claims_parameter_supported. A map of the requested claims to possible values, otherwise empty;",
        " *                   requested claims with no requested values will have a key but no value in the map. A key with",
        " *                   a single value in its Set (6) indicates that this is the only value that should be returned.",
        " * requestedTypedClaims - List<Claim> (7, 2).",
        " *                        Always present, the requested claims.",
        " *                        Requested claims with no requested values will have a claim with no values.",
        " *                        A claim with a single value indicates this is the only value that should be returned.",
        " * claimsLocales - List<String> (7).",
        " *                 The values from the 'claims_locales' parameter.",
        " *                 See https://openid.net/specs/openid-connect-core-1_0.html#ClaimsLanguagesAndScripts for the OIDC specification details.",
        " * requestProperties - Unmodifiable Map (5).",
        " *                     Always present, contains a map of request properties:",
        " *                     requestUri - The request URI.",
        " *                     realm - The realm that the request relates to.",
        " *                     requestParams - A map of the request params and/or posted data.",
        " *                                     Each value is a list of one or more properties.",
        " *                                     Please note that these should be handled in accordance with OWASP best practices:",
        " *                                     https://owasp.org/www-community/vulnerabilities/Unsafe_use_of_Reflection.",
        " * clientProperties - Unmodifiable Map (5).",
        " *                    Present if the client specified in the request was identified, contains a map of client properties:",
        " *                    clientId - The client's URI for the request locale.",
        " *                    allowedGrantTypes - List of the allowed grant types (org.forgerock.oauth2.core.GrantType) for the client.",
        " *                    allowedResponseTypes - List of the allowed response types for the client.",
        " *                    allowedScopes - List of the allowed scopes for the client.",
        " *                    customProperties - A map of the custom properties of the client.",
        " *                                       Lists or maps will be included as sub-maps; for example:",
        " *                                       customMap[Key1]=Value1 will be returned as customMap -> Key1 -> Value1.",
        " *                                       To add custom properties to a client, update the Custom Properties field",
        " *                                       in AM Console > Realm Name > Applications > OAuth 2.0 > Clients > Client ID > Advanced.",
        " * identity - AMIdentity (3).",
        " *            Always present, the identity of the resource owner.",
        " * session - SSOToken (4).",
        " *           Present if the request contains the session cookie, the user's session object.",
        " * scriptName - String (primitive).",
        " *              Always present, the display name of the script.",
        " * logger - Always present, the "OAuth2Provider" debug logger instance:",
        " *          https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.",
        " *          Corresponding files will be prefixed with: scripts.OIDC_CLAIMS.",
        " * httpClient - HTTP Client (8).",
        " *              Always present, the HTTP Client instance:",
        " *              https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-http-client.html#scripting-api-global-http-client.",
        " *              In order to use the client, you may need to add",
        " *              org.forgerock.http.Client,",
        " *              org.forgerock.http.protocol.*,",
        " *              and org.forgerock.util.promise.PromiseImpl",
        " *              to the allowed Java classes in the scripting engine configuration, as described in:",
        " *              https://backstage.forgerock.com/docs/am/7/scripting-guide/script-engine-security.html",
        " *",
        " * Return - a new UserInfoClaims(Map<String, Object> values, Map<String, List<String>> compositeScopes) (1) object.",
        " *          The result of the last statement in the script is returned to the server.",
        " *          Currently, the Immediately Invoked Function Expression (also known as Self-Executing Anonymous Function)",
        " *          is the last (and only) statement in this script, and its return value will become the script result.",
        " *          Do not use "return variable" statement outside of a function definition.",
        " *          See RESULTS section for additional details.",
        " *",
        " * Class reference:",
        " * (1) UserInfoClaims - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/oauth2/core/UserInfoClaims.html.",
        " * (2) Claim - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html).",
        " *         An instance of org.forgerock.openidconnect.Claim has methods to access",
        " *         the claim name, requested values, locale, and whether the claim is essential.",
        " * (3) AMIdentity - https://backstage.forgerock.com/docs/am/7/apidocs/com/sun/identity/idm/AMIdentity.html.",
        " * (4) SSOToken - https://backstage.forgerock.com/docs/am/7/apidocs/com/iplanet/sso/SSOToken.html.",
        " * (5) Map - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashMap.html,",
        " *           or https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/LinkedHashMap.html.",
        " * (6) Set - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashSet.html.",
        " * (7) List - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/ArrayList.html.",
        " * (8) Client - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/http/Client.html.",
        "*/",
        "",
        "(function () {",
        "    // SETUP",
        "",
        "    /**",
        "     * Claim processing utilities.",
        "     * An object that contains reusable functions for processing claims.",
        "     * @see CLAIM PROCESSING UTILITIES section for details.",
        "     */",
        "    var utils = getUtils();",
        "",
        "    // CONFIGURATION AND CUSTOMIZATION",
        "",
        "    /**",
        "     * OAuth 2.0 scope values (scopes) can be used by the Client to request OIDC claims.",
        "     *",
        "     * Call this configuration method, and pass in as the first argument",
        "     * an object that maps a scope value to an array of claim names",
        "     * to specify which claims need to be processed and returned for the requested scopes.",
        "     * @see {@link https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims}",
        "     * for the scope values that could be used to request claims as defined in the OIDC specification.",
        "     *",
        "     * Below, find a default configuration that is expected to work in the current environment.",
        "     *",
        "     * CUSTOMIZATION",
        "     * You can choose the claim names returned for a scope.",
        "     */",
        "    utils.setScopeClaimsMap({",
        "        profile: [",
        "            'name',",
        "            'family_name',",
        "            'given_name',",
        "            'zoneinfo',",
        "            'locale'",
        "        ],",
        "        email: ['email'],",
        "        address: ['address'],",
        "        phone: ['phone_number']",
        "    });",
        "",
        "    /**",
        "     * In this script, each claim",
        "     * derived from the requested scopes,",
        "     * provided by the authorization server, and",
        "     * requested by the client via the claims parameter",
        "     * will be processed by a function associated with the claim name.",
        "     *",
        "     * Call this configuration method, and pass in as the first argument",
        "     * an object that maps a claim name to a resolver function,",
        "     * which will be automatically executed for each claim processed by the script.",
        "     *",
        "     * The claim resolver function will receive the requested claim information",
        "     * in an instance of org.forgerock.openidconnect.Claim as the first argument.",
        "     * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html}",
        "     * for details on the Claim class.",
        "     *",
        "     * If the claim resolver function returns a value,",
        "     * other than undefined or null,",
        "     * the claim will be included in the script's results.",
        "     *",
        "     * The Claim instance provides methods to check",
        "     * what the name of the claim is,",
        "     * which values the claim request contains,",
        "     * whether the claim is essential, and",
        "     * which locale the claim is associated with.",
        "     * The resolver function can consider this information when computing and returning the claim value.",
        "     *",
        "     * Below, find a default configuration that is expected to work in the current environment.",
        "     * A reusable function, utils.getUserProfileClaimResolver(String attribute-name),",
        "     * is called to return a claim resolver function based on a user profile attribute.",
        "     * @see CLAIM RESOLVERS section for the implementation details and examples.",
        "     * For the address claim, an example of a claim resolver that uses another claim resolver is provided.",
        "     *",
        "     * CUSTOMIZATION",
        "     * You can reuse the predefined utils methods with your custom arguments.",
        "     * You can also specify a custom resolver function for a claim name,",
        "     * that will compute and return the claim value—as shown in the commented out example below.",
        "     */",
        "    utils.setClaimResolvers({",
        "        /*",
        "        // An example of a simple claim resolver function that is defined for a claim",
        "        // directly in the configuration object:",
        "        custom-claim-name: function (requestedClaim) {",
        "            // In this case, initially, the claim value comes straight from a user profile attribute value:",
        "            var claimValue = identity.getAttribute('custom-attribute-name').toArray()[0]",
        "",
        "            // Optionally, provide additional logic for processing (filtering, formatting, etc.) the claim value.",
        "            // You can use:",
        "            // requestedClaim.getName()",
        "            // requestedClaim.getValues()",
        "            // requestedClaim.getLocale()",
        "            // requestedClaim.isEssential()",
        "",
        "            return claimValue",
        "        },",
        "        */",
        "        /**",
        "         * The use of utils.getUserProfileClaimResolver shows how",
        "         * an argument passed to a function that returns a claim resolver",
        "         * becomes available to the resolver function (via its lexical context).",
        "         */",
        "        name: utils.getUserProfileClaimResolver('cn'),",
        "        family_name: utils.getUserProfileClaimResolver('sn'),",
        "        given_name: utils.getUserProfileClaimResolver('givenname'),",
        "        zoneinfo: utils.getUserProfileClaimResolver('preferredtimezone'),",
        "        locale: utils.getUserProfileClaimResolver('preferredlocale'),",
        "        email: utils.getUserProfileClaimResolver('mail'),",
        "        address: utils.getAddressClaimResolver(",
        "            /**",
        "             * The passed in user profile claim resolver function",
        "             * can be used by the address claim resolver function",
        "             * to obtain the claim value to be formatted as per the OIDC specification:",
        "             * @see https://openid.net/specs/openid-connect-core-1_0.html#AddressClaim.",
        "             */",
        "            utils.getUserProfileClaimResolver('postaladdress')",
        "        ),",
        "        phone_number: utils.getUserProfileClaimResolver('telephonenumber')",
        "    });",
        "",
        "    // CLAIM PROCESSING UTILITIES",
        "",
        "    /**",
        "     * @returns {object} An object that contains reusable claim processing utilities.",
        "     * @see PUBLIC METHODS section and the return statement for the list of exported functions.",
        "     */",
        "    function getUtils () {",
        "        // IMPORT JAVA",
        "",
        "        /**",
        "         * Provides Java scripting functionality.",
        "         * @see {@link https://developer.mozilla.org/en-US/docs/Mozilla/Projects/Rhino/Scripting_Java#javaimporter_constructor}.",
        "         */",
        "        var frJava = JavaImporter(",
        "            org.forgerock.oauth2.core.exceptions.InvalidRequestException,",
        "            org.forgerock.oauth2.core.UserInfoClaims,",
        "            org.forgerock.openidconnect.Claim,",
        "",
        "            java.util.LinkedHashMap,",
        "            java.util.ArrayList",
        "        );",
        "",
        "        // SET UP CONFIGURATION",
        "",
        "        /**",
        "         * Placeholder for a configuration option that contains",
        "         * an object that maps the supported scope values (scopes)",
        "         * and the corresponding claim names for each scope value.",
        "         */",
        "        var scopeClaimsMap;",
        "",
        "        /**",
        "         * Placeholder for a configuration option that contains",
        "         * an object that maps the supported claim names",
        "         * and the resolver functions returning the claim value.",
        "         */",
        "        var claimResolvers;",
        "",
        "        /**",
        "         * A (public) method that accepts an object that maps the supported scopes and the corresponding claim names,",
        "         * and assigns it to a (private) variable that serves as a configuration option.",
        "         * @param {object} params - An object that maps each supported scope value to an array of claim names,",
        "         * in order to specify which claims need to be processed for the requested scopes.",
        "         * @see {@link https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims} for details.",
        "         * @param {string[]} [params.profile] - An array of claim names to be returned if the profile scope is requested.",
        "         * @param {string[]} [params.email] - An array of claim names to be returned if the email scope is requested.",
        "         * @param {string[]} [params.address] - An array of claim names to be returned if the address scope is requested.",
        "         * @param {string[]} [params.phone] - An array of claim names to be returned if the phone scope is requested.",
        "         * @returns {undefined}",
        "         */",
        "        function setScopeClaimsMap(params) {",
        "            scopeClaimsMap = params;",
        "        }",
        "",
        "        /**",
        "         * A (public) method that accepts an object that maps the supported claim names",
        "         * and the resolver functions returning the claim value,",
        "         * and assigns it to a (private) variable that serves as a configuration option.",
        "         * @param {object} params - An object that maps",
        "         * each supported claim name to a function that computes and returns the claim value.",
        "         */",
        "        function setClaimResolvers(params) {",
        "            claimResolvers = params;",
        "        }",
        "",
        "        // CLAIM RESOLVERS",
        "",
        "        /**",
        "         * Claim resolvers are functions that return a claim value.",
        "         * @param {*}",
        "         * @returns {*}",
        "         */",
        "",
        "        /**",
        "         * Defines a claim resolver based on a user profile attribute.",
        "         * @param {string} attributeName - Name of the user profile attribute.",
        "         * @returns {function} A function that will determine the claim value",
        "         * based on the user profile attribute and the (requested) claim properties.",
        "         */",
        "        function getUserProfileClaimResolver (attributeName) {",
        "            /**",
        "             * Resolves a claim with a user profile attribute value.",
        "             * Returns undefined if the identity attribute is not populated,",
        "             * OR if the claim has requested values that do not contain the identity attribute value.",
        "             * ATTENTION: the aforementioned comparison is case-sensitive.",
        "             * @param {org.forgerock.openidconnect.Claim} claim",
        "             * An object that provides methods to obtain information/requirements associated with a claim.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "             * @returns {string|HashSet|undefined}",
        "             */",
        "            function resolveClaim(claim) {",
        "                var userProfileValue;",
        "",
        "                if (identity) {",
        "                    userProfileValue = getClaimValueFromSet(claim, identity.getAttribute(attributeName));",
        "",
        "                    if (userProfileValue && !userProfileValue.isEmpty()) {",
        "                        if (!claim.getValues() || claim.getValues().isEmpty() || claim.getValues().contains(userProfileValue)) {",
        "                            return userProfileValue;",
        "                        }",
        "                    }",
        "                }",
        "            }",
        "",
        "            return resolveClaim;",
        "        }",
        "",
        "        /**",
        "         * Returns an address claim resolver based on a claim value obtained with another claim resolver.",
        "         * @param {function} resolveClaim - A function that returns a claim value.",
        "         * @returns {function} A function that will accept a claim as an argument,",
        "         * run the claim resolver function for the claim and obtain the claim value,",
        "         * and apply additional formatting to the value before returning it.",
        "         */",
        "        function getAddressClaimResolver (resolveClaim) {",
        "            /**",
        "             * Creates an address claim object from a value returned by a claim resolver,",
        "             * and returns the address claim object as the claim value.",
        "             * @see {@link https://openid.net/specs/openid-connect-core-1_0.html#AddressClaim}.",
        "             * The claim value is obtained with a claim resolving function available from the closure.",
        "             * @param {org.forgerock.openidconnect.Claim} claim",
        "             * An object that provides methods to obtain information/requirements associated with a claim.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "             * @returns {java.util.LinkedHashMap|undefined} The address claim object created from a claim value.",
        "             */",
        "            function resolveAddressClaim(claim) {",
        "                var claimValue = resolveClaim(claim);",
        "                var addressObject;",
        "",
        "                if (isClaimValueValid(claimValue)) {",
        "                    addressObject = new frJava.LinkedHashMap();",
        "",
        "                    addressObject.put('formatted', claimValue);",
        "",
        "                    return addressObject;",
        "                }",
        "            }",
        "",
        "            return resolveAddressClaim;",
        "        }",
        "",
        "        /**",
        "         * Returns an essential claim resolver based on a claim value obtained with another claim resolver.",
        "         * @param {function} resolveClaim - A function that returns a claim value.",
        "         * @returns {function} A function that will accept a claim as an argument,",
        "         * run the claim resolver function for the claim and obtain the claim value,",
        "         * and apply additional logic for essential claims.",
        "         */",
        "        function getEssentialClaimResolver (resolveClaim) {",
        "            /**",
        "             * Returns a claim value or throws an error.",
        "             * The claim value is obtained with a claim resolving function available from the closure.",
        "             * Throws an exception if the claim is essential and no value is returned for the claim.",
        "             *",
        "             * Use of this resolver is optional.",
        "             * @see {@link https://openid.net/specs/openid-connect-core-1_0.html#IndividualClaimsRequests} stating:",
        "             * "Note that even if the Claims are not available because the End-User did not authorize their release or they are not present,",
        "             * the Authorization Server MUST NOT generate an error when Claims are not returned, whether they are Essential or Voluntary,",
        "             * unless otherwise specified in the description of the specific claim."",
        "             *",
        "             * @param {org.forgerock.openidconnect.Claim} claim",
        "             * An object that provides methods to obtain information/requirements associated with a claim.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "             * @returns {*}",
        "             * @throws {org.forgerock.oauth2.core.exceptions.InvalidRequestException}",
        "             */",
        "            function resolveEssentialClaim(claim) {",
        "                var claimValue = resolveClaim(claim);",
        "",
        "                if (claim.isEssential() && !isClaimValueValid(claimValue)) {",
        "                    throw new frJava.InvalidRequestException('Could not provide value for essential claim: ' + claim.getName());",
        "                }",
        "",
        "                return claimValue;",
        "            }",
        "",
        "            return resolveEssentialClaim;",
        "        }",
        "",
        "        /**",
        "         * Provides default resolution for a claim.",
        "         * Use it if a claim-specific resolver is not defined in the configuration.",
        "         * @param {org.forgerock.openidconnect.Claim} claim",
        "         * An object that provides methods to obtain information/requirements associated with a claim.",
        "         * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "         * @returns {*} A single value associated with this claim.",
        "         */",
        "        function resolveAnyClaim (claim) {",
        "            if (claim.getValues().size() === 1) {",
        "                return claim.getValues().toArray()[0];",
        "            }",
        "        }",
        "",
        "        // UTILITIES",
        "",
        "        /**",
        "         * Returns claim value from a set.",
        "         * If the set contains a single value, returns the value.",
        "         * If the set contains multiple values, returns the set.",
        "         * Otherwise, returns undefined.",
        "         *",
        "         * @param {org.forgerock.openidconnect.Claim} claim",
        "         * An object that provides methods to obtain information/requirements associated with a claim.",
        "         * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "         * @param {java.util.HashSet} set The set—for example, a user profile attribute value.",
        "         * @returns {string|java.util.HashSet|undefined}",
        "         */",
        "        function getClaimValueFromSet (claim, set) {",
        "            if (set && set.size()) {",
        "                if (set.size() === 1) {",
        "                    return set.toArray()[0];",
        "                } else {",
        "                    return set;",
        "                }",
        "            } else if (logger.warningEnabled()) {",
        "                logger.warning('OIDC Claims script. Got an empty set for claim: ' + claim.getName());",
        "            }",
        "        }",
        "",
        "        function isClaimValueValid (claimValue) {",
        "            if (typeof claimValue === 'undefined' || claimValue === null) {",
        "                return false;",
        "            }",
        "",
        "            return true;",
        "        }",
        "",
        "        // CLAIM PROCESSING",
        "",
        "        /**",
        "         * Constructs and returns an object populated with the computed claim values",
        "         * and the requested scopes mapped to the claim names.",
        "         * @returns {org.forgerock.oauth2.core.UserInfoClaims} The object to be returned to the authorization server.",
        "         * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/oauth2/core/UserInfoClaims.html}.",
        "         * @see RESULTS section for the use of this function.",
        "         */",
        "        function getUserInfoClaims () {",
        "            return new frJava.UserInfoClaims(getComputedClaims(), getCompositeScopes());",
        "        }",
        "",
        "        /**",
        "         * Creates a map of (requested) claim names populated with the computed claim values.",
        "         * @returns {java.util.LinkedHashMap}",
        "         * A map of the requested claim names and the corresponding claim values.",
        "         */",
        "        function getComputedClaims () {",
        "            /**",
        "             * Creates a complete list of claim objects from:",
        "             * the claims derived from the scopes,",
        "             * the claims provided by the authorization server,",
        "             * and the claims requested by the client.",
        "             * @returns {java.util.ArrayList}",
        "             * Returns a complete list of org.forgerock.openidconnect.Claim objects available to the script.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for the claim object details.",
        "             */",
        "            function getClaims() {",
        "                /**",
        "                 * Returns a list of claim objects for the requested scopes.",
        "                 * Uses the scopeClaimsMap configuration option to derive the claim names;",
        "                 * no other properties of a claim derived from a scope are populated.",
        "                 * @returns {java.util.ArrayList}",
        "                 * A list of org.forgerock.openidconnect.Claim objects derived from the requested scopes.",
        "                 * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for the claim object details.",
        "                 */",
        "                function convertScopeToClaims() {",
        "                    var claims = new frJava.ArrayList();",
        "",
        "                    scopes.toArray().forEach(function (scope) {",
        "                        if (String(scope) !== 'openid' && scopeClaimsMap[scope]) {",
        "                            scopeClaimsMap[scope].forEach(function (claimName) {",
        "                                claims.add(new frJava.Claim(claimName));",
        "                            });",
        "                        }",
        "                    });",
        "",
        "                    return claims;",
        "                }",
        "",
        "                var claims = new frJava.ArrayList();",
        "",
        "                claims.addAll(convertScopeToClaims());",
        "                claims.addAll(claimObjects);",
        "                claims.addAll(requestedTypedClaims);",
        "",
        "                return claims;",
        "            }",
        "",
        "            /**",
        "             * Computes and returns a claim value.",
        "             * To obtain the claim value, uses the resolver function specified for the claim in the claimResolvers configuration object.",
        "             * @see claimResolvers",
        "             * If no resolver function is found, uses the default claim resolver function.",
        "             *",
        "             * @param {org.forgerock.openidconnect.Claim} claim",
        "             * An object that provides methods to obtain information/requirements associated with a claim.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "             * @returns {*} Claim value.",
        "             * @throws {org.forgerock.oauth2.core.exceptions.InvalidRequestException}",
        "             * Rethrows this exception if a claim resolver throws it.",
        "             * You can throw org.forgerock.oauth2.core.exceptions.InvalidRequestException from your custom claim resolver",
        "             * if you want to terminate the claim processing.",
        "             */",
        "            function computeClaim(claim) {",
        "                var resolveClaim;",
        "                var message;",
        "",
        "                try {",
        "                    resolveClaim = claimResolvers[claim.getName()] || resolveAnyClaim;",
        "",
        "                    return resolveClaim(claim);",
        "                } catch (e) {",
        "                    message = 'OIDC Claims script exception. Unable to resolve OIDC Claim. ' + e;",
        "",
        "                    if (String(e).indexOf('org.forgerock.oauth2.core.exceptions.InvalidRequestException') !== -1) {",
        "                        throw e;",
        "                    }",
        "",
        "                    if (logger.warningEnabled()) {",
        "                        logger.warning(message);",
        "                    }",
        "                }",
        "            }",
        "",
        "            var computedClaims = new frJava.LinkedHashMap();",
        "",
        "            getClaims().toArray().forEach(function (claim) {",
        "                var claimValue = computeClaim(claim);",
        "",
        "                if (isClaimValueValid(claimValue)) {",
        "                    computedClaims.put(claim.getName(), claimValue);",
        "                } else {",
        "                    /**",
        "                     * If a claim has been processed, but appears in the list again,",
        "                     * and its value cannot be computed under the new conditions,",
        "                     * the claim is removed from the final result.",
        "                     *",
        "                     * For example, a claim could be mapped to a scope and found in the user profile,",
        "                     * but also requested by the client with required values that don't match the computed one.",
        "                     * @see {link https://openid.net/specs/openid-connect-core-1_0.html#IndividualClaimsRequests}.",
        "                     * for the relevant OIDC specification details.",
        "                     */",
        "                    computedClaims.remove(claim.getName());",
        "                }",
        "            });",
        "",
        "            return computedClaims;",
        "        }",
        "",
        "        /**",
        "         * Creates a map of requested scopes and the corresponding claim names.",
        "         * @returns {java.util.LinkedHashMap}",
        "         */",
        "        function getCompositeScopes () {",
        "            var compositeScopes = new frJava.LinkedHashMap();",
        "",
        "            scopes.toArray().forEach(function (scope) {",
        "                var scopeClaims = new frJava.ArrayList();",
        "",
        "                if (scopeClaimsMap[scope]) {",
        "                    scopeClaimsMap[scope].forEach(function (claimName) {",
        "                        scopeClaims.add(claimName);",
        "                    });",
        "                }",
        "",
        "                if (scopeClaims.size()) {",
        "                    compositeScopes.put(scope, scopeClaims);",
        "                }",
        "            });",
        "",
        "            return compositeScopes;",
        "        }",
        "",
        "        // PUBLIC METHODS",
        "",
        "        return {",
        "            setScopeClaimsMap: setScopeClaimsMap,",
        "            setClaimResolvers: setClaimResolvers,",
        "            getUserProfileClaimResolver: getUserProfileClaimResolver,",
        "            getAddressClaimResolver: getAddressClaimResolver,",
        "            getEssentialClaimResolver: getEssentialClaimResolver,",
        "            getUserInfoClaims: getUserInfoClaims",
        "        };",
        "    }",
        "",
        "    // RESULTS",
        "",
        "    /**",
        "     * This script returns an instance of the org.forgerock.oauth2.core.UserInfoClaims class",
        "     * populated with the computed claim values and",
        "     * the requested scopes mapped to the claim names.",
        "     * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/oauth2/core/UserInfoClaims.html}.",
        "     *",
        "     * Assigning it to a variable gives you an opportunity",
        "     * to log the content of the returned value during development.",
        "     */",
        "    var userInfoClaims = utils.getUserInfoClaims();",
        "",
        "    /*",
        "    logger.error(scriptName + ' results:')",
        "    logger.error('Values: ' + userInfoClaims.getValues())",
        "    logger.error('Scopes: ' + userInfoClaims.getCompositeScopes())",
        "    */",
        "",
        "    return userInfoClaims;",
        "}());",
        "",
      ],
    },
    "e232cff3-2460-47cd-80b2-36c86c0d0f06": {
      "_id": "e232cff3-2460-47cd-80b2-36c86c0d0f06",
      "context": "OAUTH2_ACCESS_TOKEN_MODIFICATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Used by endUserUIClient",
      "evaluatorVersion": "1.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Alpha endUserUIClient OAuth2 Access Token Modification Script",
      "script": [
        "(function () {",
        "  if (scopes.contains('fr:autoaccess:*') || scopes.contains('fr:iga:*') || scopes.contains('fr:idc:analytics:*')) {",
        "    var fr = JavaImporter(",
        "      com.sun.identity.idm.IdType",
        "    );",
        "    var groups = [];",
        "    identity.getMemberships(fr.IdType.GROUP).toArray().forEach(function (group) {",
        "      groups.push(group.getAttribute('cn').toArray()[0]);",
        "    });",
        "    accessToken.setField('groups', groups);",
        "  }",
        "}());",
        "",
      ],
    },
    "e5c302c8-f838-4698-87cc-d7225fc82454": {
      "_id": "e5c302c8-f838-4698-87cc-d7225fc82454",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "evaluatorVersion": "1.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "EmailAsUsername",
      "script": [
        "objectAttributes = sharedState.get("objectAttributes")",
        "userName = objectAttributes.get("userName")",
        "",
        "if(userName){",
        "  //Form Fill",
        "  objectAttributes.put("mail", userName)",
        "} else {",
        "  //Social",
        "  objectAttributes.put("userName", objectAttributes.get("mail"))",
        "}",
        "",
        "",
        "sharedState.put("objectAttributes", objectAttributes);",
        "//sharedState.put("username", mail)",
        "",
        "outcome = "true";",
      ],
    },
    "ed685f9f-5909-4726-86e8-22bd38b47663": {
      "_id": "ed685f9f-5909-4726-86e8-22bd38b47663",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Converts a normalized social profile into an Identity",
      "evaluatorVersion": "1.0",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Normalized Profile to Identity",
      "script": [
        "/*",
        " * Copyright 2021 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "import org.forgerock.json.JsonValue",
        "",
        "JsonValue identity = json(object(",
        "        field("givenName", normalizedProfile.givenName),",
        "        field("sn", normalizedProfile.familyName),",
        "        field("mail", normalizedProfile.email),",
        "        field("cn", normalizedProfile.displayName),",
        "        field("userName", normalizedProfile.username),",
        "        field("iplanet-am-user-alias-list", selectedIdp + '-' + normalizedProfile.id.asString())))",
        "",
        "return identity",
      ],
    },
    "fb09ba1b-e9b9-4517-8f11-a7cfe8b65dfd": {
      "_id": "fb09ba1b-e9b9-4517-8f11-a7cfe8b65dfd",
      "context": "SAML2_SP_ADAPTER",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "evaluatorVersion": "1.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "FrodoSPAdapter - imported (2)",
      "script": [
        "/*",
        " * Copyright 2023 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        " * The script has these top level functions that could be executed during a SAML2 flow.",
        " *      - preSingleSignOnRequest",
        " *      - preSingleSignOnProcess",
        " *      - postSingleSignOnSuccess",
        " *      - postSingleSignOnFailure",
        " *      - postNewNameIDSuccess",
        " *      - postTerminateNameIDSuccess",
        " *      - preSingleLogoutProcess",
        " *      - postSingleLogoutSuccess",
        " *",
        " * Please see the JavaDoc for the interface for more information about these methods.",
        " * https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/org/forgerock/openam/saml2/plugins/SPAdapter.html",
        " * Note that the initialize method is not supported in the scripts.",
        " *",
        " * Defined variables. Check the documentation on the respective functions for the variables available to it.",
        " *",
        " * hostedEntityId - String",
        " *     Entity ID for the hosted IDP",
        " * realm - String",
        " *     Realm of the hosted IDP",
        " * idpEntityId - String",
        " *     The entity ID for the Identity Provider for which the sign-on request will be sent.",
        " * request - HttpServletRequest (1)",
        " *     Servlet request object",
        " * response - HttpServletResponse (2)",
        " *     Servlet response object",
        " * authnRequest - AuthnRequest (3)",
        " *     The authentication request sent that is sent from the Service Provider.",
        " * session - SSOToken (4)",
        " *     The single sign-on session. The reference type of this is Object and would need to be casted to SSOToken.",
        " * res - Response (5)",
        " *     The SSO Response received from the Identity Provider.",
        " * profile - String",
        " *     The protocol profile that is used, this will be one of the following values from SAML2Constants (6):",
        " *          - SAML2Constants.HTTP_POST",
        " *          - SAML2Constants.HTTP_ARTIFACT",
        " *          - SAML2Constants.PAOS",
        " * out - PrintWriter (7)",
        " *     The PrintWriter that can be used to write to.",
        " * isFederation - boolean",
        " *     Set to true if using federation, otherwise false.",
        " * failureCode - int",
        " *     An integer holding the failure code when an error has occurred. For potential values see SPAdapter.",
        " * userId - String",
        " *     The unique universal ID of the user with whom the new name identifier request was performed.",
        " * idRequest - ManageNameIDRequest (8)",
        " *     The new name identifier request, this will be null if the request object is not available",
        " * idResponse - ManageNameIDResponse (9)",
        " *     The new name identifier response, this will be null if the response object is not available",
        " * binding - String",
        " *     The binding used for the new name identifier request. This will be one of the following values:",
        " *          - SAML2Constants.SOAP",
        " *          - SAML2Constants.HTTP_REDIRECT",
        " * logoutRequest - LogoutRequest (10)",
        " *     The single logout request.",
        " * logoutResponse - LogoutResponse (11)",
        " *     The single logout response.",
        " * spAdapterScriptHelper - SpAdapterScriptHelper (12)",
        " *     An instance of SpAdapterScriptHelper containing helper methods. See Javadoc for more details.",
        " * logger - Logger instance",
        " *     https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.",
        " *     Corresponding log files will be prefixed with: scripts.<script name>",
        " *",
        " * Throws SAML2Exception (13):",
        " *     for any exceptions occurring in the adapter. The federation process will continue",
        " *",
        " * Class reference:",
        " * (1) HttpServletRequest - https://tomcat.apache.org/tomcat-7.0-doc/servletapi/javax/servlet/http/HttpServletRequest.html.",
        " * (2) HttpServletResponse - https://tomcat.apache.org/tomcat-7.0-doc/servletapi/javax/servlet/http/HttpServletResponse.html.",
        " * (3) AuthnRequest - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/protocol/AuthnRequest.html.",
        " * (4) SSOToken - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/iplanet/sso/SSOToken.html.",
        " * (5) Response - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/protocol/Response.html",
        " * (6) SAML2Constants - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/common/SAML2Constants.html",
        " * (7) PrintWriter - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/PrintWriter.html",
        " * (8) ManageNameIDRequest - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/protocol/ManageNameIDRequest.html",
        " * (9) ManageNameIDResponse - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/protocol/ManageNameIDResponse.html",
        " * (10) LogoutRequest - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/protocol/LogoutRequest.html",
        " * (11) LogoutResponse - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/protocol/LogoutResponse.html",
        " * (12) SpAdapterScriptHelper - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/plugins/scripted/SpAdapterScriptHelper.html.",
        " * (13) SAML2Exception - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/common/SAML2Exception.html.",
        " */",
        "",
        "/*",
        " * Template/default script for SAML2 SP Adapter scripted plugin.",
        " */",
        "",
        "/*",
        " * Available variables for preSingleSignOnRequest:",
        " *     hostedEntityId",
        " *     idpEntityId",
        " *     realm",
        " *     request",
        " *     response",
        " *     authnRequest",
        " *     spAdapterScriptHelper",
        " *     logger",
        " */",
        "function preSingleSignOnRequest() {",
        "}",
        "",
        "/*",
        " * Available variables for preSingleSignOnProcess:",
        " *     hostedEntityId",
        " *     realm",
        " *     request",
        " *     response",
        " *     authnRequest",
        " *     res",
        " *     profile",
        " *     spAdapterScriptHelper",
        " *     logger",
        " */",
        "function preSingleSignOnProcess() {",
        "}",
        "",
        "/*",
        " * Available variables for postSingleSignOnSuccess:",
        " *     hostedEntityId",
        " *     realm",
        " *     request",
        " *     response",
        " *     out",
        " *     session",
        " *     authnRequest",
        " *     res",
        " *     profile",
        " *     isFederation",
        " *     spAdapterScriptHelper",
        " *     logger",
        " *",
        " * Return - true if response is being redirected, false if not. Default to false.",
        " */",
        "function postSingleSignOnSuccess() {",
        "    return false;",
        "}",
        "",
        "/*",
        " * Available variables for postSingleSignOnFailure:",
        " *     hostedEntityId",
        " *     realm",
        " *     request",
        " *     response",
        " *     authnRequest",
        " *     res",
        " *     profile",
        " *     failureCode",
        " *     spAdapterScriptHelper",
        " *     logger",
        " *",
        " * Return - true if response is being redirected, false if not. Default to false.",
        " */",
        "function postSingleSignOnFailure() {",
        "    return false;",
        "}",
        "",
        "/*",
        " * Available variables for postNewNameIDSuccess:",
        " *     hostedEntityId",
        " *     realm",
        " *     request",
        " *     response",
        " *     userId",
        " *     idRequest",
        " *     idResponse",
        " *     binding",
        " *     spAdapterScriptHelper",
        " *     logger",
        " */",
        "function postNewNameIDSuccess() {",
        "}",
        "",
        "/*",
        " * Available variables for postTerminateNameIDSuccess:",
        " *     hostedEntityId",
        " *     realm",
        " *     request",
        " *     response",
        " *     userId",
        " *     idRequest",
        " *     idResponse",
        " *     binding",
        " *     spAdapterScriptHelper",
        " *     logger",
        " */",
        "function postTerminateNameIDSuccess() {",
        "}",
        "",
        "/*",
        " * Available variables for preSingleLogoutProcess:",
        " *     hostedEntityId",
        " *     realm",
        " *     request",
        " *     response",
        " *     userId",
        " *     logoutRequest",
        " *     logoutResponse",
        " *     binding",
        " *     spAdapterScriptHelper",
        " *     logger",
        " */",
        "function preSingleLogoutProcess() {",
        "}",
        "",
        "/*",
        " * Available variables for postSingleLogoutSuccess:",
        " *     hostedEntityId",
        " *     realm",
        " *     request",
        " *     response",
        " *     userId",
        " *     logoutRequest",
        " *     logoutResponse",
        " *     binding",
        " *     spAdapterScriptHelper",
        " *     logger",
        " */",
        "function postSingleLogoutSuccess() {",
        "}",
      ],
    },
    "fdb60c75-d58b-409f-bef2-ce4ebb04c77c": {
      "_id": "fdb60c75-d58b-409f-bef2-ce4ebb04c77c",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Normalizes raw profile data from GitHub",
      "evaluatorVersion": "1.0",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "GitHub Profile Normalization (VS) - imported (2)",
      "script": [
        "/*",
        " * Copyright 2020 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "logger.warning("GitHub rawProfile: "+rawProfile)",
        "",
        "return json(object(",
        "        field("id", rawProfile.id),",
        "        field("displayName", rawProfile.name),",
        "        field("givenName", rawProfile.first_name),",
        "        field("familyName", rawProfile.last_name),",
        "        field("photoUrl", rawProfile.picture.data.url),",
        "        field("email", rawProfile.email),",
        "        field("username", rawProfile.email)))",
      ],
    },
  },
}
`;

exports[`ScriptOps importScripts() 2: Import script by name 1`] = `
[
  {
    "_id": "5b3e4dd2-8060-4029-9ec1-6867932ab939",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Check if username has already been collected.",
    "evaluatorVersion": "1.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "id=ba58ff99-76d3-4c69-9c4a-7f150ac70e2c,ou=user,ou=am-config",
    "lastModifiedDate": 1718832511977,
    "name": "FrodoTestScript5",
    "script": "LyogQ2hlY2sgVXNlcm5hbWUKICoKICogQXV0aG9yOiB2b2xrZXIuc2NoZXViZXJAZm9yZ2Vyb2NrLmNvbQogKiAKICogQ2hlY2sgaWYgdXNlcm5hbWUgaGFzIGFscmVhZHkgYmVlbiBjb2xsZWN0ZWQuCiAqIFJldHVybiAia25vd24iIGlmIHllcywgInVua25vd24iIG90aGVyd2lzZS4KICogCiAqIFRoaXMgc2NyaXB0IGRvZXMgbm90IG5lZWQgdG8gYmUgcGFyYW1ldHJpemVkLiBJdCB3aWxsIHdvcmsgcHJvcGVybHkgYXMgaXMuCiAqIAogKiBUaGUgU2NyaXB0ZWQgRGVjaXNpb24gTm9kZSBuZWVkcyB0aGUgZm9sbG93aW5nIG91dGNvbWVzIGRlZmluZWQ6CiAqIC0ga25vd24KICogLSB1bmtub3duCiAqLwooZnVuY3Rpb24gKCkgewogICAgaWYgKG51bGwgIT0gc2hhcmVkU3RhdGUuZ2V0KCJ1c2VybmFtZSIpKSB7CiAgICAgICAgb3V0Y29tZSA9ICJrbm93biI7CiAgICB9CiAgICBlbHNlIHsKICAgICAgICBvdXRjb21lID0gInVua25vd24iOwogICAgfQp9KCkpOw==",
  },
]
`;

exports[`ScriptOps importScripts() 3: Import script by id 1`] = `
[
  {
    "_id": "5b3e4dd2-8060-4029-9ec1-6867932ab939",
    "_rev": "-134762788",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "id=7a031a92-f70d-4b30-9d70-da7cfb1d9c93,ou=user,ou=am-config",
    "creationDate": 1723668133912,
    "default": false,
    "description": "Check if username has already been collected.",
    "evaluatorVersion": "1.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "id=7a031a92-f70d-4b30-9d70-da7cfb1d9c93,ou=user,ou=am-config",
    "lastModifiedDate": 1723668133912,
    "name": "FrodoTestScript5",
    "script": "LyogQ2hlY2sgVXNlcm5hbWUKICoKICogQXV0aG9yOiB2b2xrZXIuc2NoZXViZXJAZm9yZ2Vyb2NrLmNvbQogKiAKICogQ2hlY2sgaWYgdXNlcm5hbWUgaGFzIGFscmVhZHkgYmVlbiBjb2xsZWN0ZWQuCiAqIFJldHVybiAia25vd24iIGlmIHllcywgInVua25vd24iIG90aGVyd2lzZS4KICogCiAqIFRoaXMgc2NyaXB0IGRvZXMgbm90IG5lZWQgdG8gYmUgcGFyYW1ldHJpemVkLiBJdCB3aWxsIHdvcmsgcHJvcGVybHkgYXMgaXMuCiAqIAogKiBUaGUgU2NyaXB0ZWQgRGVjaXNpb24gTm9kZSBuZWVkcyB0aGUgZm9sbG93aW5nIG91dGNvbWVzIGRlZmluZWQ6CiAqIC0ga25vd24KICogLSB1bmtub3duCiAqLwooZnVuY3Rpb24gKCkgewogICAgaWYgKG51bGwgIT0gc2hhcmVkU3RhdGUuZ2V0KCJ1c2VybmFtZSIpKSB7CiAgICAgICAgb3V0Y29tZSA9ICJrbm93biI7CiAgICB9CiAgICBlbHNlIHsKICAgICAgICBvdXRjb21lID0gInVua25vd24iOwogICAgfQp9KCkpOw==",
  },
]
`;

exports[`ScriptOps importScripts() 4: Import no scripts when excluding default scripts and only default scripts given 1`] = `[]`;

exports[`ScriptOps readScript() 1: Read script by id 'c9cb4b1e-1cd3-4e5b-8f56-140f83ba9f6d' 1`] = `
{
  "_id": "c9cb4b1e-1cd3-4e5b-8f56-140f83ba9f6d",
  "context": "AUTHENTICATION_TREE_DECISION_NODE",
  "createdBy": "null",
  "creationDate": 0,
  "default": false,
  "description": "Check if username has already been collected.",
  "evaluatorVersion": "1.0",
  "language": "JAVASCRIPT",
  "lastModifiedBy": "null",
  "lastModifiedDate": 0,
  "name": "FrodoTestScript1",
  "script": "LyogQ2hlY2sgVXNlcm5hbWUKICoKICogQXV0aG9yOiB2b2xrZXIuc2NoZXViZXJAZm9yZ2Vyb2NrLmNvbQogKiAKICogQ2hlY2sgaWYgdXNlcm5hbWUgaGFzIGFscmVhZHkgYmVlbiBjb2xsZWN0ZWQuCiAqIFJldHVybiAia25vd24iIGlmIHllcywgInVua25vd24iIG90aGVyd2lzZS4KICogCiAqIFRoaXMgc2NyaXB0IGRvZXMgbm90IG5lZWQgdG8gYmUgcGFyYW1ldHJpemVkLiBJdCB3aWxsIHdvcmsgcHJvcGVybHkgYXMgaXMuCiAqIAogKiBUaGUgU2NyaXB0ZWQgRGVjaXNpb24gTm9kZSBuZWVkcyB0aGUgZm9sbG93aW5nIG91dGNvbWVzIGRlZmluZWQ6CiAqIC0ga25vd24KICogLSB1bmtub3duCiAqLwooZnVuY3Rpb24gKCkgewogICAgaWYgKG51bGwgIT0gc2hhcmVkU3RhdGUuZ2V0KCJ1c2VybmFtZSIpKSB7CiAgICAgICAgb3V0Y29tZSA9ICJrbm93biI7CiAgICB9CiAgICBlbHNlIHsKICAgICAgICBvdXRjb21lID0gInVua25vd24iOwogICAgfQp9KCkpOw==",
}
`;

exports[`ScriptOps readScriptByName() 1: Read script by name 'FrodoTestScript1' 1`] = `
{
  "_id": "c9cb4b1e-1cd3-4e5b-8f56-140f83ba9f6d",
  "context": "AUTHENTICATION_TREE_DECISION_NODE",
  "createdBy": "null",
  "creationDate": 0,
  "default": false,
  "description": "Check if username has already been collected.",
  "evaluatorVersion": "1.0",
  "language": "JAVASCRIPT",
  "lastModifiedBy": "null",
  "lastModifiedDate": 0,
  "name": "FrodoTestScript1",
  "script": "LyogQ2hlY2sgVXNlcm5hbWUKICoKICogQXV0aG9yOiB2b2xrZXIuc2NoZXViZXJAZm9yZ2Vyb2NrLmNvbQogKiAKICogQ2hlY2sgaWYgdXNlcm5hbWUgaGFzIGFscmVhZHkgYmVlbiBjb2xsZWN0ZWQuCiAqIFJldHVybiAia25vd24iIGlmIHllcywgInVua25vd24iIG90aGVyd2lzZS4KICogCiAqIFRoaXMgc2NyaXB0IGRvZXMgbm90IG5lZWQgdG8gYmUgcGFyYW1ldHJpemVkLiBJdCB3aWxsIHdvcmsgcHJvcGVybHkgYXMgaXMuCiAqIAogKiBUaGUgU2NyaXB0ZWQgRGVjaXNpb24gTm9kZSBuZWVkcyB0aGUgZm9sbG93aW5nIG91dGNvbWVzIGRlZmluZWQ6CiAqIC0ga25vd24KICogLSB1bmtub3duCiAqLwooZnVuY3Rpb24gKCkgewogICAgaWYgKG51bGwgIT0gc2hhcmVkU3RhdGUuZ2V0KCJ1c2VybmFtZSIpKSB7CiAgICAgICAgb3V0Y29tZSA9ICJrbm93biI7CiAgICB9CiAgICBlbHNlIHsKICAgICAgICBvdXRjb21lID0gInVua25vd24iOwogICAgfQp9KCkpOw==",
}
`;

exports[`ScriptOps readScripts() 1: Read scripts 1`] = `
[
  {
    "_id": "703dab1a-1921-4981-98dd-b8e5349d8548",
    "context": "AUTHENTICATION_SERVER_SIDE",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Default global script for server side Device Id (Match) Authentication Module",
    "evaluatorVersion": "1.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Device Id (Match) - Server Side",
    "script": "LyoKICogRE8gTk9UIEFMVEVSIE9SIFJFTU9WRSBDT1BZUklHSFQgTk9USUNFUyBPUiBUSElTIEhFQURFUi4KICoKICogQ29weXJpZ2h0IChjKSAyMDA5IFN1biBNaWNyb3N5c3RlbXMgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFRoZSBjb250ZW50cyBvZiB0aGlzIGZpbGUgYXJlIHN1YmplY3QgdG8gdGhlIHRlcm1zCiAqIG9mIHRoZSBDb21tb24gRGV2ZWxvcG1lbnQgYW5kIERpc3RyaWJ1dGlvbiBMaWNlbnNlCiAqICh0aGUgTGljZW5zZSkuIFlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluCiAqIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4KICoKICogWW91IGNhbiBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CiAqIGh0dHBzOi8vb3BlbnNzby5kZXYuamF2YS5uZXQvcHVibGljL0NEREx2MS4wLmh0bWwgb3IKICogb3BlbnNzby9sZWdhbC9DRERMdjEuMC50eHQKICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nCiAqIHBlcm1pc3Npb24gYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgogKgogKiBXaGVuIGRpc3RyaWJ1dGluZyBDb3ZlcmVkIENvZGUsIGluY2x1ZGUgdGhpcyBDRERMCiAqIEhlYWRlciBOb3RpY2UgaW4gZWFjaCBmaWxlIGFuZCBpbmNsdWRlIHRoZSBMaWNlbnNlIGZpbGUKICogYXQgb3BlbnNzby9sZWdhbC9DRERMdjEuMC50eHQuCiAqIElmIGFwcGxpY2FibGUsIGFkZCB0aGUgZm9sbG93aW5nIGJlbG93IHRoZSBDRERMIEhlYWRlciwKICogd2l0aCB0aGUgZmllbGRzIGVuY2xvc2VkIGJ5IGJyYWNrZXRzIFtdIHJlcGxhY2VkIGJ5CiAqIHlvdXIgb3duIGlkZW50aWZ5aW5nIGluZm9ybWF0aW9uOgogKiAiUG9ydGlvbnMgQ29weXJpZ2h0ZWQgW3llYXJdIFtuYW1lIG9mIGNvcHlyaWdodCBvd25lcl0iCiAqCiAqLwovKgogKiBQb3J0aW9ucyBDb3B5cmlnaHRlZCAyMDEzIFN5bnRlZ3JpdHkuCiAqIFBvcnRpb25zIENvcHlyaWdodGVkIDIwMTMtMjAyMyBGb3JnZVJvY2sgQVMuCiAqLwoKdmFyIFNjYWxhckNvbXBhcmF0b3IgPSB7fSwgU2NyZWVuQ29tcGFyYXRvciA9IHt9LCBNdWx0aVZhbHVlQ29tcGFyYXRvciA9IHt9LCBVc2VyQWdlbnRDb21wYXJhdG9yID0ge30sIEdlb2xvY2F0aW9uQ29tcGFyYXRvciA9IHt9OwoKdmFyIGNvbmZpZyA9IHsKICAgIHByb2ZpbGVFeHBpcmF0aW9uOiAzMCwgICAgICAgICAgICAgIC8vaW4gZGF5cwogICAgbWF4UHJvZmlsZXNBbGxvd2VkOiA1LAogICAgbWF4UGVuYWx0eVBvaW50czogMCwKICAgIGF0dHJpYnV0ZXM6IHsKICAgICAgICBzY3JlZW46IHsKICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUsCiAgICAgICAgICAgIGNvbXBhcmF0b3I6IFNjcmVlbkNvbXBhcmF0b3IsCiAgICAgICAgICAgIGFyZ3M6IHsKICAgICAgICAgICAgICAgIHBlbmFsdHlQb2ludHM6IDUwCiAgICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHBsdWdpbnM6IHsKICAgICAgICAgICAgaW5zdGFsbGVkUGx1Z2luczogewogICAgICAgICAgICAgICAgcmVxdWlyZWQ6IGZhbHNlLAogICAgICAgICAgICAgICAgY29tcGFyYXRvcjogTXVsdGlWYWx1ZUNvbXBhcmF0b3IsCiAgICAgICAgICAgICAgICBhcmdzOiB7CiAgICAgICAgICAgICAgICAgICAgbWF4UGVyY2VudGFnZURpZmZlcmVuY2U6IDEwLAogICAgICAgICAgICAgICAgICAgIG1heERpZmZlcmVuY2VzOiA1LAogICAgICAgICAgICAgICAgICAgIHBlbmFsdHlQb2ludHM6IDEwMAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBmb250czogewogICAgICAgICAgICBpbnN0YWxsZWRGb250czogewogICAgICAgICAgICAgICAgcmVxdWlyZWQ6IGZhbHNlLAogICAgICAgICAgICAgICAgY29tcGFyYXRvcjogTXVsdGlWYWx1ZUNvbXBhcmF0b3IsCiAgICAgICAgICAgICAgICBhcmdzOiB7CiAgICAgICAgICAgICAgICAgICAgbWF4UGVyY2VudGFnZURpZmZlcmVuY2U6IDEwLAogICAgICAgICAgICAgICAgICAgIG1heERpZmZlcmVuY2VzOiA1LAogICAgICAgICAgICAgICAgICAgIHBlbmFsdHlQb2ludHM6IDEwMAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB0aW1lem9uZTogewogICAgICAgICAgICB0aW1lem9uZTogewogICAgICAgICAgICAgICAgcmVxdWlyZWQ6IGZhbHNlLAogICAgICAgICAgICAgICAgY29tcGFyYXRvcjogU2NhbGFyQ29tcGFyYXRvciwKICAgICAgICAgICAgICAgIGFyZ3M6IHsKICAgICAgICAgICAgICAgICAgICBwZW5hbHR5UG9pbnRzOiAxMDAKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgdXNlckFnZW50OiB7CiAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLAogICAgICAgICAgICBjb21wYXJhdG9yOiBVc2VyQWdlbnRDb21wYXJhdG9yLAogICAgICAgICAgICBhcmdzOiB7CiAgICAgICAgICAgICAgICBpZ25vcmVWZXJzaW9uOiB0cnVlLAogICAgICAgICAgICAgICAgcGVuYWx0eVBvaW50czogMTAwCiAgICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIGdlb2xvY2F0aW9uOiB7CiAgICAgICAgICAgIHJlcXVpcmVkOiBmYWxzZSwKICAgICAgICAgICAgY29tcGFyYXRvcjogR2VvbG9jYXRpb25Db21wYXJhdG9yLAogICAgICAgICAgICBhcmdzOiB7CiAgICAgICAgICAgICAgICBhbGxvd2VkUmFuZ2U6IDEwMCwgICAgICAgICAgICAvL2luIG1pbGVzCiAgICAgICAgICAgICAgICBwZW5hbHR5UG9pbnRzOiAxMDAKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfTsKCi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLy8KLy8gICAgICAgICAgICAgICAgICAgICAgICAgICBDb21wYXJhdG9yIGZ1bmN0aW9ucyAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLwovLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vCgp2YXIgYWxsLCBhbnksIGNhbGN1bGF0ZURpc3RhbmNlLCBjYWxjdWxhdGVJbnRlcnNlY3Rpb24sIGNhbGN1bGF0ZVBlcmNlbnRhZ2UsIG51bGxPclVuZGVmaW5lZCwgc3BsaXRBbmRUcmltLAogICAgdW5kZWZpbmVkTG9jYXRpb247CgovLyBDb21wYXJpc29uUmVzdWx0CgovKioKICogQ29uc3RydWN0cyBhbiBpbnN0YW5jZSBvZiBhIENvbXBhcmlzb25SZXN1bHQgd2l0aCB0aGUgZ2l2ZW4gcGVuYWx0eSBwb2ludHMuCiAqCiAqIEBwYXJhbSBwZW5hbHR5UG9pbnRzIChOdW1iZXIpIFRoZSBwZW5hbHR5IHBvaW50cyBmb3IgdGhlIGNvbXBhcmlzb24gKGRlZmF1bHRzIHRvIDApLgogKiBAcGFyYW0gYWRkaXRpb25hbEluZm9JbkN1cnJlbnRWYWx1ZSAoYm9vbGVhbikgV2hldGhlciB0aGUgY3VycmVudCB2YWx1ZSBjb250YWlucyBtb3JlIGluZm9ybWF0aW9uCiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGFuIHRoZSBzdG9yZWQgdmFsdWUgKGRlZmF1bHRzIHRvIGZhbHNlKS4KICovCmZ1bmN0aW9uIENvbXBhcmlzb25SZXN1bHQoKSB7CgogICAgdmFyIHBlbmFsdHlQb2ludHMgPSAwLAogICAgICAgIGFkZGl0aW9uYWxJbmZvSW5DdXJyZW50VmFsdWUgPSBmYWxzZTsKCiAgICBpZiAoYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQpIHsKICAgICAgICBwZW5hbHR5UG9pbnRzID0gYXJndW1lbnRzWzBdOwogICAgICAgIGFkZGl0aW9uYWxJbmZvSW5DdXJyZW50VmFsdWUgPSBhcmd1bWVudHNbMV07CiAgICB9CgogICAgaWYgKGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkICYmIGFyZ3VtZW50c1sxXSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgaWYgKHR5cGVvZihhcmd1bWVudHNbMF0pID09PSAiYm9vbGVhbiIpIHsKICAgICAgICAgICAgYWRkaXRpb25hbEluZm9JbkN1cnJlbnRWYWx1ZSA9IGFyZ3VtZW50c1swXTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBwZW5hbHR5UG9pbnRzID0gYXJndW1lbnRzWzBdOwogICAgICAgIH0KICAgIH0KCiAgICB0aGlzLnBlbmFsdHlQb2ludHMgPSBwZW5hbHR5UG9pbnRzOwogICAgdGhpcy5hZGRpdGlvbmFsSW5mb0luQ3VycmVudFZhbHVlID0gYWRkaXRpb25hbEluZm9JbkN1cnJlbnRWYWx1ZTsKCn0KCkNvbXBhcmlzb25SZXN1bHQuWkVST19QRU5BTFRZX1BPSU5UUyA9IG5ldyBDb21wYXJpc29uUmVzdWx0KDApOwoKLyoqCiAqIFN0YXRpYyBtZXRob2QgZm9yIGZ1bmN0aW9uYWwgcHJvZ3JhbW1pbmcuCiAqCiAqIEByZXR1cm4gYm9vbGVhbiB0cnVlIGlmIGNvbXBhcmlzb25SZXN1bHQuaXNTdWNjZXNzZnVsKCkuCiAqLwpDb21wYXJpc29uUmVzdWx0LmlzU3VjY2Vzc2Z1bCA9ICBmdW5jdGlvbihjb21wYXJpc29uUmVzdWx0KSB7CiAgICByZXR1cm4gY29tcGFyaXNvblJlc3VsdC5pc1N1Y2Nlc3NmdWwoKTsKfTsKCgovKioKICogU3RhdGljIG1ldGhvZCBmb3IgZnVuY3Rpb25hbCBwcm9ncmFtbWluZy4KICoKICogQHJldHVybiBib29sZWFuIHRydWUgaWYgY29tcGFyaXNvblJlc3VsdC5hZGRpdGlvbmFsSW5mb0luQ3VycmVudFZhbHVlLgogKi8KQ29tcGFyaXNvblJlc3VsdC5hZGRpdGlvbmFsSW5mb0luQ3VycmVudFZhbHVlID0gIGZ1bmN0aW9uKGNvbXBhcmlzb25SZXN1bHQpIHsKICAgIHJldHVybiBjb21wYXJpc29uUmVzdWx0LmFkZGl0aW9uYWxJbmZvSW5DdXJyZW50VmFsdWU7Cn07CgovKioKICogQ29tcGFyaXNvbiBmdW5jdGlvbiB0aGF0IGNhbiBiZSBwcm92aWRlZCBhcyBhbiBhcmd1bWVudCB0byBhcnJheS5zb3J0CiAqLwpDb21wYXJpc29uUmVzdWx0LmNvbXBhcmUgPSBmdW5jdGlvbihmaXJzdCwgc2Vjb25kKSB7CiAgICBpZiAobnVsbE9yVW5kZWZpbmVkKGZpcnN0KSAmJiBudWxsT3JVbmRlZmluZWQoc2Vjb25kKSkgewogICAgICAgIHJldHVybiAwOwogICAgfSBlbHNlIGlmIChudWxsT3JVbmRlZmluZWQoZmlyc3QpKSB7CiAgICAgICAgcmV0dXJuIC0xOwogICAgfSBlbHNlIGlmIChudWxsT3JVbmRlZmluZWQoc2Vjb25kKSkgewogICAgICAgIHJldHVybiAxOwogICAgfSBlbHNlIHsKICAgICAgICBpZiAoZmlyc3QucGVuYWx0eVBvaW50cyAhPT0gc2Vjb25kLnBlbmFsdHlQb2ludHMpIHsKICAgICAgICAgICAgcmV0dXJuIGZpcnN0LnBlbmFsdHlQb2ludHMgLSBzZWNvbmQucGVuYWx0eVBvaW50czsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gKGZpcnN0LmFkZGl0aW9uYWxJbmZvSW5DdXJyZW50VmFsdWUgPyAxIDogMCkgLSAoc2Vjb25kLmFkZGl0aW9uYWxJbmZvSW5DdXJyZW50VmFsdWUgPyAxIDogMCk7CiAgICAgICAgfQogICAgfQp9OwoKLyoqCiAqIEFtYWxnYW1hdGVzIHRoZSBnaXZlbiBDb21wYXJpc29uUmVzdWx0IGludG8gdGhpcyBDb21wYXJpc29uUmVzdWx0LgogKgogKiBAcGFyYW0gY29tcGFyaXNvblJlc3VsdCBUaGUgQ29tcGFyaXNvblJlc3VsdCB0byBpbmNsdWRlLgogKi8KQ29tcGFyaXNvblJlc3VsdC5wcm90b3R5cGUuYWRkQ29tcGFyaXNvblJlc3VsdCA9IGZ1bmN0aW9uKGNvbXBhcmlzb25SZXN1bHQpIHsKICAgIHRoaXMucGVuYWx0eVBvaW50cyArPSBjb21wYXJpc29uUmVzdWx0LnBlbmFsdHlQb2ludHM7CiAgICBpZiAoY29tcGFyaXNvblJlc3VsdC5hZGRpdGlvbmFsSW5mb0luQ3VycmVudFZhbHVlKSB7CiAgICAgICAgdGhpcy5hZGRpdGlvbmFsSW5mb0luQ3VycmVudFZhbHVlID0gY29tcGFyaXNvblJlc3VsdC5hZGRpdGlvbmFsSW5mb0luQ3VycmVudFZhbHVlOwogICAgfQp9OwoKLyoqCiAqIFJldHVybnMgdHJ1ZSBpZiBubyBwZW5hbHR5IHBvaW50cyBoYXZlIGJlZW4gYXNzaWduZWQgZm9yIHRoZSBjb21wYXJpc29uLgogKgogKiBAcmV0dXJuIGJvb2xlYW4gdHJ1ZSBpZiB0aGUgY29tcGFyaXNvbiB3YXMgc3VjY2Vzc2Z1bC4KICovCkNvbXBhcmlzb25SZXN1bHQucHJvdG90eXBlLmlzU3VjY2Vzc2Z1bCA9IGZ1bmN0aW9uKCkgewogICAgcmV0dXJuIG51bGxPclVuZGVmaW5lZCh0aGlzLnBlbmFsdHlQb2ludHMpIHx8IHRoaXMucGVuYWx0eVBvaW50cyA9PT0gMDsKfTsKCi8qKgogKiBDb21wYXJlcyB0d28gc2ltcGxlIG9iamVjdHMgKFN0cmluZ3xOdW1iZXIpIGFuZCBpZiB0aGV5IGFyZSBlcXVhbCB0aGVuIHJldHVybnMgYSBDb21wYXJpc29uUmVzdWx0IHdpdGggemVybwogKiBwZW5hbHR5IHBvaW50cyBhc3NpZ25lZCwgb3RoZXJ3aXNlIHJldHVybnMgYSBDb21wYXJpc29uUmVzdWx0IHdpdGggdGhlIGdpdmVuIG51bWJlciBvZiBwZW5hbHR5IHBvaW50cyBhc3NpZ25lZC4KICoKICogQHBhcmFtIGN1cnJlbnRWYWx1ZSAoU3RyaW5nfE51bWJlcikgVGhlIGN1cnJlbnQgdmFsdWUuCiAqIEBwYXJhbSBzdG9yZWRWYWx1ZSAoU3RyaW5nfE51bWJlcikgVGhlIHN0b3JlZCB2YWx1ZS4KICogQHBhcmFtIGNvbmZpZzogewogKiAgICAgICAgICAgICJwZW5hbHR5UG9pbnRzIjogKE51bWJlcikgVGhlIG51bWJlciBvZiBwZW5hbHR5IHBvaW50cy4KICogICAgICAgIH0KICogQHJldHVybiBDb21wYXJpc29uUmVzdWx0LgogKi8KU2NhbGFyQ29tcGFyYXRvci5jb21wYXJlID0gZnVuY3Rpb24gKGN1cnJlbnRWYWx1ZSwgc3RvcmVkVmFsdWUsIGNvbmZpZykgewogICAgaWYgKGxvZ2dlci5tZXNzYWdlRW5hYmxlZCgpKSB7CiAgICAgICAgbG9nZ2VyLm1lc3NhZ2UoIlN0cmluZ0NvbXBhcmF0b3IuY29tcGFyZTpjdXJyZW50VmFsdWU6ICIgKyBKU09OLnN0cmluZ2lmeShjdXJyZW50VmFsdWUpKTsKICAgICAgICBsb2dnZXIubWVzc2FnZSgiU3RyaW5nQ29tcGFyYXRvci5jb21wYXJlOnN0b3JlZFZhbHVlOiAiICsgSlNPTi5zdHJpbmdpZnkoc3RvcmVkVmFsdWUpKTsKICAgICAgICBsb2dnZXIubWVzc2FnZSgiU3RyaW5nQ29tcGFyYXRvci5jb21wYXJlOmNvbmZpZzogIiArIEpTT04uc3RyaW5naWZ5KGNvbmZpZykpOwogICAgfQogICAgaWYgKGNvbmZpZy5wZW5hbHR5UG9pbnRzID09PSAwKSB7CiAgICAgICAgcmV0dXJuIENvbXBhcmlzb25SZXN1bHQuWkVST19QRU5BTFRZX1BPSU5UUzsKICAgIH0KCiAgICBpZiAoIW51bGxPclVuZGVmaW5lZChzdG9yZWRWYWx1ZSkpIHsKICAgICAgICBpZiAobnVsbE9yVW5kZWZpbmVkKGN1cnJlbnRWYWx1ZSkgfHwgY3VycmVudFZhbHVlICE9PSBzdG9yZWRWYWx1ZSkgewogICAgICAgICAgICByZXR1cm4gbmV3IENvbXBhcmlzb25SZXN1bHQoY29uZmlnLnBlbmFsdHlQb2ludHMpOwogICAgICAgIH0KICAgIH0gZWxzZSBpZiAoIW51bGxPclVuZGVmaW5lZChjdXJyZW50VmFsdWUpKSB7CiAgICAgICAgcmV0dXJuIG5ldyBDb21wYXJpc29uUmVzdWx0KHRydWUpOwogICAgfQoKICAgIHJldHVybiBDb21wYXJpc29uUmVzdWx0LlpFUk9fUEVOQUxUWV9QT0lOVFM7Cn07CgovKioKICogQ29tcGFyZXMgdHdvIHNjcmVlbnMgYW5kIGlmIHRoZXkgYXJlIGVxdWFsIHRoZW4gcmV0dXJucyBhIENvbXBhcmlzb25SZXN1bHQgd2l0aCB6ZXJvIHBlbmFsdHkgcG9pbnRzIGFzc2lnbmVkLAogKiBvdGhlcndpc2UgcmV0dXJucyBhIENvbXBhcmlzb25SZXN1bHQgd2l0aCB0aGUgZ2l2ZW4gbnVtYmVyIG9mIHBlbmFsdHkgcG9pbnRzIGFzc2lnbmVkLgogKgogKiBAcGFyYW0gY3VycmVudFZhbHVlOiB7CiAqICAgICAgICAgICAgInNjcmVlbldpZHRoIjogKE51bWJlcikgVGhlIGN1cnJlbnQgY2xpZW50IHNjcmVlbiB3aWR0aC4KICogICAgICAgICAgICAic2NyZWVuSGVpZ2h0IjogKE51bWJlcikgVGhlIGN1cnJlbnQgY2xpZW50IHNjcmVlbiBoZWlnaHQuCiAqICAgICAgICAgICAgInNjcmVlbkNvbG91ckRlcHRoIjogKE51bWJlcikgVGhlIGN1cnJlbnQgY2xpZW50IHNjcmVlbiBjb2xvdXIgZGVwdGguCiAqICAgICAgICB9CiAqIEBwYXJhbSBzdG9yZWRWYWx1ZTogewogKiAgICAgICAgICAgICJzY3JlZW5XaWR0aCI6IChOdW1iZXIpIFRoZSBzdG9yZWQgY2xpZW50IHNjcmVlbiB3aWR0aC4KICogICAgICAgICAgICAic2NyZWVuSGVpZ2h0IjogKE51bWJlcikgVGhlIHN0b3JlZCBjbGllbnQgc2NyZWVuIGhlaWdodC4KICogICAgICAgICAgICAic2NyZWVuQ29sb3VyRGVwdGgiOiAoTnVtYmVyKSBUaGUgc3RvcmVkIGNsaWVudCBzY3JlZW4gY29sb3VyIGRlcHRoLgogKiAgICAgICAgfQogKiBAcGFyYW0gY29uZmlnOiB7CiAqICAgICAgICAgICAgInBlbmFsdHlQb2ludHMiOiAoTnVtYmVyKSBUaGUgbnVtYmVyIG9mIHBlbmFsdHkgcG9pbnRzLgogKiAgICAgICAgfQogKiBAcmV0dXJuIENvbXBhcmlzb25SZXN1bHQKICovClNjcmVlbkNvbXBhcmF0b3IuY29tcGFyZSA9IGZ1bmN0aW9uIChjdXJyZW50VmFsdWUsIHN0b3JlZFZhbHVlLCBjb25maWcpIHsKICAgIGlmIChsb2dnZXIubWVzc2FnZUVuYWJsZWQoKSkgewogICAgICAgIGxvZ2dlci5tZXNzYWdlKCJTY3JlZW5Db21wYXJhdG9yLmNvbXBhcmU6Y3VycmVudFZhbHVlOiAiICsgSlNPTi5zdHJpbmdpZnkoY3VycmVudFZhbHVlKSk7CiAgICAgICAgbG9nZ2VyLm1lc3NhZ2UoIlNjcmVlbkNvbXBhcmF0b3IuY29tcGFyZTpzdG9yZWRWYWx1ZTogIiArIEpTT04uc3RyaW5naWZ5KHN0b3JlZFZhbHVlKSk7CiAgICAgICAgbG9nZ2VyLm1lc3NhZ2UoIlNjcmVlbkNvbXBhcmF0b3IuY29tcGFyZTpjb25maWc6ICIgKyBKU09OLnN0cmluZ2lmeShjb25maWcpKTsKICAgIH0KCiAgICBpZiAobnVsbE9yVW5kZWZpbmVkKGN1cnJlbnRWYWx1ZSkpIHsKICAgICAgICBjdXJyZW50VmFsdWUgPSB7c2NyZWVuV2lkdGg6IG51bGwsIHNjcmVlbkhlaWdodDogbnVsbCwgc2NyZWVuQ29sb3VyRGVwdGg6IG51bGx9OwogICAgfQogICAgaWYgKG51bGxPclVuZGVmaW5lZChzdG9yZWRWYWx1ZSkpIHsKICAgICAgICBzdG9yZWRWYWx1ZSA9IHtzY3JlZW5XaWR0aDogbnVsbCwgc2NyZWVuSGVpZ2h0OiBudWxsLCBzY3JlZW5Db2xvdXJEZXB0aDogbnVsbH07CiAgICB9CgogICAgdmFyIGNvbXBhcmlzb25SZXN1bHRzID0gWwogICAgICAgIFNjYWxhckNvbXBhcmF0b3IuY29tcGFyZShjdXJyZW50VmFsdWUuc2NyZWVuV2lkdGgsIHN0b3JlZFZhbHVlLnNjcmVlbldpZHRoLCBjb25maWcpLAogICAgICAgIFNjYWxhckNvbXBhcmF0b3IuY29tcGFyZShjdXJyZW50VmFsdWUuc2NyZWVuSGVpZ2h0LCBzdG9yZWRWYWx1ZS5zY3JlZW5IZWlnaHQsIGNvbmZpZyksCiAgICAgICAgU2NhbGFyQ29tcGFyYXRvci5jb21wYXJlKGN1cnJlbnRWYWx1ZS5zY3JlZW5Db2xvdXJEZXB0aCwgc3RvcmVkVmFsdWUuc2NyZWVuQ29sb3VyRGVwdGgsIGNvbmZpZyldOwoKICAgIGlmIChhbGwoY29tcGFyaXNvblJlc3VsdHMsIENvbXBhcmlzb25SZXN1bHQuaXNTdWNjZXNzZnVsKSkgewogICAgICAgIHJldHVybiBuZXcgQ29tcGFyaXNvblJlc3VsdChhbnkoY29tcGFyaXNvblJlc3VsdHMsIENvbXBhcmlzb25SZXN1bHQuYWRkaXRpb25hbEluZm9JbkN1cnJlbnRWYWx1ZSkpOwogICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gbmV3IENvbXBhcmlzb25SZXN1bHQoY29uZmlnLnBlbmFsdHlQb2ludHMpOwogICAgfQp9OwoKLyoqCiAqIFNwbGl0cyBib3RoIHZhbHVlcyB1c2luZyBkZWxpbWl0ZXIsIHRyaW1zIGV2ZXJ5IHZhbHVlIGFuZCBjb21wYXJlcyBjb2xsZWN0aW9ucyBvZiB2YWx1ZXMuCiAqIFJldHVybnMgemVyby1yZXN1bHQgZm9yIHNhbWUgbXVsdGktdmFsdWUgYXR0cmlidXRlcy4KICoKICogSWYgY29sbGVjdGlvbnMgYXJlIG5vdCBzYW1lIGNoZWNrcyBpZiBudW1iZXIgb2YgZGlmZmVyZW5jZXMgaXMgbGVzcyBvciBlcXVhbCBtYXhEaWZmZXJlbmNlcyBvcgogKiBwZXJjZW50YWdlIG9mIGRpZmZlcmVuY2UgaXMgbGVzcyBvciBlcXVhbCBtYXhQZXJjZW50YWdlRGlmZmVyZW5jZS4KICoKICogSWYgeWVzIHRoZW4gcmV0dXJucyB6ZXJvLXJlc3VsdCB3aXRoIGFkZGl0aW9uYWwgaW5mbywgZWxzZSByZXR1cm5zIHBlbmFsdHlQb2ludHMtcmVzdWx0LgogKgogKiBAcGFyYW0gY3VycmVudFZhbHVlOiAoU3RyaW5nKSBUaGUgY3VycmVudCB2YWx1ZS4KICogQHBhcmFtIHN0b3JlZFZhbHVlOiAoU3RyaW5nKSBUaGUgc3RvcmVkIHZhbHVlLgogKiBAcGFyYW0gY29uZmlnOiB7CiAqICAgICAgICAgICAgIm1heFBlcmNlbnRhZ2VEaWZmZXJlbmNlIjogKE51bWJlcikgVGhlIG1heCBkaWZmZXJlbmNlIHBlcmNlbnRhZ2UgaW4gdGhlIHZhbHVlcywKICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZWZvcmUgdGhlIHBlbmFsdHkgaXMgYXNzaWduZWQuCiAqICAgICAgICAgICAgIm1heERpZmZlcmVuY2VzIjogKE51bWJlcikgVGhlIG1heCBudW1iZXIgb2YgZGlmZmVyZW5jZXMgaW4gdGhlIHZhbHVlcywKICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZWZvcmUgdGhlIHBlbmFsdHkgcG9pbnRzIGFyZSBhc3NpZ25lZC4KICogICAgICAgICAgICAicGVuYWx0eVBvaW50cyI6IChOdW1iZXIpIFRoZSBudW1iZXIgb2YgcGVuYWx0eSBwb2ludHMuCiAgKiAgICAgICAgfQogKiBAcmV0dXJuIENvbXBhcmlzb25SZXN1bHQKICovCk11bHRpVmFsdWVDb21wYXJhdG9yLmNvbXBhcmUgPSBmdW5jdGlvbiAoY3VycmVudFZhbHVlLCBzdG9yZWRWYWx1ZSwgY29uZmlnKSB7CiAgICBpZiAobG9nZ2VyLm1lc3NhZ2VFbmFibGVkKCkpIHsKICAgICAgICBsb2dnZXIubWVzc2FnZSgiTXVsdGlWYWx1ZUNvbXBhcmF0b3IuY29tcGFyZTpjdXJyZW50VmFsdWU6ICIgKyBKU09OLnN0cmluZ2lmeShjdXJyZW50VmFsdWUpKTsKICAgICAgICBsb2dnZXIubWVzc2FnZSgiTXVsdGlWYWx1ZUNvbXBhcmF0b3IuY29tcGFyZTpzdG9yZWRWYWx1ZTogIiArIEpTT04uc3RyaW5naWZ5KHN0b3JlZFZhbHVlKSk7CiAgICAgICAgbG9nZ2VyLm1lc3NhZ2UoIk11bHRpVmFsdWVDb21wYXJhdG9yLmNvbXBhcmU6Y29uZmlnOiAiICsgSlNPTi5zdHJpbmdpZnkoY29uZmlnKSk7CiAgICB9CgogICAgdmFyIGRlbGltaXRlciA9ICI7IiwKICAgICAgICBjdXJyZW50VmFsdWVzID0gc3BsaXRBbmRUcmltKGN1cnJlbnRWYWx1ZSwgZGVsaW1pdGVyKSwKICAgICAgICBzdG9yZWRWYWx1ZXMgPSBzcGxpdEFuZFRyaW0oc3RvcmVkVmFsdWUsIGRlbGltaXRlciksCiAgICAgICAgbWF4TnVtYmVyT2ZFbGVtZW50cyA9IE1hdGgubWF4KGN1cnJlbnRWYWx1ZXMubGVuZ3RoLCBzdG9yZWRWYWx1ZXMubGVuZ3RoKSwKICAgICAgICBudW1iZXJPZlRoZVNhbWVFbGVtZW50cyA9IGNhbGN1bGF0ZUludGVyc2VjdGlvbihjdXJyZW50VmFsdWVzLCBzdG9yZWRWYWx1ZXMpLmxlbmd0aCwKICAgICAgICBudW1iZXJPZkRpZmZlcmVuY2VzID0gbWF4TnVtYmVyT2ZFbGVtZW50cyAtIG51bWJlck9mVGhlU2FtZUVsZW1lbnRzLAogICAgICAgIHBlcmNlbnRhZ2VPZkRpZmZlcmVuY2VzID0gY2FsY3VsYXRlUGVyY2VudGFnZShudW1iZXJPZkRpZmZlcmVuY2VzLCBtYXhOdW1iZXJPZkVsZW1lbnRzKTsKCiAgICBpZiAobnVsbE9yVW5kZWZpbmVkKHN0b3JlZFZhbHVlKSAmJiAhbnVsbE9yVW5kZWZpbmVkKGN1cnJlbnRWYWx1ZSkpIHsKICAgICAgICByZXR1cm4gbmV3IENvbXBhcmlzb25SZXN1bHQodHJ1ZSk7CiAgICB9CgogICAgaWYgKGxvZ2dlci5tZXNzYWdlRW5hYmxlZCgpKSB7CiAgICAgICAgbG9nZ2VyLm1lc3NhZ2UobnVtYmVyT2ZUaGVTYW1lRWxlbWVudHMgKyAiIG9mICIgKyBtYXhOdW1iZXJPZkVsZW1lbnRzICsgIiBhcmUgc2FtZSIpOwogICAgfQoKICAgIGlmIChtYXhOdW1iZXJPZkVsZW1lbnRzID09PSAwKSB7CiAgICAgICAgbG9nZ2VyLm1lc3NhZ2UoIklnbm9yZWQgYmVjYXVzZSBubyBhdHRyaWJ1dGVzIGZvdW5kIGluIGJvdGggcHJvZmlsZXMiKTsKICAgICAgICByZXR1cm4gQ29tcGFyaXNvblJlc3VsdC5aRVJPX1BFTkFMVFlfUE9JTlRTOwogICAgfQoKICAgIGlmIChudW1iZXJPZlRoZVNhbWVFbGVtZW50cyA9PT0gbWF4TnVtYmVyT2ZFbGVtZW50cykgewogICAgICAgIGxvZ2dlci5tZXNzYWdlKCJJZ25vcmVkIGJlY2F1c2UgYWxsIGF0dHJpYnV0ZXMgYXJlIHNhbWUiKTsKICAgICAgICByZXR1cm4gQ29tcGFyaXNvblJlc3VsdC5aRVJPX1BFTkFMVFlfUE9JTlRTOwogICAgfQoKICAgIGlmIChudW1iZXJPZkRpZmZlcmVuY2VzID4gY29uZmlnLm1heERpZmZlcmVuY2VzKSB7CiAgICAgICAgaWYgKGxvZ2dlci5tZXNzYWdlRW5hYmxlZCgpKSB7CiAgICAgICAgICAgIGxvZ2dlci5tZXNzYWdlKCJXb3VsZCBiZSBpZ25vcmVkIGlmIG5vdCBtb3JlIHRoYW4gIiArIGNvbmZpZy5tYXhEaWZmZXJlbmNlcyArICIgZGlmZmVyZW5jZXMiKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIG5ldyBDb21wYXJpc29uUmVzdWx0KGNvbmZpZy5wZW5hbHR5UG9pbnRzKTsKICAgIH0KCiAgICBpZiAocGVyY2VudGFnZU9mRGlmZmVyZW5jZXMgPiBjb25maWcubWF4UGVyY2VudGFnZURpZmZlcmVuY2UpIHsKICAgICAgICBpZiAobG9nZ2VyLm1lc3NhZ2VFbmFibGVkKCkpIHsKICAgICAgICAgICAgbG9nZ2VyLm1lc3NhZ2UocGVyY2VudGFnZU9mRGlmZmVyZW5jZXMgKyAiIHBlcmNlbnRzIGFyZSBkaWZmZXJlbnQiKTsKICAgICAgICAgICAgbG9nZ2VyLm1lc3NhZ2UoIldvdWxkIGJlIGlnbm9yZWQgaWYgbm90IG1vcmUgdGhhbiAiICsgY29uZmlnLm1heFBlcmNlbnRhZ2VEaWZmZXJlbmNlICsgIiBwZXJjZW50Iik7CiAgICAgICAgfQogICAgICAgIHJldHVybiBuZXcgQ29tcGFyaXNvblJlc3VsdChjb25maWcucGVuYWx0eVBvaW50cyk7CiAgICB9CgogICAgaWYgKGxvZ2dlci5tZXNzYWdlRW5hYmxlZCgpKSB7CiAgICAgICAgbG9nZ2VyLm1lc3NhZ2UoIklnbm9yZWQgYmVjYXVzZSBudW1iZXIgb2YgZGlmZmVyZW5jZXMoIiArIG51bWJlck9mRGlmZmVyZW5jZXMgKyAiKSBub3QgbW9yZSB0aGFuICIKICAgICAgICAgICAgKyBjb25maWcubWF4RGlmZmVyZW5jZXMpOwogICAgICAgIGxvZ2dlci5tZXNzYWdlKHBlcmNlbnRhZ2VPZkRpZmZlcmVuY2VzICsgIiBwZXJjZW50cyBhcmUgZGlmZmVyZW50Iik7CiAgICAgICAgbG9nZ2VyLm1lc3NhZ2UoIklnbm9yZWQgYmVjYXVzZSBub3QgbW9yZSB0aGFuICIgKyBjb25maWcubWF4UGVyY2VudGFnZURpZmZlcmVuY2UgKyAiIHBlcmNlbnQiKTsKICAgIH0KICAgIHJldHVybiBuZXcgQ29tcGFyaXNvblJlc3VsdCh0cnVlKTsKfTsKCi8qKgogKiBDb21wYXJlcyB0d28gVXNlciBBZ2VudCBTdHJpbmdzIGFuZCBpZiB0aGV5IGFyZSBlcXVhbCB0aGVuIHJldHVybnMgYSBDb21wYXJpc29uUmVzdWx0IHdpdGggemVybyBwZW5hbHR5CiAqIHBvaW50cyBhc3NpZ25lZCwgb3RoZXJ3aXNlIHJldHVybnMgYSBDb21wYXJpc29uUmVzdWx0IHdpdGggdGhlIGdpdmVuIG51bWJlciBvZiBwZW5hbHR5IHBvaW50cyBhc3NpZ25lZC4KICoKICogQHBhcmFtIGN1cnJlbnRWYWx1ZSAoU3RyaW5nKSBUaGUgY3VycmVudCB2YWx1ZS4KICogQHBhcmFtIHN0b3JlZFZhbHVlIChTdHJpbmcpIFRoZSBzdG9yZWQgdmFsdWUuCiAqIEBwYXJhbSBjb25maWc6IHsKICogICAgICAgICAgICAiaWdub3JlVmVyc2lvbiI6IChib29sZWFuKSBJZiB0aGUgdmVyc2lvbiBudW1iZXJzIGluIHRoZSBVc2VyIEFnZW50IFN0cmluZ3Mgc2hvdWxkIGJlIGlnbm9yZQogKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluIHRoZSBjb21wYXJpc29uLgogKiAgICAgICAgICAgICJwZW5hbHR5UG9pbnRzIjogKE51bWJlcikgVGhlIG51bWJlciBvZiBwZW5hbHR5IHBvaW50cy4KICogICAgICAgIH0KICogQHJldHVybiBBIENvbXBhcmlzb25SZXN1bHQuCiAqLwpVc2VyQWdlbnRDb21wYXJhdG9yLmNvbXBhcmUgPSBmdW5jdGlvbiAoY3VycmVudFZhbHVlLCBzdG9yZWRWYWx1ZSwgY29uZmlnKSB7CiAgICBpZiAobG9nZ2VyLm1lc3NhZ2VFbmFibGVkKCkpIHsKICAgICAgICBsb2dnZXIubWVzc2FnZSgiVXNlckFnZW50Q29tcGFyYXRvci5jb21wYXJlOmN1cnJlbnRWYWx1ZTogIiArIEpTT04uc3RyaW5naWZ5KGN1cnJlbnRWYWx1ZSkpOwogICAgICAgIGxvZ2dlci5tZXNzYWdlKCJVc2VyQWdlbnRDb21wYXJhdG9yLmNvbXBhcmU6c3RvcmVkVmFsdWU6ICIgKyBKU09OLnN0cmluZ2lmeShzdG9yZWRWYWx1ZSkpOwogICAgICAgIGxvZ2dlci5tZXNzYWdlKCJVc2VyQWdlbnRDb21wYXJhdG9yLmNvbXBhcmU6Y29uZmlnOiAiICsgSlNPTi5zdHJpbmdpZnkoY29uZmlnKSk7CiAgICB9CgogICAgaWYgKGNvbmZpZy5pZ25vcmVWZXJzaW9uKSB7CiAgICAgICAgLy8gcmVtb3ZlIHZlcnNpb24gbnVtYmVyCiAgICAgICAgY3VycmVudFZhbHVlID0gbnVsbE9yVW5kZWZpbmVkKGN1cnJlbnRWYWx1ZSkgPyBudWxsIDogY3VycmVudFZhbHVlLnJlcGxhY2UoL1tcZFwuXSsvZywgIiIpLnRyaW0oKTsKICAgICAgICBzdG9yZWRWYWx1ZSA9IG51bGxPclVuZGVmaW5lZChzdG9yZWRWYWx1ZSkgPyBudWxsIDogc3RvcmVkVmFsdWUucmVwbGFjZSgvW1xkXC5dKy9nLCAiIikudHJpbSgpOwogICAgfQoKICAgIHJldHVybiBTY2FsYXJDb21wYXJhdG9yLmNvbXBhcmUoY3VycmVudFZhbHVlLCBzdG9yZWRWYWx1ZSwgY29uZmlnKTsKfTsKCi8qKgogKiBDb21wYXJlcyB0d28gbG9jYXRpb25zLCB0YWtpbmcgaW50byBhY2NvdW50IGEgZGVncmVlIG9mIGRpZmZlcmVuY2UuCiAqCiAqIEBwYXJhbSBjdXJyZW50VmFsdWU6IHsKICogICAgICAgICAgICAibGF0aXR1ZGUiOiAoTnVtYmVyKSBUaGUgY3VycmVudCBsYXRpdHVkZS4KICogICAgICAgICAgICAibG9uZ2l0dWRlIjogKE51bWJlcikgVGhlIGN1cnJlbnQgbG9uZ2l0dWRlLgogKiAgICAgICAgfQogKiBAcGFyYW0gc3RvcmVkVmFsdWU6IHsKICogICAgICAgICAgICAibGF0aXR1ZGUiOiAoTnVtYmVyKSBUaGUgc3RvcmVkIGxhdGl0dWRlLgogKiAgICAgICAgICAgICJsb25naXR1ZGUiOiAoTnVtYmVyKSBUaGUgc3RvcmVkIGxvbmdpdHVkZS4KICogICAgICAgIH0KICogQHBhcmFtIGNvbmZpZzogewogKiAgICAgICAgICAgICJhbGxvd2VkUmFuZ2UiOiAoTnVtYmVyKSBUaGUgbWF4IGRpZmZlcmVuY2UgYWxsb3dlZCBpbiB0aGUgdHdvIGxvY2F0aW9ucywgYmVmb3JlIHRoZSBwZW5hbHR5IGlzIGFzc2lnbmVkLgogKiAgICAgICAgICAgICJwZW5hbHR5UG9pbnRzIjogKE51bWJlcikgVGhlIG51bWJlciBvZiBwZW5hbHR5IHBvaW50cy4KKiAgICAgICAgIH0KICogQHJldHVybiBDb21wYXJpc29uUmVzdWx0CiAqLwpHZW9sb2NhdGlvbkNvbXBhcmF0b3IuY29tcGFyZSA9IGZ1bmN0aW9uIChjdXJyZW50VmFsdWUsIHN0b3JlZFZhbHVlLCBjb25maWcpIHsKICAgIGlmIChsb2dnZXIubWVzc2FnZUVuYWJsZWQoKSkgewogICAgICAgIGxvZ2dlci5tZXNzYWdlKCJHZW9sb2NhdGlvbkNvbXBhcmF0b3IuY29tcGFyZTpjdXJyZW50VmFsdWU6ICIgKyBKU09OLnN0cmluZ2lmeShjdXJyZW50VmFsdWUpKTsKICAgICAgICBsb2dnZXIubWVzc2FnZSgiR2VvbG9jYXRpb25Db21wYXJhdG9yLmNvbXBhcmU6c3RvcmVkVmFsdWU6ICIgKyBKU09OLnN0cmluZ2lmeShzdG9yZWRWYWx1ZSkpOwogICAgICAgIGxvZ2dlci5tZXNzYWdlKCJHZW9sb2NhdGlvbkNvbXBhcmF0b3IuY29tcGFyZTpjb25maWc6ICIgKyBKU09OLnN0cmluZ2lmeShjb25maWcpKTsKICAgIH0KCiAgICAvLyBDaGVjayBmb3IgdW5kZWZpbmVkIHN0b3JlZCBvciBjdXJyZW50IGxvY2F0aW9ucwoKICAgIGlmICh1bmRlZmluZWRMb2NhdGlvbihjdXJyZW50VmFsdWUpICYmIHVuZGVmaW5lZExvY2F0aW9uKHN0b3JlZFZhbHVlKSkgewogICAgICAgIHJldHVybiBDb21wYXJpc29uUmVzdWx0LlpFUk9fUEVOQUxUWV9QT0lOVFM7CiAgICB9CiAgICBpZiAodW5kZWZpbmVkTG9jYXRpb24oY3VycmVudFZhbHVlKSAmJiAhdW5kZWZpbmVkTG9jYXRpb24oc3RvcmVkVmFsdWUpKSB7CiAgICAgICAgcmV0dXJuIG5ldyBDb21wYXJpc29uUmVzdWx0KGNvbmZpZy5wZW5hbHR5UG9pbnRzKTsKICAgIH0KICAgIGlmICghdW5kZWZpbmVkTG9jYXRpb24oY3VycmVudFZhbHVlKSAmJiB1bmRlZmluZWRMb2NhdGlvbihzdG9yZWRWYWx1ZSkpIHsKICAgICAgICByZXR1cm4gbmV3IENvbXBhcmlzb25SZXN1bHQodHJ1ZSk7CiAgICB9CgogICAgLy8gQm90aCBsb2NhdGlvbnMgZGVmaW5lZCwgdGhlcmVmb3JlIHBlcmZvcm0gY29tcGFyaXNvbgoKICAgIHZhciBkaXN0YW5jZSA9IGNhbGN1bGF0ZURpc3RhbmNlKGN1cnJlbnRWYWx1ZSwgc3RvcmVkVmFsdWUpOwoKICAgIGlmIChsb2dnZXIubWVzc2FnZUVuYWJsZWQoKSkgewogICAgICAgIGxvZ2dlci5tZXNzYWdlKCJEaXN0YW5jZSBiZXR3ZWVuICgiICsgY3VycmVudFZhbHVlLmxhdGl0dWRlICsgIiwiICsgY3VycmVudFZhbHVlLmxvbmdpdHVkZSArICIpIGFuZCAoIiArCiAgICAgICAgICAgIHN0b3JlZFZhbHVlLmxhdGl0dWRlICsgIiwiICsgc3RvcmVkVmFsdWUubG9uZ2l0dWRlICsgIikgaXMgIiArIGRpc3RhbmNlICsgIiBtaWxlcyIpOwogICAgfQoKICAgIGlmIChwYXJzZUZsb2F0KGRpc3RhbmNlLnRvUHJlY2lzaW9uKDUpKSA9PT0gMCkgewogICAgICAgIGxvZ2dlci5tZXNzYWdlKCJMb2NhdGlvbiBpcyB0aGUgc2FtZSIpOwogICAgICAgIHJldHVybiBDb21wYXJpc29uUmVzdWx0LlpFUk9fUEVOQUxUWV9QT0lOVFM7CiAgICB9CgogICAgaWYgKGRpc3RhbmNlIDw9IGNvbmZpZy5hbGxvd2VkUmFuZ2UpIHsKICAgICAgICBpZiAobG9nZ2VyLm1lc3NhZ2VFbmFibGVkKCkpIHsKICAgICAgICAgICAgbG9nZ2VyLm1lc3NhZ2UoIlRvbGVyYXRlZCBiZWNhdXNlIGRpc3RhbmNlIG5vdCBtb3JlIHRoZW4gIiArIGNvbmZpZy5hbGxvd2VkUmFuZ2UpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gbmV3IENvbXBhcmlzb25SZXN1bHQodHJ1ZSk7CiAgICB9IGVsc2UgewogICAgICAgIGlmIChsb2dnZXIubWVzc2FnZUVuYWJsZWQoKSkgewogICAgICAgICAgICBsb2dnZXIubWVzc2FnZSgiV291bGQgYmUgaWdub3JlZCBpZiBkaXN0YW5jZSBub3QgbW9yZSB0aGVuICIgKyBjb25maWcuYWxsb3dlZFJhbmdlKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIG5ldyBDb21wYXJpc29uUmVzdWx0KGNvbmZpZy5wZW5hbHR5UG9pbnRzKTsKICAgIH0KfTsKCgovLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vCi8vICAgICAgICAgICAgICAgICAgICBEZXZpY2UgUHJpbnQgTG9naWMgLSBETyBOT1QgTU9ESUZZICAgICAgICAgICAgICAgICAgICAgLy8KLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vLwoKLy8gVXRpbGl0eSBmdW5jdGlvbnMKCi8qKgogKiBSZXR1cm5zIHRydWUgaWYgZXZhbHVhdGluZyBmdW5jdGlvbiBmIG9uIGVhY2ggZWxlbWVudCBvZiB0aGUgQXJyYXkgYSByZXR1cm5zIHRydWUuCiAqCiAqIEBwYXJhbSBhOiAoQXJyYXkpIFRoZSBhcnJheSBvZiBlbGVtZW50cyB0byBldmFsdWF0ZQogKiBAcGFyYW0gZjogKEZ1bmN0aW9uKSBBIHNpbmdsZSBhcmd1bWVudCBmdW5jdGlvbiBmb3IgbWFwcGluZyBlbGVtZW50cyBvZiB0aGUgYXJyYXkgdG8gYm9vbGVhbi4KICogQHJldHVybiBib29sZWFuLgogKi8KYWxsID0gZnVuY3Rpb24oYSwgZikgewogICAgdmFyIGk7CiAgICBmb3IgKGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykgewogICAgICAgIGlmIChmKGFbaV0pID09PSBmYWxzZSkgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIHRydWU7Cn07CgovKioKICogUmV0dXJucyB0cnVlIGlmIGV2YWx1YXRpbmcgZnVuY3Rpb24gZiBvbiBhbnkgZWxlbWVudCBvZiB0aGUgQXJyYXkgYSByZXR1cm5zIHRydWUuCiAqCiAqIEBwYXJhbSBhOiAoQXJyYXkpIFRoZSBhcnJheSBvZiBlbGVtZW50cyB0byBldmFsdWF0ZQogKiBAcGFyYW0gZjogKEZ1bmN0aW9uKSBBIHNpbmdsZSBhcmd1bWVudCBmdW5jdGlvbiBmb3IgbWFwcGluZyBlbGVtZW50cyBvZiB0aGUgYXJyYXkgdG8gYm9vbGVhbi4KICogQHJldHVybiBib29sZWFuLgogKi8KYW55ID0gZnVuY3Rpb24oYSwgZikgewogICAgdmFyIGk7CiAgICBmb3IgKGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykgewogICAgICAgIGlmIChmKGFbaV0pID09PSB0cnVlKSB7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgIH0KICAgIHJldHVybiBmYWxzZTsKfTsKCi8qKgogKiBSZXR1cm5zIHRydWUgaWYgdGhlIHByb3ZpZGVkIGxvY2F0aW9uIGlzIG51bGwgb3IgaGFzIHVuZGVmaW5lZCBsb25naXR1ZGUgb3IgbGF0aXR1ZGUgdmFsdWVzLgogKgogKiBAcGFyYW0gbG9jYXRpb246IHsKICogICAgICAgICAgICAibGF0aXR1ZGUiOiAoTnVtYmVyKSBUaGUgbGF0aXR1ZGUuCiAqICAgICAgICAgICAgImxvbmdpdHVkZSI6IChOdW1iZXIpIFRoZSBsb25naXR1ZGUuCiAqICAgICAgICB9CiAqIEByZXR1cm4gYm9vbGVhbgogKi8KdW5kZWZpbmVkTG9jYXRpb24gPSBmdW5jdGlvbihsb2NhdGlvbikgewogICAgcmV0dXJuIG51bGxPclVuZGVmaW5lZChsb2NhdGlvbikgfHwgbnVsbE9yVW5kZWZpbmVkKGxvY2F0aW9uLmxhdGl0dWRlKSB8fCBudWxsT3JVbmRlZmluZWQobG9jYXRpb24ubG9uZ2l0dWRlKTsKfTsKCi8qKgogKiBSZXR1cm5zIHRydWUgaWYgdGhlIHByb3ZpZGVkIHZhbHVlIGlzIG51bGwgb3IgdW5kZWZpbmVkLgogKgogKiBAcGFyYW0gdmFsdWU6IGEgdmFsdWUgb2YgYW55IHR5cGUKICogQHJldHVybiBib29sZWFuCiAqLwpudWxsT3JVbmRlZmluZWQgPSBmdW5jdGlvbih2YWx1ZSkgewogICAgcmV0dXJuIHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQ7Cn07CgovKioKICogQ2FsY3VsYXRlcyB0aGUgZGlzdGFuY2VzIGJldHdlZW4gdGhlIHR3byBsb2NhdGlvbnMuCiAqCiAqIEBwYXJhbSBmaXJzdDogewogKiAgICAgICAgICAgICJsYXRpdHVkZSI6IChOdW1iZXIpIFRoZSBmaXJzdCBsYXRpdHVkZS4KICogICAgICAgICAgICAibG9uZ2l0dWRlIjogKE51bWJlcikgVGhlIGZpcnN0IGxvbmdpdHVkZS4KICogICAgICAgIH0KICogQHBhcmFtIHNlY29uZDogewogKiAgICAgICAgICAgICJsYXRpdHVkZSI6IChOdW1iZXIpIFRoZSBzZWNvbmQgbGF0aXR1ZGUuCiAqICAgICAgICAgICAgImxvbmdpdHVkZSI6IChOdW1iZXIpIFRoZSBzZWNvbmQgbG9uZ2l0dWRlLgogKiAgICAgICAgfQogKiBAcmV0dXJuIE51bWJlciBUaGUgZGlzdGFuY2UgYmV0d2VlbiB0aGUgdHdvIGxvY2F0aW9ucy4KICovCmNhbGN1bGF0ZURpc3RhbmNlID0gZnVuY3Rpb24oZmlyc3QsIHNlY29uZCkgewogICAgdmFyIGZhY3RvciA9IChNYXRoLlBJIC8gMTgwKSwKICAgICAgICB0aGV0YSwKICAgICAgICBkaXN0OwogICAgZnVuY3Rpb24gZGVncmVlc1RvUmFkaWFucyhkZWdyZWVzKSB7CiAgICAgICAgcmV0dXJuIGRlZ3JlZXMgKiBmYWN0b3I7CiAgICB9CiAgICBmdW5jdGlvbiByYWRpYW5zVG9EZWdyZWVzKHJhZGlhbnMpIHsKICAgICAgICByZXR1cm4gcmFkaWFucyAvIGZhY3RvcjsKICAgIH0KICAgIHRoZXRhID0gZmlyc3QubG9uZ2l0dWRlIC0gc2Vjb25kLmxvbmdpdHVkZTsKICAgIGRpc3QgPSBNYXRoLnNpbihkZWdyZWVzVG9SYWRpYW5zKGZpcnN0LmxhdGl0dWRlKSkgKiBNYXRoLnNpbihkZWdyZWVzVG9SYWRpYW5zKHNlY29uZC5sYXRpdHVkZSkpCiAgICAgICAgKyBNYXRoLmNvcyhkZWdyZWVzVG9SYWRpYW5zKGZpcnN0LmxhdGl0dWRlKSkgKiBNYXRoLmNvcyhkZWdyZWVzVG9SYWRpYW5zKHNlY29uZC5sYXRpdHVkZSkpCiAgICAgICAgKiBNYXRoLmNvcyhkZWdyZWVzVG9SYWRpYW5zKHRoZXRhKSk7CiAgICBkaXN0ID0gTWF0aC5hY29zKGRpc3QpOwogICAgZGlzdCA9IHJhZGlhbnNUb0RlZ3JlZXMoZGlzdCk7CiAgICBkaXN0ID0gZGlzdCAqIDYwICogMS4xNTE1OwogICAgcmV0dXJuIGRpc3Q7Cn07CgovKioKICogQ29udmVydHMgYSBTdHJpbmcgaG9sZGluZyBhIGRlbGltaXRlZCBzZXF1ZW5jZSBvZiB2YWx1ZXMgaW50byBhbiBhcnJheS4KICoKICogQHBhcmFtIHRleHQgKFN0cmluZykgVGhlIFN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhIGRlbGltaXRlZCBzZXF1ZW5jZSBvZiB2YWx1ZXMuCiAqIEBwYXJhbSBkZWxpbWl0ZXIgKFN0cmluZykgVGhlIGNoYXJhY3RlciBkZWxpbWl0aW5nIHZhbHVlcyB3aXRoaW4gdGhlIHRleHQgU3RyaW5nLgogKiBAcmV0dXJuIChBcnJheSkgVGhlIGNvbW1hIHNlcGFyYXRlZCB2YWx1ZXMuCiAqLwpzcGxpdEFuZFRyaW0gPSBmdW5jdGlvbih0ZXh0LCBkZWxpbWl0ZXIpIHsKCiAgICB2YXIgcmVzdWx0cyA9IFtdLAogICAgICAgIGksCiAgICAgICAgdmFsdWVzLAogICAgICAgIHZhbHVlOwogICAgaWYgKHRleHQgPT09IG51bGwpIHsKICAgICAgICByZXR1cm4gcmVzdWx0czsKICAgIH0KCiAgICB2YWx1ZXMgPSB0ZXh0LnNwbGl0KGRlbGltaXRlcik7CiAgICBmb3IgKGkgPSAwOyBpIDwgdmFsdWVzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgdmFsdWUgPSB2YWx1ZXNbaV0udHJpbSgpOwogICAgICAgIGlmICh2YWx1ZSAhPT0gIiIpIHsKICAgICAgICAgICAgcmVzdWx0cy5wdXNoKHZhbHVlKTsKICAgICAgICB9CiAgICB9CgogICAgcmV0dXJuIHJlc3VsdHM7Cn07CgovKioKICogQ29udmVydHMgdmFsdWUgdG8gYSBwZXJjZW50YWdlIG9mIHJhbmdlLgogKgogKiBAcGFyYW0gdmFsdWUgKE51bWJlcikgVGhlIGFjdHVhbCBudW1iZXIgdG8gYmUgY29udmVydGVkIHRvIGEgcGVyY2VudGFnZS4KICogQHBhcmFtIHJhbmdlIChOdW1iZXIpIFRoZSB0b3RhbCBudW1iZXIgb2YgdmFsdWVzIChpLmUuIHJlcHJlc2VudHMgMTAwJSkuCiAqIEByZXR1cm4gKE51bWJlcikgVGhlIHBlcmNlbnRhZ2UuCiAqLwpjYWxjdWxhdGVQZXJjZW50YWdlID0gZnVuY3Rpb24odmFsdWUsIHJhbmdlKSB7CiAgICBpZiAocmFuZ2UgPT09IDApIHsKICAgICAgICByZXR1cm4gMDsKICAgIH0KICAgIHJldHVybiBwYXJzZUZsb2F0KCh2YWx1ZSAvIHJhbmdlKS50b1ByZWNpc2lvbigyKSkgKiAxMDA7Cn07CgovKioKICogQ3JlYXRlcyBhIG5ldyBhcnJheSBjb250YWluaW5nIG9ubHkgdGhvc2UgZWxlbWVudHMgZm91bmQgaW4gYm90aCBhcnJheXMgcmVjZWl2ZWQgYXMgYXJndW1lbnRzLgogKgogKiBAcGFyYW0gZmlyc3QgKEFycmF5KSBUaGUgZmlyc3QgYXJyYXkuCiAqIEBwYXJhbSBzZWNvbmQgKEFycmF5KSBUaGUgc2Vjb25kIGFycmF5LgogKiBAcmV0dXJuIChBcnJheSkgVGhlIGVsZW1lbnRzIHRoYXQgZm91bmQgaW4gZmlyc3QgYW5kIHNlY29uZC4KICovCmNhbGN1bGF0ZUludGVyc2VjdGlvbiA9IGZ1bmN0aW9uKGZpcnN0LCBzZWNvbmQpIHsKICAgIHJldHVybiBmaXJzdC5maWx0ZXIoZnVuY3Rpb24oZWxlbWVudCkgewogICAgICAgIHJldHVybiBzZWNvbmQuaW5kZXhPZihlbGVtZW50KSAhPT0gLTE7CiAgICB9KTsKfTsKCmZ1bmN0aW9uIGdldFZhbHVlKG9iaiwgYXR0cmlidXRlUGF0aCkgewogICAgdmFyIHZhbHVlID0gb2JqLAogICAgICAgIGk7CiAgICBmb3IgKGkgPSAwOyBpIDwgYXR0cmlidXRlUGF0aC5sZW5ndGg7IGkrKykgewogICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgIH0KICAgICAgICB2YWx1ZSA9IHZhbHVlW2F0dHJpYnV0ZVBhdGhbaV1dOwogICAgfQogICAgcmV0dXJuIHZhbHVlOwp9CgoKZnVuY3Rpb24gaXNMZWFmTm9kZShhdHRyaWJ1dGVDb25maWcpIHsKICAgIHJldHVybiBhdHRyaWJ1dGVDb25maWcuY29tcGFyYXRvciAhPT0gdW5kZWZpbmVkOwp9CgpmdW5jdGlvbiBnZXRBdHRyaWJ1dGVQYXRocyhhdHRyaWJ1dGVDb25maWcsIGF0dHJpYnV0ZVBhdGgpIHsKCiAgICB2YXIgYXR0cmlidXRlUGF0aHMgPSBbXSwKICAgICAgICBhdHRyaWJ1dGVOYW1lLAogICAgICAgIGF0dHJQYXRocywKICAgICAgICBhdHRyUGF0aCwKICAgICAgICBpOwoKICAgIGZvciAoYXR0cmlidXRlTmFtZSBpbiBhdHRyaWJ1dGVDb25maWcpIHsKICAgICAgICBpZiAoYXR0cmlidXRlQ29uZmlnLmhhc093blByb3BlcnR5KGF0dHJpYnV0ZU5hbWUpKSB7CgogICAgICAgICAgICBpZiAoaXNMZWFmTm9kZShhdHRyaWJ1dGVDb25maWdbYXR0cmlidXRlTmFtZV0pKSB7CiAgICAgICAgICAgICAgICBhdHRyUGF0aCA9IGF0dHJpYnV0ZVBhdGguc2xpY2UoKTsKICAgICAgICAgICAgICAgIGF0dHJQYXRoLnB1c2goYXR0cmlidXRlTmFtZSk7CiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVQYXRocy5wdXNoKGF0dHJQYXRoKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGF0dHJQYXRoID0gYXR0cmlidXRlUGF0aC5zbGljZSgpOwogICAgICAgICAgICAgICAgYXR0clBhdGgucHVzaChhdHRyaWJ1dGVOYW1lKTsKICAgICAgICAgICAgICAgIGF0dHJQYXRocyA9IGdldEF0dHJpYnV0ZVBhdGhzKGF0dHJpYnV0ZUNvbmZpZ1thdHRyaWJ1dGVOYW1lXSwgYXR0clBhdGgpOwogICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGF0dHJQYXRocy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZVBhdGhzLnB1c2goYXR0clBhdGhzW2ldKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gYXR0cmlidXRlUGF0aHM7Cn0KCmZ1bmN0aW9uIGdldERldmljZVByaW50QXR0cmlidXRlUGF0aHMoYXR0cmlidXRlQ29uZmlnKSB7CiAgICByZXR1cm4gZ2V0QXR0cmlidXRlUGF0aHMoYXR0cmlidXRlQ29uZmlnLCBbXSk7Cn0KCmZ1bmN0aW9uIGhhc1JlcXVpcmVkQXR0cmlidXRlcyhkZXZpY2VQcmludCwgYXR0cmlidXRlQ29uZmlnKSB7CgogICAgdmFyIGF0dHJpYnV0ZVBhdGhzID0gZ2V0RGV2aWNlUHJpbnRBdHRyaWJ1dGVQYXRocyhhdHRyaWJ1dGVDb25maWcpLAogICAgICAgIGksCiAgICAgICAgYXR0clZhbHVlLAogICAgICAgIGF0dHJDb25maWc7CgogICAgZm9yIChpID0gMDsgaSA8IGF0dHJpYnV0ZVBhdGhzLmxlbmd0aDsgaSsrKSB7CgogICAgICAgIGF0dHJWYWx1ZSA9IGdldFZhbHVlKGRldmljZVByaW50LCBhdHRyaWJ1dGVQYXRoc1tpXSk7CiAgICAgICAgYXR0ckNvbmZpZyA9IGdldFZhbHVlKGF0dHJpYnV0ZUNvbmZpZywgYXR0cmlidXRlUGF0aHNbaV0pOwoKICAgICAgICBpZiAoYXR0ckNvbmZpZy5yZXF1aXJlZCAmJiBhdHRyVmFsdWUgPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICBsb2dnZXIud2FybmluZygiRGV2aWNlIFByaW50IHByb2ZpbGUgbWlzc2luZyByZXF1aXJlZCBhdHRyaWJ1dGUsICIgKyBhdHRyaWJ1dGVQYXRoc1tpXSk7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICB9CgogICAgbG9nZ2VyLm1lc3NhZ2UoImRldmljZSBwcmludCBoYXMgcmVxdWlyZWQgYXR0cmlidXRlcyIpOwogICAgcmV0dXJuIHRydWU7Cn0KCmZ1bmN0aW9uIGNvbXBhcmVEZXZpY2VQcmludFByb2ZpbGVzKGF0dHJpYnV0ZUNvbmZpZywgZGV2aWNlUHJpbnQsIGRldmljZVByaW50UHJvZmlsZXMsIG1heFBlbmFsdHlQb2ludHMpIHsKCiAgICB2YXIgYXR0cmlidXRlUGF0aHMgPSBnZXREZXZpY2VQcmludEF0dHJpYnV0ZVBhdGhzKGF0dHJpYnV0ZUNvbmZpZyksCiAgICAgICAgZGFvID0gc2hhcmVkU3RhdGUuZ2V0KCdfRGV2aWNlSWREYW8nKSwKICAgICAgICByZXN1bHRzLAogICAgICAgIGosCiAgICAgICAgYWdncmVnYXRlZENvbXBhcmlzb25SZXN1bHQsCiAgICAgICAgaSwKICAgICAgICBjdXJyZW50VmFsdWUsCiAgICAgICAgc3RvcmVkVmFsdWUsCiAgICAgICAgYXR0ckNvbmZpZywKICAgICAgICBjb21wYXJpc29uUmVzdWx0LAogICAgICAgIHNlbGVjdGVkQ29tcGFyaXNvblJlc3VsdCwKICAgICAgICBzZWxlY3RlZFByb2ZpbGUsCiAgICAgICAgY3VyRGV2aWNlUHJpbnRQcm9maWxlLAogICAgICAgIHZhbHM7CgogICAgcmVzdWx0cyA9IFtdOwogICAgZm9yIChqID0gMDsgaiA8IGRldmljZVByaW50UHJvZmlsZXMubGVuZ3RoOyBqKyspIHsKICAgICAgICBjdXJEZXZpY2VQcmludFByb2ZpbGUgPSBKU09OLnBhcnNlKG9yZy5mb3JnZXJvY2suanNvbi5Kc29uVmFsdWUuanNvbihkZXZpY2VQcmludFByb2ZpbGVzW2pdKSk7CiAgICAgICAgYWdncmVnYXRlZENvbXBhcmlzb25SZXN1bHQgPSBuZXcgQ29tcGFyaXNvblJlc3VsdCgpOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBhdHRyaWJ1dGVQYXRocy5sZW5ndGg7IGkrKykgewoKICAgICAgICAgICAgY3VycmVudFZhbHVlID0gZ2V0VmFsdWUoZGV2aWNlUHJpbnQsIGF0dHJpYnV0ZVBhdGhzW2ldKTsKICAgICAgICAgICAgc3RvcmVkVmFsdWUgPSBnZXRWYWx1ZShjdXJEZXZpY2VQcmludFByb2ZpbGUuZGV2aWNlUHJpbnQsIGF0dHJpYnV0ZVBhdGhzW2ldKTsKICAgICAgICAgICAgYXR0ckNvbmZpZyA9IGdldFZhbHVlKGF0dHJpYnV0ZUNvbmZpZywgYXR0cmlidXRlUGF0aHNbaV0pOwoKICAgICAgICAgICAgaWYgKHN0b3JlZFZhbHVlID09PSBudWxsKSB7CiAgICAgICAgICAgICAgICBjb21wYXJpc29uUmVzdWx0ID0gbmV3IENvbXBhcmlzb25SZXN1bHQoYXR0ckNvbmZpZy5wZW5hbHR5UG9pbnRzKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGNvbXBhcmlzb25SZXN1bHQgPSBhdHRyQ29uZmlnLmNvbXBhcmF0b3IuY29tcGFyZShjdXJyZW50VmFsdWUsIHN0b3JlZFZhbHVlLCBhdHRyQ29uZmlnLmFyZ3MpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAobG9nZ2VyLm1lc3NhZ2VFbmFibGVkKCkpIHsKICAgICAgICAgICAgICAgIGxvZ2dlci5tZXNzYWdlKCJDb21wYXJpbmcgYXR0cmlidXRlIHBhdGg6ICIgKyBhdHRyaWJ1dGVQYXRoc1tpXQogICAgICAgICAgICAgICAgICAgICsgIiwgQ29tcGFyaXNvbiByZXN1bHQ6IHN1Y2Nlc3NmdWw9IiArIGNvbXBhcmlzb25SZXN1bHQuaXNTdWNjZXNzZnVsKCkgKyAiLCBwZW5hbHR5UG9pbnRzPSIKICAgICAgICAgICAgICAgICAgICArIGNvbXBhcmlzb25SZXN1bHQucGVuYWx0eVBvaW50cyArICIsIGFkZGl0aW9uYWxJbmZvSW5DdXJyZW50VmFsdWU9IgogICAgICAgICAgICAgICAgICAgICsgY29tcGFyaXNvblJlc3VsdC5hZGRpdGlvbmFsSW5mb0luQ3VycmVudFZhbHVlKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBhZ2dyZWdhdGVkQ29tcGFyaXNvblJlc3VsdC5hZGRDb21wYXJpc29uUmVzdWx0KGNvbXBhcmlzb25SZXN1bHQpOwogICAgICAgIH0KICAgICAgICBpZiAobG9nZ2VyLm1lc3NhZ2VFbmFibGVkKCkpIHsKICAgICAgICAgICAgbG9nZ2VyLm1lc3NhZ2UoIkFnZ3JlZ2F0ZWQgY29tcGFyaXNvbiByZXN1bHQ6IHN1Y2Nlc3NmdWw9IgogICAgICAgICAgICAgICAgKyBhZ2dyZWdhdGVkQ29tcGFyaXNvblJlc3VsdC5pc1N1Y2Nlc3NmdWwoKSArICIsIHBlbmFsdHlQb2ludHM9IgogICAgICAgICAgICAgICAgKyBhZ2dyZWdhdGVkQ29tcGFyaXNvblJlc3VsdC5wZW5hbHR5UG9pbnRzICsgIiwgYWRkaXRpb25hbEluZm9JbkN1cnJlbnRWYWx1ZT0iCiAgICAgICAgICAgICAgICArIGFnZ3JlZ2F0ZWRDb21wYXJpc29uUmVzdWx0LmFkZGl0aW9uYWxJbmZvSW5DdXJyZW50VmFsdWUpOwogICAgICAgIH0KCiAgICAgICAgcmVzdWx0cy5wdXNoKHsKICAgICAgICAgICAga2V5OiBhZ2dyZWdhdGVkQ29tcGFyaXNvblJlc3VsdCwKICAgICAgICAgICAgdmFsdWU6IGRldmljZVByaW50UHJvZmlsZXNbal0KICAgICAgICB9KTsKICAgIH0KCiAgICBpZiAocmVzdWx0cy5sZW5ndGggPT09IDApIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgIH0KCiAgICByZXN1bHRzLnNvcnQoZnVuY3Rpb24oYSwgYikgewogICAgICAgIHJldHVybiBDb21wYXJpc29uUmVzdWx0LmNvbXBhcmUoYS5rZXksIGIua2V5KTsKICAgIH0pOwogICAgc2VsZWN0ZWRDb21wYXJpc29uUmVzdWx0ID0gcmVzdWx0c1swXS5rZXk7CiAgICBpZiAobG9nZ2VyLm1lc3NhZ2VFbmFibGVkKCkpIHsKICAgICAgICBsb2dnZXIubWVzc2FnZSgiU2VsZWN0ZWQgY29tcGFyaXNvbiByZXN1bHQ6IHN1Y2Nlc3NmdWw9IiArIHNlbGVjdGVkQ29tcGFyaXNvblJlc3VsdC5pc1N1Y2Nlc3NmdWwoKQogICAgICAgICAgICArICIsIHBlbmFsdHlQb2ludHM9IiArIHNlbGVjdGVkQ29tcGFyaXNvblJlc3VsdC5wZW5hbHR5UG9pbnRzICsgIiwgYWRkaXRpb25hbEluZm9JbkN1cnJlbnRWYWx1ZT0iCiAgICAgICAgICAgICsgc2VsZWN0ZWRDb21wYXJpc29uUmVzdWx0LmFkZGl0aW9uYWxJbmZvSW5DdXJyZW50VmFsdWUpOwogICAgfQoKICAgIHNlbGVjdGVkUHJvZmlsZSA9IG51bGw7CiAgICBpZiAoc2VsZWN0ZWRDb21wYXJpc29uUmVzdWx0LnBlbmFsdHlQb2ludHMgPD0gbWF4UGVuYWx0eVBvaW50cykgewogICAgICAgIHNlbGVjdGVkUHJvZmlsZSA9IHJlc3VsdHNbMF0udmFsdWU7CiAgICAgICAgaWYgKGxvZ2dlci5tZXNzYWdlRW5hYmxlZCgpKSB7CiAgICAgICAgICAgIGxvZ2dlci5tZXNzYWdlKCJTZWxlY3RlZCBwcm9maWxlOiAiICsgc2VsZWN0ZWRQcm9maWxlICsKICAgICAgICAgICAgICAgICIgd2l0aCAiICsgc2VsZWN0ZWRDb21wYXJpc29uUmVzdWx0LnBlbmFsdHlQb2ludHMgKyAiIHBlbmFsdHkgcG9pbnRzIik7CiAgICAgICAgfQogICAgfQoKICAgIGlmIChzZWxlY3RlZFByb2ZpbGUgPT09IG51bGwpIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9CgogICAgLyogdXBkYXRlIHByb2ZpbGUgKi8KICAgIHNlbGVjdGVkUHJvZmlsZS5wdXQoInNlbGVjdGlvbkNvdW50ZXIiLAogICAgICAgIGphdmEubGFuZy5JbnRlZ2VyLnZhbHVlT2YocGFyc2VJbnQoc2VsZWN0ZWRQcm9maWxlLmdldCgic2VsZWN0aW9uQ291bnRlciIpLCAxMCkgKyAxKSk7CiAgICBzZWxlY3RlZFByb2ZpbGUucHV0KCJsYXN0U2VsZWN0ZWREYXRlIiwgamF2YS5sYW5nLkxvbmcudmFsdWVPZihuZXcgRGF0ZSgpLmdldFRpbWUoKSkpOwogICAgc2VsZWN0ZWRQcm9maWxlLnB1dCgiZGV2aWNlUHJpbnQiLCBkZXZpY2VQcmludCk7CgogICAgdmFscyA9IFtdOwogICAgZm9yIChpID0gMDsgaSA8IGRldmljZVByaW50UHJvZmlsZXMubGVuZ3RoOyBpKyspIHsKICAgICAgICB2YWxzLnB1c2gob3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5qc29uKGRldmljZVByaW50UHJvZmlsZXNbaV0pKTsKICAgIH0KCiAgICBkYW8uc2F2ZURldmljZVByb2ZpbGVzKHVzZXJuYW1lLCByZWFsbSwgdmFscyk7CgogICAgcmV0dXJuIHRydWU7Cn0KCmZ1bmN0aW9uIG1hdGNoRGV2aWNlUHJpbnQoKSB7CgogICAgaWYgKCF1c2VybmFtZSkgewogICAgICAgIGxvZ2dlci5lcnJvcigiVXNlcm5hbWUgbm90IHNldC4gQ2Fubm90IGNvbXBhcmUgdXNlcidzIGRldmljZSBwcmludCBwcm9maWxlcy4iKTsKICAgICAgICBhdXRoU3RhdGUgPSBGQUlMRUQ7CiAgICB9IGVsc2UgewoKICAgICAgICBpZiAobG9nZ2VyLm1lc3NhZ2VFbmFibGVkKCkpIHsKICAgICAgICAgICAgbG9nZ2VyLm1lc3NhZ2UoImNsaWVudCBkZXZpY2VQcmludDogIiArIGNsaWVudFNjcmlwdE91dHB1dERhdGEpOwogICAgICAgIH0KCiAgICAgICAgdmFyIGdldFByb2ZpbGVzID0gZnVuY3Rpb24gKCkgewoKICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGlzRXhwaXJlZFByb2ZpbGUoZGV2aWNlUHJpbnRQcm9maWxlKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGV4cGlyYXRpb25EYXRlID0gbmV3IERhdGUoKSwKICAgICAgICAgICAgICAgICAgICAgICAgbGFzdFNlbGVjdGVkRGF0ZTsKICAgICAgICAgICAgICAgICAgICBleHBpcmF0aW9uRGF0ZS5zZXREYXRlKGV4cGlyYXRpb25EYXRlLmdldERhdGUoKSAtIGNvbmZpZy5wcm9maWxlRXhwaXJhdGlvbik7CgogICAgICAgICAgICAgICAgICAgIGxhc3RTZWxlY3RlZERhdGUgPSBuZXcgRGF0ZShkZXZpY2VQcmludFByb2ZpbGUubGFzdFNlbGVjdGVkRGF0ZSk7CgogICAgICAgICAgICAgICAgICAgIHJldHVybiBsYXN0U2VsZWN0ZWREYXRlIDwgZXhwaXJhdGlvbkRhdGU7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgZnVuY3Rpb24gZ2V0Tm90RXhwaXJlZFByb2ZpbGVzKCkgewogICAgICAgICAgICAgICAgICAgIHZhciBwcm9maWxlLAogICAgICAgICAgICAgICAgICAgICAgICBkYW8gPSBzaGFyZWRTdGF0ZS5nZXQoJ19EZXZpY2VJZERhbycpLAogICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRzID0gW10sCiAgICAgICAgICAgICAgICAgICAgICAgIHByb2ZpbGVzLAogICAgICAgICAgICAgICAgICAgICAgICBpdGVyOwoKICAgICAgICAgICAgICAgICAgICBwcm9maWxlcyA9IGRhby5nZXREZXZpY2VQcm9maWxlcyh1c2VybmFtZSwgcmVhbG0pOwoKICAgICAgICAgICAgICAgICAgICBpZiAocHJvZmlsZXMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaXRlciA9IHByb2ZpbGVzLml0ZXJhdG9yKCk7CgogICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoaXRlci5oYXNOZXh0KCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2ZpbGUgPSBpdGVyLm5leHQoKS5nZXRPYmplY3QoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNFeHBpcmVkUHJvZmlsZShwcm9maWxlKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdHMucHVzaChwcm9maWxlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAobG9nZ2VyLm1lc3NhZ2VFbmFibGVkKCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLm1lc3NhZ2UoInN0b3JlZCBub24tZXhwaXJlZCBwcm9maWxlczogIiArIHJlc3VsdHMpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0czsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0Tm90RXhwaXJlZFByb2ZpbGVzKCk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGRldmljZVByaW50ID0gSlNPTi5wYXJzZShjbGllbnRTY3JpcHRPdXRwdXREYXRhKSwKICAgICAgICAgICAgZGV2aWNlUHJpbnRQcm9maWxlcyA9IGdldFByb2ZpbGVzKCk7CgogICAgICAgIGlmICghaGFzUmVxdWlyZWRBdHRyaWJ1dGVzKGRldmljZVByaW50LCBjb25maWcuYXR0cmlidXRlcykpIHsKICAgICAgICAgICAgbG9nZ2VyLm1lc3NhZ2UoImRldmljZVByaW50Lmhhc1JlcXVpcmVkQXR0cmlidXRlczogZmFsc2UiKTsKICAgICAgICAgICAgLy8gV2lsbCBmYWlsIHRoaXMgbW9kdWxlIGJ1dCBmYWxsLXRocm91Z2ggdG8gbmV4dCBtb2R1bGUuIFdoaWNoIHNob3VsZCBiZSBPVFAuCiAgICAgICAgICAgIGF1dGhTdGF0ZSA9IEZBSUxFRDsKICAgICAgICB9IGVsc2UgaWYgKGNvbXBhcmVEZXZpY2VQcmludFByb2ZpbGVzKGNvbmZpZy5hdHRyaWJ1dGVzLCBkZXZpY2VQcmludCwgZGV2aWNlUHJpbnRQcm9maWxlcywgY29uZmlnLm1heFBlbmFsdHlQb2ludHMpKSB7CiAgICAgICAgICAgIGxvZ2dlci5tZXNzYWdlKCJkZXZpY2VQcmludC5oYXNWYWxpZFByb2ZpbGU6IHRydWUiKTsKICAgICAgICAgICAgYXV0aFN0YXRlID0gU1VDQ0VTUzsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBsb2dnZXIubWVzc2FnZSgiZGV2aWNlUHJpbnQuaGFzVmFsaWRQcm9maWxlOiBmYWxzZSIpOwogICAgICAgICAgICBzaGFyZWRTdGF0ZS5wdXQoJ2RldmljZVByaW50UHJvZmlsZScsIEpTT04uc3RyaW5naWZ5KGRldmljZVByaW50KSk7CiAgICAgICAgICAgIC8vIFdpbGwgZmFpbCB0aGlzIG1vZHVsZSBidXQgZmFsbC10aHJvdWdoIHRvIG5leHQgbW9kdWxlLiBXaGljaCBzaG91bGQgYmUgT1RQLgogICAgICAgICAgICBhdXRoU3RhdGUgPSBGQUlMRUQ7CiAgICAgICAgfQogICAgfQp9CgptYXRjaERldmljZVByaW50KCk7Cg==",
  },
  {
    "_id": "bae52680-c1ea-4a4b-be80-25db364d822a",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Reading userName from Query Parameter ",
    "evaluatorVersion": "1.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "wks-ReadUserName",
    "script": "LyoKICAtIERhdGEgbWFkZSBhdmFpbGFibGUgYnkgbm9kZXMgdGhhdCBoYXZlIGFscmVhZHkgZXhlY3V0ZWQgYXJlIGF2YWlsYWJsZSBpbiB0aGUgc2hhcmVkU3RhdGUgdmFyaWFibGUuCiAgLSBUaGUgc2NyaXB0IHNob3VsZCBzZXQgb3V0Y29tZSB0byBlaXRoZXIgInRydWUiIG9yICJmYWxzZSIuCiAqLwoKb3V0Y29tZSA9ICJmYWxzZSI7CmlmIChyZXF1ZXN0UGFyYW1ldGVycy5nZXQoInVzZXJOYW1lIikpIHsKICAgIHZhciB1c2VyTmFtZSA9IGRlY29kZVVSSUNvbXBvbmVudChyZXF1ZXN0UGFyYW1ldGVycy5nZXQoInVzZXJOYW1lIikuZ2V0KDApKTsKICAgIHZhciBvYmplY3RBdHRyaWJ1dGVzID0gewogICAgICB1c2VyTmFtZTogdXNlck5hbWUKICAgIH0KICBzaGFyZWRTdGF0ZS5wdXQoIm9iamVjdEF0dHJpYnV0ZXMiLCBvYmplY3RBdHRyaWJ1dGVzKTsKICBvdXRjb21lID0gInRydWUiOwp9Ci8qCmlmIChyZXF1ZXN0UGFyYW1ldGVycy5nZXQoImVtYWlsIikpIHsKICAgIHZhciBleHRlcm5hbGVtYWlsID0gcmVxdWVzdFBhcmFtZXRlcnMuZ2V0KCJlbWFpbCIpLmdldCgwKTsKICAgIHZhciBkZWNvZGVkRW1haWwgPSBkZWNvZGVVUklDb21wb25lbnQoZXh0ZXJuYWxlbWFpbCk7CiAgICB2YXIgb2JqZWN0QXR0cmlidXRlcyA9IHsKICAgICAgZnJJbmRleGVkU3RyaW5nNTogZGVjb2RlZEVtYWlsCiAgICB9CiAgc2hhcmVkU3RhdGUucHV0KCJvYmplY3RBdHRyaWJ1dGVzIiwgb2JqZWN0QXR0cmlidXRlcyk7CiAgb3V0Y29tZSA9ICJ0cnVlIjsKfQoqLwoKCgoK",
  },
  {
    "_id": "8862ca8f-7770-4af5-a888-ac0df0947f36",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Normalizes raw profile data from LinkedIn",
    "evaluatorVersion": "1.0",
    "language": "GROOVY",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "LinkedIn Profile Normalization",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjAgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLmZpZWxkCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5qc29uCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5vYmplY3QKCnJldHVybiBqc29uKG9iamVjdCgKICAgICAgICBmaWVsZCgiaWQiLCByYXdQcm9maWxlLmlkKSwKICAgICAgICBmaWVsZCgiZ2l2ZW5OYW1lIiwgcmF3UHJvZmlsZS5maXJzdE5hbWUubG9jYWxpemVkLmdldCgwKSksCiAgICAgICAgZmllbGQoImZhbWlseU5hbWUiLCByYXdQcm9maWxlLmxhc3ROYW1lLmxvY2FsaXplZC5nZXQoMCkpLAogICAgICAgIGZpZWxkKCJwaG90b1VybCIsIHJhd1Byb2ZpbGUucHJvZmlsZVBpY3R1cmUuZGlzcGxheUltYWdlKSwKICAgICAgICBmaWVsZCgiZW1haWwiLCByYXdQcm9maWxlLmVsZW1lbnRzLmdldCgwKS5nZXQoImhhbmRsZX4iKS5lbWFpbEFkZHJlc3MpLAogICAgICAgIGZpZWxkKCJ1c2VybmFtZSIsIHJhd1Byb2ZpbGUuZWxlbWVudHMuZ2V0KDApLmdldCgiaGFuZGxlfiIpLmVtYWlsQWRkcmVzcykpKQ==",
  },
  {
    "_id": "0cc09f53-7183-4829-a93a-1b3308318ba9",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "null",
    "evaluatorVersion": "1.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "havePush.js",
    "script": "dmFyIHB1c2hEZXZpY2VQcm9maWxlcyA9IGlkUmVwb3NpdG9yeS5nZXRBdHRyaWJ1dGUoc2hhcmVkU3RhdGUuZ2V0KCJfaWQiKSwgInB1c2hEZXZpY2VQcm9maWxlcyIpOwppZihwdXNoRGV2aWNlUHJvZmlsZXMubGVuPjApIHsKICAgIG91dGNvbWUgPSAidHJ1ZSI7Cn0KZWxzZSB7CiAgb3V0Y29tZSA9ICJmYWxzZSI7Cgp9Cg==",
  },
  {
    "_id": "3f93ef6e-e54a-4393-aba1-f322656db28a",
    "context": "OAUTH2_AUTHORIZE_ENDPOINT_DATA_PROVIDER",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Default global script for OAuth2 Authorize Endpoint Data Provider",
    "evaluatorVersion": "1.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "OAuth2 Authorize Endpoint Data Provider Script",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjEgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKLyoKICogVGhpcyBzY3JpcHQgbGV0cyB5b3UgcmV0dXJuIGFkZGl0aW9uYWwgZGF0YSB3aGVuIGF1dGhvcml6ZSByZXF1ZXN0IGlzIGNhbGxlZC4KICoKICogRGVmaW5lZCB2YXJpYWJsZXM6CiAqCiAqIHNlc3Npb24gLSBTU09Ub2tlbiAoMSkKICogICAgICAgICAgIFByZXNlbnQgaWYgdGhlIHJlcXVlc3QgY29udGFpbnMgdGhlIHNlc3Npb24gY29va2llLCB0aGUgdXNlcidzIHNlc3Npb24gb2JqZWN0LgogKgogKiBodHRwQ2xpZW50IC0gSFRUUCBDbGllbnQgKDIpLgogKiAgICAgICAgICAgICAgQWx3YXlzIHByZXNlbnQsIHRoZSBIVFRQIGNsaWVudCB0aGF0IGNhbiBiZSB1c2VkIHRvIG1ha2UgZXh0ZXJuYWwgSFRUUCByZXF1ZXN0cwogKgogKiBsb2dnZXIgLSBEZWJ1ZyAoMykKICogICAgICAgICAgQWx3YXlzIHByZXNlbnQsIHRoZSAiU2NyaXB0ZWRBdXRob3JpemVFbmRwb2ludERhdGFQcm92aWRlciIgZGVidWcgbG9nZ2VyIGluc3RhbmNlOgogKiAgICAgICAgICBodHRwczovL2JhY2tzdGFnZS5mb3JnZXJvY2suY29tL2RvY3MvYW0vNy9zY3JpcHRpbmctZ3VpZGUvc2NyaXB0aW5nLWFwaS1nbG9iYWwtbG9nZ2VyLmh0bWwjc2NyaXB0aW5nLWFwaS1nbG9iYWwtbG9nZ2VyLgogKiAgICAgICAgICBDb3JyZXNwb25kaW5nIGxvZyBmaWxlcyB3aWxsIGJlIHByZWZpeGVkIHdpdGg6IHNjcmlwdHMuT0FVVEgyX0FVVEhPUklaRV9FTkRQT0lOVF9EQVRBX1BST1ZJREVSLgogKgogKiBzY3JpcHROYW1lIC0gU3RyaW5nIChwcmltaXRpdmUpLgogKiAgICAgICAgICAgICAgQWx3YXlzIHByZXNlbnQsIHRoZSBkaXNwbGF5IG5hbWUgb2YgdGhlIHNjcmlwdAogKgogKiBSZXR1cm4gLSBhIE1hcDxTdHJpbmcsIFN0cmluZz4gb2YgYWRkaXRpb25hbCBkYXRhICg0KS4KICoKICogQ2xhc3MgcmVmZXJlbmNlOgogKiAoMSkgU1NPVG9rZW4gLSBodHRwczovL2JhY2tzdGFnZS5mb3JnZXJvY2suY29tL2RvY3MvYW0vNy9hcGlkb2NzL2NvbS9pcGxhbmV0L3Nzby9TU09Ub2tlbi5odG1sLgogKiAoMikgQ2xpZW50IC0gaHR0cHM6Ly9iYWNrc3RhZ2UuZm9yZ2Vyb2NrLmNvbS9kb2NzL2FtLzcvYXBpZG9jcy9vcmcvZm9yZ2Vyb2NrL2h0dHAvQ2xpZW50Lmh0bWwuCiAqICgzKSBEZWJ1ZyAtIGh0dHBzOi8vYmFja3N0YWdlLmZvcmdlcm9jay5jb20vZG9jcy9hbS83L3NjcmlwdGluZy1ndWlkZS9zY3JpcHRpbmctYXBpLWdsb2JhbC1sb2dnZXIuaHRtbCNzY3JpcHRpbmctYXBpLWdsb2JhbC1sb2dnZXIuCiAqICg0KSBNYXAgLSBodHRwczovL2RvY3Mub3JhY2xlLmNvbS9lbi9qYXZhL2phdmFzZS8xMS9kb2NzL2FwaS9qYXZhLmJhc2UvamF2YS91dGlsL0hhc2hNYXAuaHRtbC4KICovCgovKioKICogRGVmYXVsdCBhdXRob3JpemUgZW5kcG9pbnQgZGF0YSBwcm92aWRlciBzY3JpcHQgdG8gdXNlIGFzIGEgdGVtcGxhdGUgZm9yIG5ldyBzY3JpcHRzLgogKi8KCi8qIEVYQU1QTEUKdmFyIG1hcCA9IG5ldyBqYXZhLnV0aWwuSGFzaE1hcCgpOwoKZnVuY3Rpb24gYWRkQWRkaXRpb25hbERhdGEoKSB7CgogICAgLy9JZiBjb25zdGFudCBkYXRhIG5lZWRzIHRvIGJlIHJldHVybmVkCiAgICBtYXAucHV0KCJoZWxsbyIsICJ3b3JsZCIpOwoKICAgIC8vSWYgc29tZSBkYXRhIG5lZWRzIHRvIGJlIHJldHVybmVkIGZyb20gdGhpcmQgcGFydHkgc2VydmljZQogICAgYWRkQWRkaXRpb25hbERhdGFGcm9tRXh0ZXJuYWxTZXJ2aWNlKCk7CgogICAgLy9JZiB0aGVyZSBpcyBhIG5lZWQgdG8gcmV0dXJuIHNvbWUgdXNlciBzZXNzaW9uIGRhdGEKICAgIGFkZEFkZGl0aW9uYWxEYXRhRnJvbVNlc3Npb25Qcm9wZXJ0aWVzKCkKCiAgICByZXR1cm4gbWFwOwp9OwoKZnVuY3Rpb24gYWRkQWRkaXRpb25hbERhdGFGcm9tRXh0ZXJuYWxTZXJ2aWNlKCkgewogIHZhciBmckphdmEgPSBKYXZhSW1wb3J0ZXIoCiAgICAgICAgb3JnLmZvcmdlcm9jay5vYXV0aDIuY29yZS5leGNlcHRpb25zLlNlcnZlckV4Y2VwdGlvbgogICAgKTsKICB0cnkgewogICAgICAgIC8vT2J0YWluIGFkZGl0aW9uYWwgZGF0YSBieSBwZXJmb3JtaW5nIGEgUkVTVCBjYWxsIHRvIGFuIGV4dGVybmFsIHNlcnZpY2UKICAgICAgICB2YXIgcmVxdWVzdCA9IG5ldyBvcmcuZm9yZ2Vyb2NrLmh0dHAucHJvdG9jb2wuUmVxdWVzdCgpOwogICAgICAgIHJlcXVlc3Quc2V0VXJpKCJodHRwczovL3RoaXJkLnBhcnR5LmFwcC9oZWxsby5qc3AiKTsKICAgICAgICByZXF1ZXN0LnNldE1ldGhvZCgiUE9TVCIpOwogICAgICAgIC8vcmVxdWVzdC5zZXRFbnRpdHkoImZvbz1iYXImaGVsbG89d29ybGQiKTsKICAgICAgICByZXF1ZXN0LnNldEVudGl0eShqc29uKG9iamVjdCgKICAgICAgICAgICAgICAgICAgICBmaWVsZCgiZm9vIiwgImJhciIpKSkpOwogICAgICAgIHZhciByZXNwb25zZSA9IGh0dHBDbGllbnQuc2VuZChyZXF1ZXN0KS5nZXRPclRocm93KCk7CiAgICAgICAgbG9nUmVzcG9uc2UocmVzcG9uc2UpOwogICAgICAgIHZhciByZXN1bHQgPSBKU09OLnBhcnNlKHJlc3BvbnNlLmdldEVudGl0eSgpKTsKICAgICAgICBtYXAucHV0KCJzb21lS2V5IixyZXN1bHQuZ2V0KCJzb21lS2V5IikpOwogIH0gY2F0Y2ggKGVycikgewogICAgIHRocm93IG5ldyBmckphdmEuU2VydmVyRXhjZXB0aW9uKGVycik7CiAgfQp9OwoKZnVuY3Rpb24gYWRkQWRkaXRpb25hbERhdGFGcm9tU2Vzc2lvblByb3BlcnRpZXMoKSB7CiAgLy9BZGQgYWRkaXRpb25hbCBkYXRhIGZyb20gc2Vzc2lvbiBwcm9wZXJ0eSB2YWx1ZXMKICAgaWYgKHNlc3Npb24gIT0gbnVsbCkgeyAvLyBzZXNzaW9uIGlzIG5vdCBhdmFpbGFibGUgZm9yIHJlc291cmNlIG93bmVyIHBhc3N3b3JkIGNyZWRlbnRpYWxzIGdyYW50CiAgICAgbWFwLnB1dCgiaXBBZGRyZXNzIiwgc2Vzc2lvbi5nZXRQcm9wZXJ0eSgiSG9zdCIpKQogICB9Cn07CgpmdW5jdGlvbiBsb2dSZXNwb25zZShyZXNwb25zZSkgewogICAgbG9nZ2VyLm1lc3NhZ2UoIlVzZXIgUkVTVCBDYWxsLiBTdGF0dXM6ICIgKyByZXNwb25zZS5nZXRTdGF0dXMoKSArICIsIEJvZHk6ICIgKyByZXNwb25zZS5nZXRFbnRpdHkoKSk7Cn07CgphZGRBZGRpdGlvbmFsRGF0YSgpOwoqLw==",
  },
  {
    "_id": "e232cff3-2460-47cd-80b2-36c86c0d0f06",
    "context": "OAUTH2_ACCESS_TOKEN_MODIFICATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Used by endUserUIClient",
    "evaluatorVersion": "1.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Alpha endUserUIClient OAuth2 Access Token Modification Script",
    "script": "KGZ1bmN0aW9uICgpIHsKICBpZiAoc2NvcGVzLmNvbnRhaW5zKCdmcjphdXRvYWNjZXNzOionKSB8fCBzY29wZXMuY29udGFpbnMoJ2ZyOmlnYToqJykgfHwgc2NvcGVzLmNvbnRhaW5zKCdmcjppZGM6YW5hbHl0aWNzOionKSkgewogICAgdmFyIGZyID0gSmF2YUltcG9ydGVyKAogICAgICBjb20uc3VuLmlkZW50aXR5LmlkbS5JZFR5cGUKICAgICk7CiAgICB2YXIgZ3JvdXBzID0gW107CiAgICBpZGVudGl0eS5nZXRNZW1iZXJzaGlwcyhmci5JZFR5cGUuR1JPVVApLnRvQXJyYXkoKS5mb3JFYWNoKGZ1bmN0aW9uIChncm91cCkgewogICAgICBncm91cHMucHVzaChncm91cC5nZXRBdHRyaWJ1dGUoJ2NuJykudG9BcnJheSgpWzBdKTsKICAgIH0pOwogICAgYWNjZXNzVG9rZW4uc2V0RmllbGQoJ2dyb3VwcycsIGdyb3Vwcyk7CiAgfQp9KCkpOwo=",
  },
  {
    "_id": "6aa47a41-af3d-4df3-a7a1-b1766cfeaf6b",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "null",
    "evaluatorVersion": "1.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "wks-NEO-Twillio",
    "script": "LyoqCiAqIEBmaWxlIFRoaXMgc2NyaXB0IGRlbGl2ZXJzIGEgbWVzc2FnZSB3aXRoIHZhbHVlcyBmcm9tIHNoYXJlZCBzdGF0ZSB2aWEgVHdpbGlvIFNNUywgdXNpbmcgdGhlIGN1cnJlbnQgdXNlcidzIHRlbGVwaG9uZU51bWJlcgogKiBAdmVyc2lvbiAwLjEuMQogKiBAa2V5d29yZHMgc21zIG90cCBtZmEgdHdpbGlvIAogKi8KCi8qKgogKiBFbnZpcm9ubWVudCBzcGVjaWZpYyBUd2lsaW8gY29uZmlnIAogKi8KCnZhciB0d2lsaW9BY2NvdW50U2lkID0gIjxzZWNyZXQ+IjsgICAKdmFyIHR3aWxpb0FwaUtleVNpZCA9ICI8c2VjcmV0PiI7CnZhciB0d2lsaW9BcGlLZXlTZWNyZXQgPSAiPHNlY3JldD4iOwp2YXIgdHdpbGlvTWVzc2FnaW5nU2VydmljZVNpZCA9ICI8c2VjcmV0PiI7CnZhciB0d2lsaW9QaG9uZU51bWJlckZyb20gPSAiPHNlY3JldD4iOyAgICAKCi8qKgogKiBGdWxsIENvbmZpZ3VyYXRpb24gCiAqLwoKdmFyIGNvbmZpZyA9IHsKICAgIGFjY291bnRTaWQ6IHR3aWxpb0FjY291bnRTaWQsICAgIAogICAgYXBpS2V5U2lkOiB0d2lsaW9BcGlLZXlTaWQsCiAgICBhcGlLZXlTZWNyZXQ6IHR3aWxpb0FwaUtleVNlY3JldCwKICAgIHBob25lTnVtYmVyRnJvbTogdHdpbGlvUGhvbmVOdW1iZXJGcm9tLCAKICAgIG1lc3NhZ2luZ1NlcnZpY2VTaWQ6IHR3aWxpb01lc3NhZ2luZ1NlcnZpY2VTaWQsIAogICAgYmFzZVVyaTogImh0dHBzOi8vYXBpLnR3aWxpby5jb20vMjAxMC0wNC0wMSIsCiAgICBzaGFyZWRTdGF0ZUlkRmllbGQ6ICJfaWQiLAogICAgcGhvbmVOdW1iZXJGaWVsZDogInRlbGVwaG9uZU51bWJlciIsCiAgICBtZXNzYWdlVGVtcGxhdGU6ICJZb3VyIHNlY3VyaXR5IGNvZGUgaXMge3tvbmVUaW1lUGFzc3dvcmR9fSIsCiAgICBub2RlTmFtZTogInR3aWxpb1NtcyIKfTsKCi8qKgogKiBOb2RlIG91dGNvbWVzCiAqLwoKIHZhciBOb2RlT3V0Y29tZSA9IHsKICAgIERFTElWRVJFRDogICJkZWxpdmVyZWQiLAogICAgQVVUSEZBSUxFRDogImF1dGhGYWlsZWQiLAogICAgTk9QSE9ORTogICAgIm5vUGhvbmUiLAogICAgRVJST1I6ICAgICAgImVycm9yIgp9OwoKLyoqCiAqIEV4dGVybmFsIGRlcGVuZGVuY2llcwogKi8KCnZhciBmciA9IEphdmFJbXBvcnRlcigKICAgIG9yZy5mb3JnZXJvY2sudXRpbC5lbmNvZGUuQmFzZTY0LAogICAgamF2YS5sYW5nLlN0cmluZwopOwoKLyoqCiAqIEFkZCB0aGUgbm9kZSBpbmZvIHByZWZpeCB0byBhIGxvZyBtZXNzYWdlCiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIC0gdGhlIG1lc3NhZ2UgYm9keQogKiBAcmV0dXJucyBhIHRhZ2dlZCB2ZXJzaW9uIG9mIHRoZSBtZXNzYWdlCiAqLwpmdW5jdGlvbiB0YWcobWVzc2FnZSkgewogICAgcmV0dXJuICIqKioiLmNvbmNhdChjb25maWcubm9kZU5hbWUpLmNvbmNhdCgiICIpLmNvbmNhdChtZXNzYWdlKTsKfQoKLyoqCiAqIExvZyBhbiBIVFRQIHJlc3BvbnNlCiAqIAogKiBAcGFyYW0ge1Jlc3BvbnNlfSBIVFRQIHJlc3BvbnNlIG9iamVjdAogKi8KZnVuY3Rpb24gbG9nUmVzcG9uc2UocmVzcG9uc2UpIHsKICAgIGxvZ2dlci5tZXNzYWdlKHRhZygiU2NyaXB0ZWQgTm9kZSBIVFRQIFJlc3BvbnNlOiAiICsgcmVzcG9uc2UuZ2V0U3RhdHVzKCkgKyAiLCBCb2R5OiAiICsgcmVzcG9uc2UuZ2V0RW50aXR5KCkuZ2V0U3RyaW5nKCkpKTsKfQoKLyoqCiAqIFJlc29sdmUgaGFuZGxlYmFyIHBsYWNlaG9sZGVycyBmcm9tIHNoYXJlZCBzdGF0ZQogKiAKICogQHBhcmFtIHt0ZW1wbGF0ZX0gaGFuZGxlYmFyIHRlbXBsYXRlCiAqLwpmdW5jdGlvbiByZXNvbHZlUGxhY2Vob2xkZXJzKHRlbXBsYXRlKSB7CiAgY29uc3QgcmVnZXggPSAve3suKj99fS9nOwogIGNvbnN0IHZhcmlhYmxlcyA9IHRlbXBsYXRlLm1hdGNoKHJlZ2V4KTsKCiAgaWYgKCF2YXJpYWJsZXMpIHsKICAgIHJldHVybiB0ZW1wbGF0ZTsKICB9CiAgCiAgdmFyIHJlc3VsdCA9IHRlbXBsYXRlOwogIAogIHZhcmlhYmxlcy5mb3JFYWNoKGZ1bmN0aW9uIHN1YihlbGVtZW50KSB7IAogICAgdmFyIHZhck5hbWUgPSBlbGVtZW50LnJlcGxhY2UoL1t7fV0vZywiIik7CiAgICByZXN1bHQgPSByZXN1bHQucmVwbGFjZShlbGVtZW50LHNoYXJlZFN0YXRlLmdldCh2YXJOYW1lKSk7CiAgfSk7CiAgCiAgcmV0dXJuIHJlc3VsdDsKfQoKLyoqCiAqIFNlbmQgYW4gU01TIHZpYSBUd2lsaW8KICogCiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIC0gVGhlIHRleHQgb2YgdGhlIG1lc3NhZ2UgdG8gc2VuZAogKiBAcGFyYW0ge3N0cmluZ30gbnVtYmVyRnJvbSAtIFRoZSBvcmlnaW5hdGluZyBwaG9uZSBudW1iZXIvc2hvcnRjb2RlCiAqIEBwYXJhbSB7c3RyaW5nfSBudW1iZXJUbyAtIFRoZSBwaG9uZSBudW1iZXIgdG8gc2VuZCB0bwogKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnaW5nU2VydmljZVNpZCAtIFR3aWxpbyBtZXNzYWdpbmcgc2VydmljZSBTSUQKICogQHBhcmFtIHtzdHJpZ30gdXJpIC0gVGhlIFVSSSBvZiB0aGUgVHdpbGlvIEFQSSBlbmRwb2ludCAKICogQHBhcmFtIHtzdHJpbmd9IHNpZCAtIFRoZSBUd2lsaW8gYWNjb3VudCBvciBBUEkga2V5IFNJRAogKiBAcGFyYW0geyp9IHNlY3JldCAtIFRoZSBUd2lsaW8gYWNjb3VudCBhdXRoa2V5IG9yIEFQSSBrZXkgc2VjcmV0CiAqIEByZXR1cm5zIC0gQSBub2RlIG91dGNvbWUgCiAqLwpmdW5jdGlvbiBzZW5kU01TKG1lc3NhZ2UsIG51bWJlckZyb20sIG51bWJlclRvLCBtZXNzYWdpbmdTZXJ2aWNlU2lkLCB1cmksIHNpZCwgc2VjcmV0KSB7CgogICAgbG9nZ2VyLm1lc3NhZ2UodGFnKCJDYWxsaW5nIFR3aWxpbyBlbmRwb2ludCAiICsgdXJpKSk7CiAgICBsb2dnZXIubWVzc2FnZSh0YWcoIlNlbmRpbmcgdG8gIiArIG51bWJlclRvKSk7CgogICAgLy8gVHdpbGlvIHNlZW1zIG5vdCB0byBleHBlY3QgdGhlIGZvcm0gdmFsdWVzIHRvIGJlIFVSTCBlbmNvZGVkCgogICAgY29uc3QgcmVxdWVzdEJvZHkgPSAiQm9keT0iLmNvbmNhdChlbmNvZGVVUklDb21wb25lbnQobWVzc2FnZSkpCiAgICAgICAgICAgICAgICAgICAgICAgIC5jb25jYXQoIiZGcm9tPSIpLmNvbmNhdChudW1iZXJGcm9tKSAgCiAgICAgICAgICAgICAgICAgICAgICAgIC5jb25jYXQoIiZUbz0iKS5jb25jYXQobnVtYmVyVG8pCiAgICAgICAgICAgICAgICAgICAgICAgIC5jb25jYXQoIiZNZXNzYWdpbmdTZXJ2aWNlU2lkPSIpLmNvbmNhdChtZXNzYWdpbmdTZXJ2aWNlU2lkKTsKICAKICAgIGxvZ2dlci5tZXNzYWdlKHRhZygiTWVzc2FnZSBib2R5ICIgKyByZXF1ZXN0Qm9keSkpOwoKICAgIGNvbnN0IGJhc2ljQXV0aCA9IGZyLkJhc2U2NC5lbmNvZGUoZnIuU3RyaW5nKHNpZC5jb25jYXQoIjoiKS5jb25jYXQoc2VjcmV0KSkuZ2V0Qnl0ZXMoKSk7CiAgICAKICAgIHZhciByZXNwb25zZTsKCiAgICB0cnkgewogICAgICAgIHZhciByZXF1ZXN0ID0gbmV3IG9yZy5mb3JnZXJvY2suaHR0cC5wcm90b2NvbC5SZXF1ZXN0KCk7CiAgICAgICAgcmVxdWVzdC5zZXRNZXRob2QoIlBPU1QiKTsKICAgICAgICByZXF1ZXN0LnNldFVyaSh1cmkpOwogICAgICAgIHJlcXVlc3QuZ2V0SGVhZGVycygpLmFkZCgiQXV0aG9yaXphdGlvbiIsIkJhc2ljICIgKyBiYXNpY0F1dGgpOwogICAgICAgIHJlcXVlc3QuZ2V0SGVhZGVycygpLmFkZCgiQ29udGVudC1UeXBlIiwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkIik7CiAgICAgICAgcmVxdWVzdC5nZXRFbnRpdHkoKS5zZXRTdHJpbmcocmVxdWVzdEJvZHkpOwoKICAgICAgICByZXNwb25zZSA9IGh0dHBDbGllbnQuc2VuZChyZXF1ZXN0KS5nZXQoKTsKICAgIH0KICAgIGNhdGNoIChlKSB7CiAgICAgICAgbG9nZ2VyLmVycm9yKHRhZygiRXhjZXB0aW9uIGNhbGxpbmcgdHdpbGlvIGVuZHBvaW50ICIgKyBlKSk7CiAgICAgICAgcmV0dXJuIE5vZGVPdXRjb21lLkVSUk9SOwogICAgfQoKICAgIGxvZ1Jlc3BvbnNlKHJlc3BvbnNlKTsKICAgIGNvbnN0IHN0YXR1cyA9IHJlc3BvbnNlLmdldFN0YXR1cygpLmdldENvZGUoKTsKCiAgICBpZiAoc3RhdHVzID09PSA0MDEpIHsKICAgICAgICBsb2dnZXIuZXJyb3IodGFnKCJUd2lsaW8gYXV0aGVudGljYXRpb24gZmFpbGVkIikpOwogICAgICAgIHJldHVybiBOb2RlT3V0Y29tZS5BVVRIRkFJTEVEOyAgICAKICAgIH0KCiAgICBpZiAoc3RhdHVzICE9PSAyMDEpIHsKICAgICAgICBsb2dnZXIuZXJyb3IodGFnKCJCYWQgSFRUUCByZXNwb25zZSBmcm9tIFR3aWxpbzogIiArIHN0YXR1cykpOwogICAgICAgIHJldHVybiBOb2RlT3V0Y29tZS5FUlJPUjsgICAgCiAgICB9CgogICAgdmFyIHJlc3BvbnNlSnNvbiA9IHJlc3BvbnNlLmdldEVudGl0eSgpLmdldFN0cmluZygpOwoKICAgIGlmICghcmVzcG9uc2VKc29uKSB7CiAgICAgICAgbG9nZ2VyLmVycm9yKHRhZygiTm8gcmVzcG9uc2UgYm9keSIpKTsKICAgICAgICByZXR1cm4gTm9kZU91dGNvbWUuRVJST1I7ICAgIAogICAgfQoKICAgIHZhciByZXNwb25zZU9iaiA9IEpTT04ucGFyc2UocmVzcG9uc2VKc29uKTsKCiAgICBpZiAoIXJlc3BvbnNlT2JqKSB7CiAgICAgICAgbG9nZ2VyLmVycm9yKHRhZygiQ291bGRuJ3QgcGFyc2UgcmVzcG9uc2UgYm9keSIpKTsKICAgICAgICByZXR1cm4gTm9kZU91dGNvbWUuRVJST1I7ICAgIAogICAgfQoKICAgIGlmICghKHJlc3BvbnNlT2JqLmhhc093blByb3BlcnR5KCJzaWQiKSkpIHsKICAgICAgICBsb2dnZXIuZXJyb3IodGFnKCJObyBzaWQgcHJvcGVydHkgaW4gVHdpbGlvIHJlc3BvbnNlIikpOwogICAgICAgIHJldHVybiBOb2RlT3V0Y29tZS5FUlJPUjsKICAgIH0gIAoKICAgIGxvZ2dlci5tZXNzYWdlKHRhZygibWVzc2FnZSBkZWxpdmVyZWQgc3VjY2Vzc2Z1bGx5IikpOwogICAgcmV0dXJuIE5vZGVPdXRjb21lLkRFTElWRVJFRDsKfQoKLyoqCiAqIE5vZGUgZW50cnkgcG9pbnQKICovCgpsb2dnZXIubWVzc2FnZSh0YWcoIm5vZGUgZXhlY3V0aW5nIikpOwoKdmFyIGlkOwp2YXIgdGVsZXBob25lTnVtYmVyczsKdmFyIG51bWJlclRvOwoKaWYgKCEoaWQgPSBzaGFyZWRTdGF0ZS5nZXQoY29uZmlnLnNoYXJlZFN0YXRlSWRGaWVsZCkpKSB7CiAgICBsb2dnZXIuZXJyb3IodGFnKCJObyBpZCBpbiBzaGFyZWQgc3RhdGUiKSk7CiAgICBvdXRjb21lID0gTm9kZU91dGNvbWUuRVJST1I7Cn0KZWxzZSBpZiAoISh0ZWxlcGhvbmVOdW1iZXJzID0gaWRSZXBvc2l0b3J5LmdldEF0dHJpYnV0ZShpZCwgY29uZmlnLnBob25lTnVtYmVyRmllbGQpKSkgewogICAgbG9nZ2VyLmVycm9yKHRhZygiTm8gcGhvbmUgbnVtYmVycyBmb3IgdXNlciIpKTsKICAgIG91dGNvbWUgPSBOb2RlT3V0Y29tZS5OT1BIT05FOwp9CmVsc2UgaWYgKCEobnVtYmVyVG8gPSB0ZWxlcGhvbmVOdW1iZXJzLnRvQXJyYXkoKVswXSkpIHsKICAgIGxvZ2dlci5lcnJvcih0YWcoIm5vIHRlbGVwaG9uZU51bWJlciIpKTsKICAgIG91dGNvbWUgPSBOb2RlT3V0Y29tZS5OT1BIT05FOwp9CmVsc2UgaWYgKG51bWJlclRvID09PSAiIikgewogICAgbG9nZ2VyLmVycm9yKHRhZygiYmxhbmsgdGVsZXBob25lTnVtYmVyIikpOwogICAgb3V0Y29tZSA9IE5vZGVPdXRjb21lLk5PUEhPTkU7Cn0KZWxzZSB7CiAgICB2YXIgbWVzc2FnZSA9IHJlc29sdmVQbGFjZWhvbGRlcnMoY29uZmlnLm1lc3NhZ2VUZW1wbGF0ZSk7CiAgICB2YXIgdHdpbGlvVXJpID0gY29uZmlnLmJhc2VVcmkuY29uY2F0KCIvQWNjb3VudHMvIikuY29uY2F0KGNvbmZpZy5hY2NvdW50U2lkKS5jb25jYXQoIi9NZXNzYWdlcy5qc29uIik7CiAgICBvdXRjb21lID0gc2VuZFNNUyhtZXNzYWdlLCBjb25maWcucGhvbmVOdW1iZXJGcm9tLCBudW1iZXJUbywgY29uZmlnLm1lc3NhZ2luZ1NlcnZpY2VTaWQsIHR3aWxpb1VyaSwgY29uZmlnLmFwaUtleVNpZCwgY29uZmlnLmFwaUtleVNlY3JldCk7Cn0=",
  },
  {
    "_id": "400e48ba-3f13-4144-ac7b-f824ea8e98c5",
    "context": "OAUTH2_SCRIPTED_JWT_ISSUER",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Default global script for scripted JWT Issuers",
    "evaluatorVersion": "1.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "OAuth2 JWT Issuer Script",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjIgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKLyoKICogVGhpcyBzY3JpcHQgbGV0cyB5b3UgdG8gZGVyaXZlIHRoZSBjb25maWd1cmF0aW9uIGZvciBhIGR5bmFtaWMgSldUIGlzc3VlciBmcm9tIHRoZSBpc3N1ZXIgc3RyaW5nLgogKiBBIEpXVCBpc3N1ZXIgaXMgbWFkZSB1cCBvZiB0aGUgZm9sbG93aW5nOgogKiAgIC0gaXNzdWVyIC0gdGhlIGlkZW50aWZpZXIgb2YgdGhlIGVudGl0eSB0aGF0IGlzc3VlcyBKV1RzCiAqICAgLSByZXNvdXJjZSBvd25lciBzdWJqZWN0IGNsYWltIC0gdGhlIG5hbWUgb2YgdGhlIGNsYWltIGluIHRoZSBKV1QgdGhhdCBpZGVudGlmaWVzIHRoZSByZXNvdXJjZSBvd25lcgogKiAgIC0gY29uc2VudGVkIHNjb3BlIGNsYWltIC0gdGhlIG5hbWUgb2YgdGhlIGNsYWltIGluIHRoZSBKV1QgdGhhdCByZXByZXNlbnRzIHNjb3BlIHRoYXQgdGhlIHJlc291cmNlIG93bmVyCiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXMgYWxyZWFkeSBjb25zZW50ZWQgdG8gZXh0ZXJuYWxseQogKiAgIC0gYXV0aG9yaXplZCBzdWJqZWN0cyAtIHRoZSBzZXQgb2YgcHJpbmNpcGFsIGlkZW50aWZpZXJzIHRoYXQgYXJlIGF1dGhvcml6ZWQgdG8gYmUgdXNlZCBhcyByZXNvdXJjZSBvd25lcnMKICogICAgICAgICAgICAgICAgICAgICAgICAgICBieSB0aGUgaXNzdWVyCiAqICAgLSBKV0tzIC0gZWl0aGVyIGEgc2V0IG9mIEpXS3Mgb3IgY29ubmVjdGlvbiBkZXRhaWxzIGZvciBvYnRhaW5pbmcgdGhhdCBzZXQsIHRoYXQgYXJlIHRoZSBwdWJsaWMga2V5cyB0aGF0CiAqICAgICAgICAgICAgY2FuIHZlcmlmeSB0aGUgc2lnbmF0dXJlIG9uIHRoZSBpc3N1ZWQgSldUcy4KICoKICogRGVmaW5lZCB2YXJpYWJsZXM6CiAqIGlzc3VlciAtIFN0cmluZwogKiAgICAgICAgICBUaGUgaXNzdWVyIGZyb20gdGhlIGJlYXJlciBKV1QuCiAqIHJlYWxtIC0gU3RyaW5nCiAqICAgICAgICAgVGhlIHBhdGggb2YgdGhlIHJlYWxtIHRoYXQgaXMgaGFuZGxpbmcgdGhlIHJlcXVlc3QuCiAqIHNjcmlwdE5hbWUgLSBTdHJpbmcuCiAqICAgICAgICAgICAgICBBbHdheXMgcHJlc2VudCwgdGhlIGRpc3BsYXkgbmFtZSBvZiB0aGUgc2NyaXB0LgogKiBsb2dnZXIgLSBBbHdheXMgcHJlc2VudCwgdGhlIHNjcmlwdCBkZWJ1ZyBsb2dnZXIgaW5zdGFuY2U6CiAqICAgICAgICAgIGh0dHBzOi8vYmFja3N0YWdlLmZvcmdlcm9jay5jb20vZG9jcy9hbS83L3NjcmlwdGluZy1ndWlkZS9zY3JpcHRpbmctYXBpLWdsb2JhbC1sb2dnZXIuaHRtbCNzY3JpcHRpbmctYXBpLWdsb2JhbC1sb2dnZXIuCiAqICAgICAgICAgIENvcnJlc3BvbmRpbmcgbG9nIGZpbGVzIHdpbGwgYmUgcHJlZml4ZWQgd2l0aDogc2NyaXB0cy5PQVVUSDJfU0NSSVBURURfSldUX0lTU1VFUi4KICogaHR0cENsaWVudCAtIEhUVFAgQ2xpZW50ICgxKS4KICogICAgICAgICAgICAgIEFsd2F5cyBwcmVzZW50LCB0aGUgSFRUUCBDbGllbnQgaW5zdGFuY2U6CiAqICAgICAgICAgICAgICBodHRwczovL2JhY2tzdGFnZS5mb3JnZXJvY2suY29tL2RvY3MvYW0vNy9zY3JpcHRpbmctZ3VpZGUvc2NyaXB0aW5nLWFwaS1nbG9iYWwtaHR0cC1jbGllbnQuaHRtbCNzY3JpcHRpbmctYXBpLWdsb2JhbC1odHRwLWNsaWVudC4KICogaWRSZXBvc2l0b3J5IC0gSWRlbnRpdHkgUmVwb3NpdG9yeSAoMikuIEFsd2F5cyBwcmVzZW50LgogKiBzZWNyZXRzIC0gU2VjcmV0cyBhY2Nlc3NvciAoMykuIEFsd2F5cyBwcmVzZW50LgogKgogKiBSZXR1cm4gLSBvcmcuZm9yZ2Vyb2NrLm9hdXRoMi5jb3JlLlRydXN0ZWRKd3RJc3N1ZXJDb25maWcgKDQpIC0gdGhlIGNvbmZpZ3VyYXRpb24gb2YgdGhlIHRydXN0ZWQgSldUIGlzc3Vlci4KICoKICogQ2xhc3MgcmVmZXJlbmNlOgogKiAoMSkgQ2xpZW50IC0gaHR0cHM6Ly9iYWNrc3RhZ2UuZm9yZ2Vyb2NrLmNvbS9kb2NzL2FtLzcvYXBpZG9jcy9vcmcvZm9yZ2Vyb2NrL2h0dHAvQ2xpZW50Lmh0bWwuCiAqICgyKSBTY3JpcHRlZElkZW50aXR5UmVwb3NpdG9yeSAtIGh0dHBzOi8vYmFja3N0YWdlLmZvcmdlcm9jay5jb20vZG9jcy9hbS83L2FwaWRvY3Mvb3JnL2Zvcmdlcm9jay9vcGVuYW0vc2NyaXB0aW5nL2FwaS9pZGVudGl0eS9TY3JpcHRlZElkZW50aXR5UmVwb3NpdG9yeS5odG1sLgogKiAoMykgU2NyaXB0ZWRTZWNyZXRzIC0gaHR0cHM6Ly9iYWNrc3RhZ2UuZm9yZ2Vyb2NrLmNvbS9kb2NzL2FtLzcvYXBpZG9jcy9vcmcvZm9yZ2Vyb2NrL29wZW5hbS9zY3JpcHRpbmcvYXBpL3NlY3JldHMvU2NyaXB0ZWRTZWNyZXRzLmh0bWwuCiAqICg0KSBUcnVzdGVkSnd0SXNzdWVyQ29uZmlnIC0gaHR0cHM6Ly9iYWNrc3RhZ2UuZm9yZ2Vyb2NrLmNvbS9kb2NzL2FtLzcvYXBpZG9jcy9vcmcvZm9yZ2Vyb2NrL29hdXRoMi9jb3JlL1RydXN0ZWRKd3RJc3N1ZXJDb25maWcuaHRtbC4KICovCgovKiBFWEFNUExFCihmdW5jdGlvbiAoKSB7CiAgICB2YXIgZnJKYXZhID0gSmF2YUltcG9ydGVyKAogICAgICAgIG9yZy5mb3JnZXJvY2sub2F1dGgyLmNvcmUuVHJ1c3RlZEp3dElzc3VlckNvbmZpZywKICAgICAgICBqYXZhLnV0aWwuQ29sbGVjdGlvbnMKICAgICk7CgogICAgdmFyIGlzcyA9IGlkUmVwb3NpdG9yeS5nZXRJZGVudGl0eShpc3N1ZXIpOwogICAgaWYgKGlzcyA9PSBudWxsKSB7CiAgICAgICAgbG9nZ2VyLm1lc3NhZ2UoJ05vIGlzc3VlciBmb3VuZCBmb3I6ICcraXNzdWVyKTsKICAgICAgICByZXR1cm4gbnVsbDsKICAgIH0KICAgIGxvZ2dlci5tZXNzYWdlKCdGb3VuZCBpc3N1ZXI6ICcraXNzKTsKICAgIC8vIGluIHRoaXMgZXhhbXBsZSBlaXRoZXIgYSBKV0sgc2V0IG9yIGEgVVJJIHRvIGEgSldLIHNldCBhcmUgaW4gdGhlIHBvc3RhbEFkZHJlc3MgYXR0cmlidXRlCiAgICB2YXIgandrc0F0dHJzID0gaXNzLmdldEF0dHJpYnV0ZVZhbHVlcygncG9zdGFsQWRkcmVzcycpOwogICAgdmFyIGp3a1NldCA9IGp3a3NBdHRycy5sZW5ndGggPT09IDAgPyBudWxsIDogandrc0F0dHJzWzBdOwogICAgdmFyIGNvbmZpZyA9IG5ldyBmckphdmEuVHJ1c3RlZEp3dElzc3VlckNvbmZpZygKICAgICAgICBpc3N1ZXIsCiAgICAgICAgJ3N1YicsCiAgICAgICAgJ3Njb3BlJywKICAgICAgICAvLyBpbiB0aGlzIGV4YW1wbGUsIHZhbGlkIHN1YmplY3RzIGFyZSBzdG9yZWQgaW4gdGhlIG1haWwgYXR0cmlidXRlCiAgICAgICAgaXNzLmdldEF0dHJpYnV0ZVZhbHVlcygnbWFpbCcpLAogICAgICAgIGp3a1NldC5zdGFydHNXaXRoKCd7JykgPyBqd2tTZXQgOiBudWxsLAogICAgICAgIGp3a1NldC5zdGFydHNXaXRoKCdodHRwJykgPyBqd2tTZXQgOiBudWxsLAogICAgICAgICc1IG1pbnV0ZXMnLAogICAgICAgICcxIG1pbnV0ZScKICAgICk7CiAgICByZXR1cm4gY29uZmlnOwp9KCkpOwoqLw==",
  },
  {
    "_id": "73cecbfc-dad0-4395-be6a-6858ee3a80e5",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Normalizes raw profile data from Microsoft",
    "evaluatorVersion": "1.0",
    "language": "GROOVY",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Microsoft Profile Normalization",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjAgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLmZpZWxkCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5qc29uCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5vYmplY3QKCnJldHVybiBqc29uKG9iamVjdCgKICAgICAgICBmaWVsZCgiaWQiLCByYXdQcm9maWxlLmlkKSwKICAgICAgICBmaWVsZCgiZGlzcGxheU5hbWUiLCByYXdQcm9maWxlLmRpc3BsYXlOYW1lKSwKICAgICAgICBmaWVsZCgiZ2l2ZW5OYW1lIiwgcmF3UHJvZmlsZS5naXZlbk5hbWUpLAogICAgICAgIGZpZWxkKCJmYW1pbHlOYW1lIiwgcmF3UHJvZmlsZS5zdXJuYW1lKSwKICAgICAgICBmaWVsZCgiZW1haWwiLCByYXdQcm9maWxlLnVzZXJQcmluY2lwYWxOYW1lKSwKICAgICAgICBmaWVsZCgidXNlcm5hbWUiLCByYXdQcm9maWxlLnVzZXJQcmluY2lwYWxOYW1lKSkp",
  },
  {
    "_id": "b7259916-71ed-4675-8c5a-de86a80e4aed",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Check if username has already been collected.",
    "evaluatorVersion": "1.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "FrodoTestScript2",
    "script": "LyogQ2hlY2sgVXNlcm5hbWUKICoKICogQXV0aG9yOiB2b2xrZXIuc2NoZXViZXJAZm9yZ2Vyb2NrLmNvbQogKiAKICogQ2hlY2sgaWYgdXNlcm5hbWUgaGFzIGFscmVhZHkgYmVlbiBjb2xsZWN0ZWQuCiAqIFJldHVybiAia25vd24iIGlmIHllcywgInVua25vd24iIG90aGVyd2lzZS4KICogCiAqIFRoaXMgc2NyaXB0IGRvZXMgbm90IG5lZWQgdG8gYmUgcGFyYW1ldHJpemVkLiBJdCB3aWxsIHdvcmsgcHJvcGVybHkgYXMgaXMuCiAqIAogKiBUaGUgU2NyaXB0ZWQgRGVjaXNpb24gTm9kZSBuZWVkcyB0aGUgZm9sbG93aW5nIG91dGNvbWVzIGRlZmluZWQ6CiAqIC0ga25vd24KICogLSB1bmtub3duCiAqLwooZnVuY3Rpb24gKCkgewogICAgaWYgKG51bGwgIT0gc2hhcmVkU3RhdGUuZ2V0KCJ1c2VybmFtZSIpKSB7CiAgICAgICAgb3V0Y29tZSA9ICJrbm93biI7CiAgICB9CiAgICBlbHNlIHsKICAgICAgICBvdXRjb21lID0gInVua25vd24iOwogICAgfQp9KCkpOw==",
  },
  {
    "_id": "39e615b2-898e-4178-ba30-f58bcc095797",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "null",
    "evaluatorVersion": "1.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Save MFA Preference",
    "script": "dmFyIGZyID0gSmF2YUltcG9ydGVyKAogIG9yZy5mb3JnZXJvY2sub3BlbmFtLmF1dGgubm9kZS5hcGkKKTsKd2l0aCAoZnIpIHsKICAKICB2YXIgdXNlcm5hbWUgPSBzaGFyZWRTdGF0ZS5nZXQoIl9pZCIpCiAgdmFyIG1mYVByZWZBdHRyaWJ1dGUgPSAiZnItYXR0ci1pbXVsdGkyIgogIHZhciBtZmFUeXBlID0gIiI7CiAgCiAgaWYgKHNoYXJlZFN0YXRlLmdldCgid2ViLWF1dGhuLWNoYWxsZW5nZSIpICE9IG51bGwpIHsKICAgIG1mYVR5cGUgPSAid2ViYXV0aG4iOwogIH0gZWxzZSBpZiAoc2hhcmVkU3RhdGUuZ2V0KCJwdXNoUmVnaXN0cmF0aW9uVGltZW91dCIpICE9IG51bGwpIHsKICAgICAgIG1mYVR5cGUgPSAicHVzaCIKICB9CiAgCiAgaWRSZXBvc2l0b3J5LmFkZEF0dHJpYnV0ZSh1c2VybmFtZSwgbWZhUHJlZkF0dHJpYnV0ZSwgW21mYVR5cGVdKTsKICAKICBvdXRjb21lID0gInRydWUiCn0=",
  },
  {
    "_id": "dbe0bf9a-72aa-49d5-8483-9db147985a47",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Normalizes raw profile data from ADFS",
    "evaluatorVersion": "1.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "ADFS Profile Normalization (JS)",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjIgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMKICogb3Igd2l0aCBvbmUgb2YgaXRzIGFmZmlsaWF0ZXMuIEFsbCB1c2Ugc2hhbGwgYmUgZXhjbHVzaXZlbHkgc3ViamVjdAogKiB0byBzdWNoIGxpY2Vuc2UgYmV0d2VlbiB0aGUgbGljZW5zZWUgYW5kIEZvcmdlUm9jayBBUy4KICovCgovKgogKiBUaGlzIHNjcmlwdCByZXR1cm5zIHRoZSBzb2NpYWwgaWRlbnRpdHkgcHJvZmlsZSBpbmZvcm1hdGlvbiBmb3IgdGhlIGF1dGhlbnRpY2F0aW5nIHVzZXIKICogaW4gYSBzdGFuZGFyZCBmb3JtIGV4cGVjdGVkIGJ5IHRoZSBTb2NpYWwgUHJvdmlkZXIgSGFuZGxlciBOb2RlLgogKgogKiBEZWZpbmVkIHZhcmlhYmxlczoKICogcmF3UHJvZmlsZSAtIFRoZSBzb2NpYWwgaWRlbnRpdHkgcHJvdmlkZXIgcHJvZmlsZSBpbmZvcm1hdGlvbiBmb3IgdGhlIGF1dGhlbnRpY2F0aW5nIHVzZXIuCiAqICAgICAgICAgICAgICBKc29uVmFsdWUgKDEpLgogKiBsb2dnZXIgLSBUaGUgZGVidWcgbG9nZ2VyIGluc3RhbmNlOgogKiAgICAgICAgICBodHRwczovL2JhY2tzdGFnZS5mb3JnZXJvY2suY29tL2RvY3MvYW0vNy9zY3JpcHRpbmctZ3VpZGUvc2NyaXB0aW5nLWFwaS1nbG9iYWwtbG9nZ2VyLmh0bWwjc2NyaXB0aW5nLWFwaS1nbG9iYWwtbG9nZ2VyLgogKiByZWFsbSAtIFN0cmluZyAocHJpbWl0aXZlKS4KICogICAgICAgICBUaGUgbmFtZSBvZiB0aGUgcmVhbG0gdGhlIHVzZXIgaXMgYXV0aGVudGljYXRpbmcgdG8uCiAqIHJlcXVlc3RIZWFkZXJzIC0gVHJlZU1hcCAoMikuCiAqICAgICAgICAgICAgICAgICAgVGhlIG9iamVjdCB0aGF0IHByb3ZpZGVzIG1ldGhvZHMgZm9yIGFjY2Vzc2luZyBoZWFkZXJzIGluIHRoZSBsb2dpbiByZXF1ZXN0OgogKiAgICAgICAgICAgICAgICAgIGh0dHBzOi8vYmFja3N0YWdlLmZvcmdlcm9jay5jb20vZG9jcy9hbS83L2F1dGhlbnRpY2F0aW9uLWd1aWRlL3NjcmlwdGluZy1hcGktbm9kZS5odG1sI3NjcmlwdGluZy1hcGktbm9kZS1yZXF1ZXN0SGVhZGVycy4KICogcmVxdWVzdFBhcmFtZXRlcnMgLSBUcmVlTWFwICgyKS4KICogICAgICAgICAgICAgICAgICAgICBUaGUgb2JqZWN0IHRoYXQgY29udGFpbnMgdGhlIGF1dGhlbnRpY2F0aW9uIHJlcXVlc3QgcGFyYW1ldGVycy4KICogc2VsZWN0ZWRJZHAgLSBTdHJpbmcgKHByaW1pdGl2ZSkuCiAqICAgICAgICAgICAgICAgVGhlIHNvY2lhbCBpZGVudGl0eSBwcm92aWRlciBuYW1lLiBGb3IgZXhhbXBsZTogZ29vZ2xlLgogKiBzaGFyZWRTdGF0ZSAtIExpbmtlZEhhc2hNYXAgKDMpLgogKiAgICAgICAgICAgICAgIFRoZSBvYmplY3QgdGhhdCBob2xkcyB0aGUgc3RhdGUgb2YgdGhlIGF1dGhlbnRpY2F0aW9uIHRyZWUgYW5kIGFsbG93cyBkYXRhIGV4Y2hhbmdlIGJldHdlZW4gdGhlIHN0YXRlbGVzcyBub2RlczoKICogICAgICAgICAgICAgICBodHRwczovL2JhY2tzdGFnZS5mb3JnZXJvY2suY29tL2RvY3MvYW0vNy9hdXRoLW5vZGVzL2NvcmUtYWN0aW9uLmh0bWwjYWNjZXNzaW5nLXRyZWUtc3RhdGUuCiAqIHRyYW5zaWVudFN0YXRlIC0gTGlua2VkSGFzaE1hcCAoMykuCiAqICAgICAgICAgICAgICAgICAgVGhlIG9iamVjdCBmb3Igc3RvcmluZyBzZW5zaXRpdmUgaW5mb3JtYXRpb24gdGhhdCBtdXN0IG5vdCBsZWF2ZSB0aGUgc2VydmVyIHVuZW5jcnlwdGVkLAogKiAgICAgICAgICAgICAgICAgIGFuZCB0aGF0IG1heSBub3QgbmVlZCB0byBwZXJzaXN0IGJldHdlZW4gYXV0aGVudGljYXRpb24gcmVxdWVzdHMgZHVyaW5nIHRoZSBhdXRoZW50aWNhdGlvbiBzZXNzaW9uOgogKiAgICAgICAgICAgICAgICAgIGh0dHBzOi8vYmFja3N0YWdlLmZvcmdlcm9jay5jb20vZG9jcy9hbS83L2F1dGgtbm9kZXMvY29yZS1hY3Rpb24uaHRtbCNhY2Nlc3NpbmctdHJlZS1zdGF0ZS4KICoKICogUmV0dXJuIC0gYSBKc29uVmFsdWUgKDEpLgogKiAgICAgICAgICBUaGUgcmVzdWx0IG9mIHRoZSBsYXN0IHN0YXRlbWVudCBpbiB0aGUgc2NyaXB0IGlzIHJldHVybmVkIHRvIHRoZSBzZXJ2ZXIuCiAqICAgICAgICAgIEN1cnJlbnRseSwgdGhlIEltbWVkaWF0ZWx5IEludm9rZWQgRnVuY3Rpb24gRXhwcmVzc2lvbiAoYWxzbyBrbm93biBhcyBTZWxmLUV4ZWN1dGluZyBBbm9ueW1vdXMgRnVuY3Rpb24pCiAqICAgICAgICAgIGlzIHRoZSBsYXN0IChhbmQgb25seSkgc3RhdGVtZW50IGluIHRoaXMgc2NyaXB0LCBhbmQgaXRzIHJldHVybiB2YWx1ZSB3aWxsIGJlY29tZSB0aGUgc2NyaXB0IHJlc3VsdC4KICogICAgICAgICAgRG8gbm90IHVzZSAicmV0dXJuIHZhcmlhYmxlIiBzdGF0ZW1lbnQgb3V0c2lkZSBvZiBhIGZ1bmN0aW9uIGRlZmluaXRpb24uCiAqCiAqICAgICAgICAgIFRoaXMgc2NyaXB0J3MgbGFzdCBzdGF0ZW1lbnQgc2hvdWxkIHJlc3VsdCBpbiBhIEpzb25WYWx1ZSAoMSkgd2l0aCB0aGUgZm9sbG93aW5nIGtleXM6CiAqICAgICAgICAgIHsKICogICAgICAgICAgICAgIHsiZGlzcGxheU5hbWUiOiAiY29ycmVzcG9uZGluZy1zb2NpYWwtaWRlbnRpdHktcHJvdmlkZXItdmFsdWUifSwKICogICAgICAgICAgICAgIHsiZW1haWwiOiAiY29ycmVzcG9uZGluZy1zb2NpYWwtaWRlbnRpdHktcHJvdmlkZXItdmFsdWUifSwKICogICAgICAgICAgICAgIHsiZmFtaWx5TmFtZSI6ICJjb3JyZXNwb25kaW5nLXNvY2lhbC1pZGVudGl0eS1wcm92aWRlci12YWx1ZSJ9LAogKiAgICAgICAgICAgICAgeyJnaXZlbk5hbWUiOiAiY29ycmVzcG9uZGluZy1zb2NpYWwtaWRlbnRpdHktcHJvdmlkZXItdmFsdWUifSwKICogICAgICAgICAgICAgIHsiaWQiOiAiY29ycmVzcG9uZGluZy1zb2NpYWwtaWRlbnRpdHktcHJvdmlkZXItdmFsdWUifSwKICogICAgICAgICAgICAgIHsibG9jYWxlIjogImNvcnJlc3BvbmRpbmctc29jaWFsLWlkZW50aXR5LXByb3ZpZGVyLXZhbHVlIn0sCiAqICAgICAgICAgICAgICB7InBob3RvVXJsIjogImNvcnJlc3BvbmRpbmctc29jaWFsLWlkZW50aXR5LXByb3ZpZGVyLXZhbHVlIn0sCiAqICAgICAgICAgICAgICB7InVzZXJuYW1lIjogImNvcnJlc3BvbmRpbmctc29jaWFsLWlkZW50aXR5LXByb3ZpZGVyLXZhbHVlIn0KICogICAgICAgICAgfQogKgogKiAgICAgICAgICBUaGUgY29uc3VtZXIgb2YgdGhpcyBkYXRhIGRlZmluZXMgd2hpY2gga2V5cyBhcmUgcmVxdWlyZWQgYW5kIHdoaWNoIGFyZSBvcHRpb25hbC4KICogICAgICAgICAgRm9yIGV4YW1wbGUsIHRoZSBzY3JpcHQgYXNzb2NpYXRlZCB3aXRoIHRoZSBTb2NpYWwgUHJvdmlkZXIgSGFuZGxlciBOb2RlIGFuZCwKICogICAgICAgICAgdWx0aW1hdGVseSwgdGhlIG1hbmFnZWQgb2JqZWN0IGNyZWF0ZWQvdXBkYXRlZCB3aXRoIHRoaXMgZGF0YQogKiAgICAgICAgICB3aWxsIGV4cGVjdCBjZXJ0YWluIGtleXMgdG8gYmUgcG9wdWxhdGVkLgogKiAgICAgICAgICBJbiBzb21lIGNvbW1vbiBkZWZhdWx0IGNvbmZpZ3VyYXRpb25zLCB0aGUgZm9sbG93aW5nIGtleXMgYXJlIHJlcXVpcmVkIHRvIGJlIG5vdCBlbXB0eToKICogICAgICAgICAgdXNlcm5hbWUsIGdpdmVuTmFtZSwgZmFtaWx5TmFtZSwgZW1haWwuCiAqCiAqICAgICAgICAgIEZyb20gUkZDNDUxNzogQSB2YWx1ZSBvZiB0aGUgRGlyZWN0b3J5IFN0cmluZyBzeW50YXggaXMgYSBzdHJpbmcgb2Ygb25lIG9yIG1vcmUKICogICAgICAgICAgYXJiaXRyYXJ5IGNoYXJhY3RlcnMgZnJvbSB0aGUgVW5pdmVyc2FsIENoYXJhY3RlciBTZXQgKFVDUykuCiAqICAgICAgICAgIEEgemVyby1sZW5ndGggY2hhcmFjdGVyIHN0cmluZyBpcyBub3QgcGVybWl0dGVkLgogKgogKiAoMSkgSnNvblZhbHVlIC0gaHR0cHM6Ly9iYWNrc3RhZ2UuZm9yZ2Vyb2NrLmNvbS9kb2NzL2FtLzcvYXBpZG9jcy9vcmcvZm9yZ2Vyb2NrL2pzb24vSnNvblZhbHVlLmh0bWwuCiAqICgyKSBUcmVlTWFwIC0gaHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vZW4vamF2YS9qYXZhc2UvMTEvZG9jcy9hcGkvamF2YS5iYXNlL2phdmEvdXRpbC9UcmVlTWFwLmh0bWwuCiAqICgzKSBMaW5rZWRIYXNoTWFwIC0gaHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vZW4vamF2YS9qYXZhc2UvMTEvZG9jcy9hcGkvamF2YS5iYXNlL2phdmEvdXRpbC9MaW5rZWRIYXNoTWFwLmh0bWwuCiAqLwoKKGZ1bmN0aW9uICgpIHsKICAgIHZhciBmckphdmEgPSBKYXZhSW1wb3J0ZXIoCiAgICAgICAgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZQogICAgKTsKCiAgICB2YXIgbm9ybWFsaXplZFByb2ZpbGVEYXRhID0gZnJKYXZhLkpzb25WYWx1ZS5qc29uKGZySmF2YS5Kc29uVmFsdWUub2JqZWN0KCkpOwogIAogICAgICAvL2xvZ2dlci5tZXNzYWdlKCdTZWd1aW4gcmF3UHJvZmlsZTogJytyYXdQcm9maWxlKTsKCiAgICBub3JtYWxpemVkUHJvZmlsZURhdGEucHV0KCdpZCcsIHJhd1Byb2ZpbGUuZ2V0KCdzdWInKS5hc1N0cmluZygpKTsKICAgIG5vcm1hbGl6ZWRQcm9maWxlRGF0YS5wdXQoJ2Rpc3BsYXlOYW1lJywgcmF3UHJvZmlsZS5nZXQoJ2dpdmVuTmFtZScpLmFzU3RyaW5nKCkgKyAnICcgKyByYXdQcm9maWxlLmdldCgnc24nKS5hc1N0cmluZygpKTsKICAgIG5vcm1hbGl6ZWRQcm9maWxlRGF0YS5wdXQoJ2VtYWlsJywgcmF3UHJvZmlsZS5nZXQoJ21haWwnKS5hc1N0cmluZygpKTsKICAgIG5vcm1hbGl6ZWRQcm9maWxlRGF0YS5wdXQoJ2dpdmVuTmFtZScsIHJhd1Byb2ZpbGUuZ2V0KCdnaXZlbk5hbWUnKS5hc1N0cmluZygpKTsKICAgIG5vcm1hbGl6ZWRQcm9maWxlRGF0YS5wdXQoJ2ZhbWlseU5hbWUnLCByYXdQcm9maWxlLmdldCgnc24nKS5hc1N0cmluZygpKTsKICAgIG5vcm1hbGl6ZWRQcm9maWxlRGF0YS5wdXQoJ3VzZXJuYW1lJywgcmF3UHJvZmlsZS5nZXQoJ3VwbicpLmFzU3RyaW5nKCkpOwogICAgbm9ybWFsaXplZFByb2ZpbGVEYXRhLnB1dCgncm9sZXMnLCByYXdQcm9maWxlLmdldCgncm9sZXMnKS5hc1N0cmluZygpKTsKICAKICAgICAgLy9sb2dnZXIubWVzc2FnZSgnU2VndWluIG5vcm1hbGl6ZWRQcm9maWxlRGF0YTogJytub3JtYWxpemVkUHJvZmlsZURhdGEpOwoKICAgIHJldHVybiBub3JtYWxpemVkUHJvZmlsZURhdGE7Cn0oKSk7",
  },
  {
    "_id": "cf63df8d-30e4-4839-b671-5b24006a3204",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "null",
    "evaluatorVersion": "1.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "MutilevelSelect",
    "script": "Ly8gbGVnYWN5IC0gbXVsdGlwbGUgY2hvaWNlIGNhbGxiYWNrcwoKdmFyIGZyID0gSmF2YUltcG9ydGVyKAogIG9yZy5mb3JnZXJvY2suaHR0cC5wcm90b2NvbC5SZXF1ZXN0LAogIG9yZy5mb3JnZXJvY2suaHR0cC5wcm90b2NvbC5SZXNwb25zZSwKICBvcmcuZm9yZ2Vyb2NrLm9wZW5hbS5hdXRoLm5vZGUuYXBpLkFjdGlvbiwKICBqYXZheC5zZWN1cml0eS5hdXRoLmNhbGxiYWNrLlRleHRPdXRwdXRDYWxsYmFjaywKICBqYXZheC5zZWN1cml0eS5hdXRoLmNhbGxiYWNrLkNob2ljZUNhbGxiYWNrLAogIGphdmF4LnNlY3VyaXR5LmF1dGguY2FsbGJhY2suQ29uZmlybWF0aW9uQ2FsbGJhY2ssCiAgY29tLnN1bi5pZGVudGl0eS5hdXRoZW50aWNhdGlvbi5jYWxsYmFja3MuSGlkZGVuVmFsdWVDYWxsYmFjaywKICBjb20uc3VuLmlkZW50aXR5LmF1dGhlbnRpY2F0aW9uLmNhbGxiYWNrcy5TY3JpcHRUZXh0T3V0cHV0Q2FsbGJhY2ssCiAgamF2YXguc2VjdXJpdHkuYXV0aC5jYWxsYmFjay5UZXh0SW5wdXRDYWxsYmFjaywKICBvcmcuZm9yZ2Vyb2NrLm9wZW5hbS5hdXRoZW50aWNhdGlvbi5jYWxsYmFja3MuQm9vbGVhbkF0dHJpYnV0ZUlucHV0Q2FsbGJhY2sKKTsKCmZ1bmN0aW9uIGdlbmVyYXRlTnVtZXJpY1Rva2VuKGZvcm1hdCkgewogIHJldHVybiBmb3JtYXQucmVwbGFjZSgvW3hdL2csIGZ1bmN0aW9uKGMpIHsKICAgICAgdmFyIHIgPSBNYXRoLnJhbmRvbSgpKjEwfDA7CiAgICAgIHZhciB2ID0gcjsKICAgICAgcmV0dXJuIHYudG9TdHJpbmcoMTApOwogIH0pOwp9CgpmdW5jdGlvbiBnZXRDb3VudHJpZXMoZGF0YSkgewogIHZhciBjID0gW107CiAgZGF0YS5mb3JFYWNoKGU9PmMucHVzaChlLm5hbWUpKTsKICByZXR1cm4gYzsKfQoKZnVuY3Rpb24gZ2V0U3RhdGVzKGRhdGEsIGMpIHsKICB2YXIgcyA9IFtdOwogIGRhdGFbY10uc3RhdGVzLmZvckVhY2goZT0+cy5wdXNoKGUubmFtZSkpOwogIHJldHVybiBzOwp9CgpmdW5jdGlvbiBnZXRDaXRpZXMoZGF0YSwgYywgcykgewogIHZhciBjaSA9IFtdOwogIGRhdGFbY10uc3RhdGVzW3NdLmNpdGllcy5mb3JFYWNoKGU9PmNpLnB1c2goZS5uYW1lKSk7CiAgcmV0dXJuIGNpOwp9CgpmdW5jdGlvbiBnZXREYXRhKCkgewogIHZhciByZXF1ZXN0VVJMID0gJ2h0dHBzOi8vZ2lzdC5naXRodWJ1c2VyY29udGVudC5jb20vYXRvbWljc2FtdXJhaS80OGM4OTFlOGE3OGU4YWEzNDBjMGZmZjk2ZDQ4MDZmNC9yYXcvOTk0NjFmZjdjZDNjYTFiMGI3YTU1MTk0MjkxNTM1N2UzYTQzOGFiNS9jb3VudHJ5LXN0YXRlLWNpdHkuanNvbic7CiAgdmFyIHJlcXVlc3QgPSBuZXcgb3JnLmZvcmdlcm9jay5odHRwLnByb3RvY29sLlJlcXVlc3QoKTsKICByZXF1ZXN0LnNldFVyaShyZXF1ZXN0VVJMKTsKICByZXF1ZXN0LnNldE1ldGhvZCgnR0VUJyk7CiAgcmVxdWVzdC5nZXRIZWFkZXJzKCkuYWRkKCdDb250ZW50LVR5cGUnLCAnYXBwbGljYXRpb24vanNvbjsnKTsKICAKICB2YXIgcmVzcG9uc2UgPSBodHRwQ2xpZW50LnNlbmQocmVxdWVzdCkuZ2V0KCk7ICAKICB2YXIgcmVzcG9uc2VDb2RlID0gcmVzcG9uc2UuZ2V0U3RhdHVzKCkuZ2V0Q29kZSgpOwogIGlmIChyZXNwb25zZUNvZGUgPT09IDIwMCkgewogICAgcmV0dXJuIEpTT04ucGFyc2UocmVzcG9uc2UuZ2V0RW50aXR5KCkuZ2V0U3RyaW5nKCkpOwogIH0gZWxzZSB7CiAgICByZXR1cm4gbnVsbDsKICB9Cn0KCihmdW5jdGlvbiAoKSB7CiAgdHJ5IHsKICAgIHZhciBhbmNob3IgPSBnZW5lcmF0ZU51bWVyaWNUb2tlbigneHh4Jyk7CiAgICB2YXIgZGF0YSA9IGdldERhdGEoKTsKICAgIHZhciBzdGF0ZXMgPSBbXTsKICAgIHZhciBjaXRpZXMgPSBbXTsKICAgIHZhciBzZWxlY3RlZENvdW50cnkgPSAwOwogICAgdmFyIHNlbGVjdGVkU3RhdGUgPSAwOwogICAgc2VsZWN0ZWRDb3VudHJ5ID0gc2hhcmVkU3RhdGUuZ2V0KCdzZWxlY3RlZENvdW50cnknKT9wYXJzZUludChub2RlU3RhdGUuZ2V0KCdzZWxlY3RlZENvdW50cnknKSk6MDsKICAgIGxvZ2dlci5lcnJvcignc2FuZGxvZzogc2VsZWN0ZWQgY291bnRyeSB7fScsIHNlbGVjdGVkQ291bnRyeSk7CiAgICBzZWxlY3RlZFN0YXRlID0gc2hhcmVkU3RhdGUuZ2V0KCdzZWxlY3RlZFN0YXRlJyk/cGFyc2VJbnQobm9kZVN0YXRlLmdldCgnc2VsZWN0ZWRTdGF0ZScpKTowOwogICAgbG9nZ2VyLmVycm9yKCdzYW5kbG9nOiBzZWxlY3RlZCBzdGF0ZSB7fScsIHNlbGVjdGVkU3RhdGUpOwogICAgaWYgKGNhbGxiYWNrcy5pc0VtcHR5KCkpIHsKICAgICAgdmFyIGNiTGlzdCA9IFtdOwogICAgICB2YXIgY291bnRyeUNiID0gbmV3IGZyLkNob2ljZUNhbGxiYWNrKCdTZWxlY3QgY291bnRyeScsIGdldENvdW50cmllcyhkYXRhKSwgc2VsZWN0ZWRDb3VudHJ5LCBmYWxzZSk7CiAgICAgIGNvdW50cnlDYi5zZXRTZWxlY3RlZEluZGV4KHNlbGVjdGVkQ291bnRyeSk7CiAgICAgIGNiTGlzdC5wdXNoKGNvdW50cnlDYik7CiAgICAgIHN0YXRlcyA9IGdldFN0YXRlcyhkYXRhLCBzZWxlY3RlZENvdW50cnkpOwogICAgICB2YXIgc3RhdGVDYiA9IG5ldyBmci5DaG9pY2VDYWxsYmFjaygnU2VsZWN0IHN0YXRlJywgc3RhdGVzLCBzZWxlY3RlZFN0YXRlLCBmYWxzZSk7CiAgICAgIHN0YXRlQ2Iuc2V0U2VsZWN0ZWRJbmRleChzZWxlY3RlZFN0YXRlKTsKICAgICAgY2JMaXN0LnB1c2goc3RhdGVDYik7CiAgICAgIGNpdGllcyA9IGdldENpdGllcyhkYXRhLCBzZWxlY3RlZENvdW50cnksIHNlbGVjdGVkU3RhdGUpOwogICAgICBjYkxpc3QucHVzaChuZXcgZnIuVGV4dE91dHB1dENhbGxiYWNrKDAsIGBMaXN0IG9mIGNpdGllcyBpbiAke3N0YXRlc1tzZWxlY3RlZFN0YXRlXX1gKSk7CiAgICAgIGNpdGllcy5mb3JFYWNoKGU9PnsKICAgICAgICBjYkxpc3QucHVzaChuZXcgZnIuVGV4dE91dHB1dENhbGxiYWNrKDAsIGUpKTsKICAgICAgfSk7CgogICAgICB2YXIgc2NyaXB0ID0gYAogICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgICAgICAgICBjb25zb2xlLmxvZygnc2NyaXB0IGVudGVyJyk7CiAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdtdWx0aXNlbGVjdF9fb3B0aW9uJykuZm9yRWFjaChmdW5jdGlvbihlKSB7CiAgICAgICAgICAgIGUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICBjb25zdCBodkNiID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NlbGVjdGlvbkNoYW5nZWQnKTsKICAgICAgICAgICAgICBjb25zdCBldiA9IG5ldyBFdmVudCgiY2hhbmdlIik7CiAgICAgICAgICAgICAgaHZDYi5zZXRBdHRyaWJ1dGUoJ3ZhbHVlJywgJ3RydWUnKTsKICAgICAgICAgICAgICBjb25zb2xlLmxvZygnaW52b2tpbmcgY2hhbmdlIG9uIGhpZGRlbiB2YWx1ZSBpbnB1dCcpOwogICAgICAgICAgICAgIGh2Q2IuZGlzcGF0Y2hFdmVudChldik7CiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3N1Ym1pdHRpbmcuLi4nKTsKICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbG9naW5CdXR0b25fMCcpLmNsaWNrKCk7CiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9KQogICAgICAgICAgfSkKICAgICAgICB9LCA1MCk7CiAgICAgIGA7CiAgICAgIGNiTGlzdC5wdXNoKG5ldyBmci5IaWRkZW5WYWx1ZUNhbGxiYWNrKCdzZWxlY3Rpb25DaGFuZ2VkJywgJ2ZhbHNlJykpOwogICAgICBjYkxpc3QucHVzaChuZXcgZnIuQ29uZmlybWF0aW9uQ2FsbGJhY2soMCwgWydGaW5pc2gnXSwgMCkpOwogICAgICBjYkxpc3QucHVzaChuZXcgZnIuU2NyaXB0VGV4dE91dHB1dENhbGxiYWNrKHNjcmlwdCkpOwogICAgICBhY3Rpb24gPSBmci5BY3Rpb24uc2VuZC5hcHBseShudWxsLCBjYkxpc3QpLmJ1aWxkKCk7CiAgICB9IGVsc2UgewogICAgICBsb2dnZXIuZXJyb3IoJ3NhbmRsb2c6IGhpZGRlbiB0ZXh0IGlucHV0OiB7fScsIGNhbGxiYWNrcy5nZXQoY2FsbGJhY2tzLnNpemUoKS0zKS5nZXRWYWx1ZSgpKTsKICAgICAgaWYgKGNhbGxiYWNrcy5nZXQoY2FsbGJhY2tzLnNpemUoKS0zKS5nZXRWYWx1ZSgpID09ICd0cnVlJykgeyAvLyBjaGVjayB2YWx1ZSBvZiB0ZXh0IGlucHV0IGNhbGxiYWNrCiAgICAgICAgLy8gb25lIG9mIHRoZSBjYXRlZ29yeSBwaWNrZXJzIHdhcyBjaGFuZ2VkCiAgICAgICAgaWYoc2VsZWN0ZWRDb3VudHJ5ICE9IGNhbGxiYWNrcy5nZXQoMCkuZ2V0U2VsZWN0ZWRJbmRleGVzKClbMF0pIHsKICAgICAgICAgIHNlbGVjdGVkU3RhdGUgPSAwOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBzZWxlY3RlZFN0YXRlID0gY2FsbGJhY2tzLmdldCgxKS5nZXRTZWxlY3RlZEluZGV4ZXMoKVswXTsKICAgICAgICB9CiAgICAgICAgc2VsZWN0ZWRDb3VudHJ5ID0gY2FsbGJhY2tzLmdldCgwKS5nZXRTZWxlY3RlZEluZGV4ZXMoKVswXTsKICAgICAgICBsb2dnZXIuZXJyb3IoJ3NhbmRsb2c6IHNldCBzZWxlY3RlZCBjb3VudHJ5IHt9Jywgc2VsZWN0ZWRDb3VudHJ5KTsKICAgICAgICBsb2dnZXIuZXJyb3IoJ3NhbmRsb2c6IHNldCBzZWxlY3RlZCBzdGF0ZSB7fScsIHNlbGVjdGVkU3RhdGUpOyAgCiAgICAgICAgc2hhcmVkU3RhdGUucHV0KCdzZWxlY3RlZENvdW50cnknLCBzZWxlY3RlZENvdW50cnkpOwogICAgICAgIHNoYXJlZFN0YXRlLnB1dCgnc2VsZWN0ZWRTdGF0ZScsIHNlbGVjdGVkU3RhdGUpOwogICAgICAgIGFjdGlvbiA9IGZyLkFjdGlvbi5nb1RvKCd1cGRhdGUnKS5idWlsZCgpOwogICAgICB9IGVsc2UgewogICAgICAgIC8vIHVzZXIgY2xpY2tlZCAiZmluaXNoIgogICAgICAgIGFjdGlvbiA9IGZyLkFjdGlvbi5nb1RvKCdjb21wbGV0ZScpLmJ1aWxkKCk7CiAgICAgIH0KICAgIH0KICB9IGNhdGNoIChlKSB7CiAgICBsb2dnZXIuZXJyb3IoJ3NhbmRsb2c6IGVycm9yOiB7fSAnICsgZSwgZSk7CiAgICBvdXRjb21lID0gJ2Vycm9yJwogIH0KfSkoKTs=",
  },
  {
    "_id": "739bdc48-fd24-4c52-b353-88706d75558a",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Check if username has already been collected.",
    "evaluatorVersion": "1.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Check Username",
    "script": "LyogQ2hlY2sgVXNlcm5hbWUKICoKICogQXV0aG9yOiB2b2xrZXIuc2NoZXViZXJAZm9yZ2Vyb2NrLmNvbQogKiAKICogQ2hlY2sgaWYgdXNlcm5hbWUgaGFzIGFscmVhZHkgYmVlbiBjb2xsZWN0ZWQuCiAqIFJldHVybiAia25vd24iIGlmIHllcywgInVua25vd24iIG90aGVyd2lzZS4KICogCiAqIFRoaXMgc2NyaXB0IGRvZXMgbm90IG5lZWQgdG8gYmUgcGFyYW1ldHJpemVkLiBJdCB3aWxsIHdvcmsgcHJvcGVybHkgYXMgaXMuCiAqIAogKiBUaGUgU2NyaXB0ZWQgRGVjaXNpb24gTm9kZSBuZWVkcyB0aGUgZm9sbG93aW5nIG91dGNvbWVzIGRlZmluZWQ6CiAqIC0ga25vd24KICogLSB1bmtub3duCiAqLwooZnVuY3Rpb24gKCkgewogICAgaWYgKG51bGwgIT0gc2hhcmVkU3RhdGUuZ2V0KCJ1c2VybmFtZSIpKSB7CiAgICAgICAgb3V0Y29tZSA9ICJrbm93biI7CiAgICB9CiAgICBlbHNlIHsKICAgICAgICBvdXRjb21lID0gInVua25vd24iOwogICAgfQp9KCkpOw==",
  },
  {
    "_id": "07ee6240-d106-4e25-a781-5fcabc477d22",
    "context": "SAML2_SP_ADAPTER",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "null",
    "evaluatorVersion": "1.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "FrodoSPAdapter",
    "script": "",
  },
  {
    "_id": "f203173e-bceb-4e8e-8bde-52f2616b7278",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "null",
    "evaluatorVersion": "1.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "pwdlessSet.js",
    "script": "aWQgPSBzaGFyZWRTdGF0ZS5nZXQoIl9pZCIpOwpzZXRDdXN0b21BdHRyVmFsdWUoImN1c3RvbV9wYXNzd29yZGxlc3MiLCB0cnVlKTsKaWRSZXBvc2l0b3J5LnNldEF0dHJpYnV0ZShpZCwgImFzc2lnbmVkRGFzaGJvYXJkIixbInJlZ2lzdGVyV2ViQXV0aE5EZXZpY2UiLCJzZXRVc2VybmFtZUxlc3MiLCJwZWVyUmVjb3ZlcnlFbWFpbCIsInBlZXJSZWNvdmVyeTFGQSIsICJyZWdpc3RlclB1c2giXSk7CgoKICAgIApvdXRjb21lID0gInRydWUiOwoKZnVuY3Rpb24gc2V0Q3VzdG9tQXR0clZhbHVlIChjdXN0b21BdHRyTmFtZSxjdXN0b21BdHRyVmFsdWUpCnsKICB2YXIgaWQgPSBzaGFyZWRTdGF0ZS5nZXQoJ19pZCcpOwogIHZhciBmcklkbUN1c3RvbUF0dHJpYnV0ZXMgPSBpZFJlcG9zaXRvcnkuZ2V0QXR0cmlidXRlKGlkLCAnZnItaWRtLWN1c3RvbS1hdHRycycpOwogIGlmIChmcklkbUN1c3RvbUF0dHJpYnV0ZXMpCiAgewogICAgdmFyIGZySWRtQ3VzdG9tQXR0cmlidXRlc09iamVjdCA9IEpTT04ucGFyc2UoU3RyaW5nKGZySWRtQ3VzdG9tQXR0cmlidXRlcy50b0FycmF5KClbMF0pKTsKICAgIGZySWRtQ3VzdG9tQXR0cmlidXRlc09iamVjdFtjdXN0b21BdHRyTmFtZV0gPSBjdXN0b21BdHRyVmFsdWU7CiAgICB2YXIganNvbl9zdHJpbmcgPSBKU09OLnN0cmluZ2lmeShmcklkbUN1c3RvbUF0dHJpYnV0ZXNPYmplY3QpOwogICAgaWRSZXBvc2l0b3J5LnNldEF0dHJpYnV0ZShpZCwgImZyLWlkbS1jdXN0b20tYXR0cnMiLFtqc29uX3N0cmluZ10pOwogIH0KfQo=",
  },
  {
    "_id": "58c824ae-84ed-4724-82cd-db128fc3f6c",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Converts a normalized social profile into a managed user",
    "evaluatorVersion": "1.0",
    "language": "GROOVY",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Normalized Profile to Managed User",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjAgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLmZpZWxkCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5qc29uCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5vYmplY3QKCmltcG9ydCBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlCgpKc29uVmFsdWUgbWFuYWdlZFVzZXIgPSBqc29uKG9iamVjdCgKICAgICAgICBmaWVsZCgiZ2l2ZW5OYW1lIiwgbm9ybWFsaXplZFByb2ZpbGUuZ2l2ZW5OYW1lKSwKICAgICAgICBmaWVsZCgic24iLCBub3JtYWxpemVkUHJvZmlsZS5mYW1pbHlOYW1lKSwKICAgICAgICBmaWVsZCgibWFpbCIsIG5vcm1hbGl6ZWRQcm9maWxlLmVtYWlsKSwKICAgICAgICBmaWVsZCgidXNlck5hbWUiLCBub3JtYWxpemVkUHJvZmlsZS51c2VybmFtZSkpKQoKaWYgKG5vcm1hbGl6ZWRQcm9maWxlLnBvc3RhbEFkZHJlc3MuaXNOb3ROdWxsKCkpIG1hbmFnZWRVc2VyLnB1dCgicG9zdGFsQWRkcmVzcyIsIG5vcm1hbGl6ZWRQcm9maWxlLnBvc3RhbEFkZHJlc3MpCmlmIChub3JtYWxpemVkUHJvZmlsZS5hZGRyZXNzTG9jYWxpdHkuaXNOb3ROdWxsKCkpIG1hbmFnZWRVc2VyLnB1dCgiY2l0eSIsIG5vcm1hbGl6ZWRQcm9maWxlLmFkZHJlc3NMb2NhbGl0eSkKaWYgKG5vcm1hbGl6ZWRQcm9maWxlLmFkZHJlc3NSZWdpb24uaXNOb3ROdWxsKCkpIG1hbmFnZWRVc2VyLnB1dCgic3RhdGVQcm92aW5jZSIsIG5vcm1hbGl6ZWRQcm9maWxlLmFkZHJlc3NSZWdpb24pCmlmIChub3JtYWxpemVkUHJvZmlsZS5wb3N0YWxDb2RlLmlzTm90TnVsbCgpKSBtYW5hZ2VkVXNlci5wdXQoInBvc3RhbENvZGUiLCBub3JtYWxpemVkUHJvZmlsZS5wb3N0YWxDb2RlKQppZiAobm9ybWFsaXplZFByb2ZpbGUuY291bnRyeS5pc05vdE51bGwoKSkgbWFuYWdlZFVzZXIucHV0KCJjb3VudHJ5Iiwgbm9ybWFsaXplZFByb2ZpbGUuY291bnRyeSkKaWYgKG5vcm1hbGl6ZWRQcm9maWxlLnBob25lLmlzTm90TnVsbCgpKSBtYW5hZ2VkVXNlci5wdXQoInRlbGVwaG9uZU51bWJlciIsIG5vcm1hbGl6ZWRQcm9maWxlLnBob25lKQoKLy8gaWYgdGhlIGdpdmVuTmFtZSBhbmQgZmFtaWx5TmFtZSBpcyBudWxsIG9yIGVtcHR5Ci8vIHRoZW4gYWRkIGEgYm9vbGVhbiBmbGFnIHRvIHRoZSBzaGFyZWQgc3RhdGUgdG8gaW5kaWNhdGUgbmFtZXMgYXJlIG5vdCBwcmVzZW50Ci8vIHRoaXMgY291bGQgYmUgdXNlZCBlbHNld2hlcmUKLy8gZm9yIGVnLiB0aGlzIGNvdWxkIGJlIHVzZWQgaW4gYSBzY3JpcHRlZCBkZWNpc2lvbiBub2RlIHRvIGJ5LXBhc3MgcGF0Y2hpbmcKLy8gdGhlIHVzZXIgb2JqZWN0IHdpdGggYmxhbmsgdmFsdWVzIHdoZW4gZ2l2ZW5OYW1lICBhbmQgZmFtaWx5TmFtZSBpcyBub3QgcHJlc2VudApib29sZWFuIG5vR2l2ZW5OYW1lID0gbm9ybWFsaXplZFByb2ZpbGUuZ2l2ZW5OYW1lLmlzTnVsbCgpIHx8ICghbm9ybWFsaXplZFByb2ZpbGUuZ2l2ZW5OYW1lLmFzU3RyaW5nKCk/LnRyaW0oKSkKYm9vbGVhbiBub0ZhbWlseU5hbWUgPSBub3JtYWxpemVkUHJvZmlsZS5mYW1pbHlOYW1lLmlzTnVsbCgpIHx8ICghbm9ybWFsaXplZFByb2ZpbGUuZmFtaWx5TmFtZS5hc1N0cmluZygpPy50cmltKCkpCnNoYXJlZFN0YXRlLnB1dCgibmFtZUVtcHR5T3JOdWxsIiwgbm9HaXZlbk5hbWUgJiYgbm9GYW1pbHlOYW1lKQoKcmV0dXJuIG1hbmFnZWRVc2VyCg==",
  },
  {
    "_id": "59f84396-71e4-4c1d-a6ae-c4fc624d9752",
    "context": "LIBRARY",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "A test script that uses an environment variable and a secret variable",
    "evaluatorVersion": "2.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Test-Script-1",
    "script": "Ly8gQ2FsY3VsYXRlIEU9bWNeMiB1c2luZyBtID0gNDIKY29uc3QgYzIgPSBzeXN0ZW1FbnYuZ2V0UHJvcGVydHkoImVzdi50ZXN0LnZhcmlhYmxlLmxpZ2h0Iik7CmNvbnNvbGUubG9nKGBFID0gJHs0MiAqIGMyICogYzJ9YCk7Ci8vIENhbGN1bGF0ZSB0aGUgYXJlYSBvZiBhIGNpcmNsZSB3aXRoIHJhZGl1cyByID0gNDIKY29uc3QgcGkgPSBwYXJzZUZsb2F0KHN5c3RlbUVudi5nZXRQcm9wZXJ0eSgiZXN2LnRlc3Quc2VjcmV0LnBpIikpOwpjb25zb2xlLmxvZyhgQSA9ICR7cGkgKiA0MiAqIDQyfWApOw==",
  },
  {
    "_id": "29be3f4a-cf40-4aca-8fe3-de40c9a801dd",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "null",
    "evaluatorVersion": "1.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "hasWebAuthN.js",
    "script": "dmFyIHdlYmF1dGhuRGV2aWNlUHJvZmlsZXMgPSBpZFJlcG9zaXRvcnkuZ2V0QXR0cmlidXRlKHNoYXJlZFN0YXRlLmdldCgiX2lkIiksICJ3ZWJhdXRobkRldmljZVByb2ZpbGVzIikudG9TdHJpbmcoKTsKc2hhcmVkU3RhdGUucHV0KCJkZWJ1ZyIsd2ViYXV0aG5EZXZpY2VQcm9maWxlcyk7CmlmKHdlYmF1dGhuRGV2aWNlUHJvZmlsZXMubGVuZ3RoPjIpIHsKICAgIG91dGNvbWUgPSAidHJ1ZSI7Cn0KZWxzZSB7CiAgb3V0Y29tZSA9ICJmYWxzZSI7Cn0=",
  },
  {
    "_id": "13aaf8de-cd8c-4b0e-9167-39ca1fb590a4",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "null",
    "evaluatorVersion": "1.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "timerButton.js",
    "script": "Ly8gVGltZXIgQnV0dG9uIG5vZGUKLy8gT3V0Y29tZXM6IFsgInRydWUiLCAidGltZXIiIF0KCgpERUxBWT0xMDsKTUVTU0FHRT0iU2tpcCB0byB5b3VyIHByZWZlcnJlZCBtZXRob2QuLi4gIjsKQlVUVE9OVEVYVD0iU2VsZWN0IGFub3RoZXIgbG9naW4gbWV0aG9kIjsKCnZhciBmciA9IEphdmFJbXBvcnRlcigKICAgIG9yZy5mb3JnZXJvY2sub3BlbmFtLmF1dGgubm9kZS5hcGkuQWN0aW9uLAogICAgamF2YXguc2VjdXJpdHkuYXV0aC5jYWxsYmFjay5OYW1lQ2FsbGJhY2ssCiAgICBjb20uc3VuLmlkZW50aXR5LmF1dGhlbnRpY2F0aW9uLmNhbGxiYWNrcy5TY3JpcHRUZXh0T3V0cHV0Q2FsbGJhY2sKKQoKZnVuY3Rpb24gY3JlYXRlU2NyaXB0KCkgewogICAgcmV0dXJuIFN0cmluZygiIFxuXAogICAgICAgIHZhciBDT1VOVCA9ICIgKyBERUxBWSArICI7IFxuXAogICAgICAgIGZ1bmN0aW9uIGdvKG9icykgeyBcblwKICAgICAgICAgICAgY29uc3QgcCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0W2RhdGEtdnYtYXM9XCJEVU1NWVwiXScpWzBdOyBcblwKICAgICAgICAgICAgaWYgKHApIHsgXG5cCiAgICAgICAgICAgICAgICBwLmhpZGRlbiA9IHRydWU7IFxuXAogICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignbGFiZWxbZm9yPScgKyBwLmlkICsgJ10nKS5oaWRkZW4gPSB0cnVlOyBcblwKICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkucXVlcnlTZWxlY3RvcignYnV0dG9uW3R5cGU9c3VibWl0XScpLmlubmVyVGV4dCA9ICciICsgQlVUVE9OVEVYVCArICInOyBcblwKICAgICAgICAgICAgICAgIHZhciBiID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7IFxuXAogICAgICAgICAgICAgICAgYi5jbGFzc0xpc3QuYWRkKFwiYnRuXCIsIFwibXQtM1wiLCBcImJ0bi1zZWNvbmRhcnlcIik7IFxuXAogICAgICAgICAgICAgICAgYi5pbm5lckhUTUwgPSAnIiArIE1FU1NBR0UgKyAiJyArIENPVU5UICsgJ3MnOyBcblwKICAgICAgICAgICAgICAgIGIub25jbGljayA9IGZ1bmN0aW9uKCkgeyBwLnZhbHVlPSdfX19USU1FX19fJzsgcC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgnaW5wdXQnKSk7IH07IFxuXAogICAgICAgICAgICAgICAgcC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShiLCBwLm5leHRTaWJsaW5nKTsgXG5cCiAgICAgICAgICAgICAgICB2YXIgdCA9IHNldEludGVydmFsKGZ1bmN0aW9uKCkgeyBcblwKICAgICAgICAgICAgICAgICAgICBpZiAoQ09VTlQgPT0gMSkgeyBcblwKICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbCh0KTsgXG5cCiAgICAgICAgICAgICAgICAgICAgICAgIHAudmFsdWU9J19fX1RJTUVfX18nOyBwLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdpbnB1dCcpKTsgXG5cCiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdsb2dpbkJ1dHRvbl8wJykuY2xpY2soKTsgfSwgMjAwKTsgXG5cCiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsgXG5cCiAgICAgICAgICAgICAgICAgICAgICAgIENPVU5ULS07IFxuXAogICAgICAgICAgICAgICAgICAgICAgICBiLmlubmVySFRNTCA9ICciICsgTUVTU0FHRSArICInICsgQ09VTlQgKyAncyc7IFxuXAogICAgICAgICAgICAgICAgICAgIH0gXG5cCiAgICAgICAgICAgICAgICB9LCAxMDAwICk7IFxuXAogICAgICAgICAgICAgICAgaWYgKG9icykgb2JzLmRpc2Nvbm5lY3QoKTsgXG5cCiAgICAgICAgICAgICAgICByZXR1cm47IFxuXAogICAgICAgICAgICB9IFxuXAogICAgICAgIH0gXG5cCiAgICAgICAgaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0W2RhdGEtdnYtYXM9XCJEVU1NWVwiXScpWzBdKSBnbygpOyBcblwKICAgICAgICBlbHNlIHsgXG5cCiAgICAgICAgICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoKG11dGF0aW9ucywgb2JzKSA9PiB7IGdvKG9icyk7IH0pOyBcblwKICAgICAgICAgICAgb2JzZXJ2ZXIub2JzZXJ2ZShkb2N1bWVudCwgeyBjaGlsZExpc3Q6IHRydWUsIHN1YnRyZWU6IHRydWUgfSk7IFxuXAogICAgICAgIH0gXG5cCiAgICAiKTsKfQoKCmlmIChjYWxsYmFja3MuaXNFbXB0eSgpKSB7CiAgICBhY3Rpb24gPSBmci5BY3Rpb24uc2VuZCgKICAgICAgICBuZXcgZnIuU2NyaXB0VGV4dE91dHB1dENhbGxiYWNrKGNyZWF0ZVNjcmlwdCgpKSwKICAgICAgICBuZXcgZnIuTmFtZUNhbGxiYWNrKCJEVU1NWSIpCiAgICApLmJ1aWxkKCkKfSBlbHNlIHsKICAgIHZhciBjYiA9IGNhbGxiYWNrcy5nZXQoMSkuZ2V0TmFtZSgpOwogICAgaWYgKGNiID09PSAiX19fVElNRV9fXyIpIHsKICAgICAgICBhY3Rpb24gPSBmci5BY3Rpb24uZ29UbygidGltZXIiKS5idWlsZCgpOwogICAgfSBlbHNlIHsKICAgICAgICBhY3Rpb24gPSBmci5BY3Rpb24uZ29UbygidHJ1ZSIpLmJ1aWxkKCk7CiAgICB9Cn0=",
  },
  {
    "_id": "95143d29-e417-49a8-a86c-a3b4cf8fd8ed",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "null",
    "evaluatorVersion": "2.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "MultilevelSelect",
    "script": "CmZ1bmN0aW9uIGdldENvdW50cmllcyhkYXRhKSB7CiAgdmFyIGMgPSBbXTsKICBkYXRhLmZvckVhY2goZT0+Yy5wdXNoKGUubmFtZSkpOwogIHJldHVybiBjOwp9CgpmdW5jdGlvbiBnZXRTdGF0ZXMoZGF0YSwgYykgewogIHZhciBzID0gW107CiAgZGF0YVtjXS5zdGF0ZXMuZm9yRWFjaChlPT5zLnB1c2goZS5uYW1lKSk7CiAgcmV0dXJuIHM7Cn0KCmZ1bmN0aW9uIGdldENpdGllcyhkYXRhLCBjLCBzKSB7CiAgdmFyIGNpID0gW107CiAgZGF0YVtjXS5zdGF0ZXNbc10uY2l0aWVzLmZvckVhY2goZT0+Y2kucHVzaChlLm5hbWUpKTsKICByZXR1cm4gY2k7Cn0KCmZ1bmN0aW9uIGdldERhdGEoKSB7CiAgdmFyIHJlcXVlc3RPcHRpb25zID0gewogICAgbWV0aG9kOiAnR0VUJywKICB9CgogIHZhciByZXF1ZXN0VVJMID0gJ2h0dHBzOi8vZ2lzdC5naXRodWJ1c2VyY29udGVudC5jb20vYXRvbWljc2FtdXJhaS80OGM4OTFlOGE3OGU4YWEzNDBjMGZmZjk2ZDQ4MDZmNC9yYXcvOTk0NjFmZjdjZDNjYTFiMGI3YTU1MTk0MjkxNTM1N2UzYTQzOGFiNS9jb3VudHJ5LXN0YXRlLWNpdHkuanNvbic7CiAgdmFyIHJlc3BvbnNlID0gaHR0cENsaWVudC5zZW5kKHJlcXVlc3RVUkwsIHJlcXVlc3RPcHRpb25zKS5nZXQoKTsKCiAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gMjAwKSB7CiAgICByZXR1cm4gSlNPTi5wYXJzZShyZXNwb25zZS50ZXh0KCkpOwogIH0gZWxzZSB7CiAgICBudWxsOwogIH0KfQoKKGZ1bmN0aW9uICgpIHsKICB0cnkgewogICAgdmFyIGRhdGEgPSBnZXREYXRhKCk7CiAgICB2YXIgc3RhdGVzID0gW107CiAgICB2YXIgY2l0aWVzID0gW107CiAgICB2YXIgc2VsZWN0ZWRDb3VudHJ5ID0gMDsKICAgIHZhciBzZWxlY3RlZFN0YXRlID0gMDsKICAgIGlmIChjYWxsYmFja3MuaXNFbXB0eSgpKSB7CiAgICAgIHNlbGVjdGVkQ291bnRyeSA9IG5vZGVTdGF0ZS5nZXQoJ3NlbGVjdGVkQ291bnRyeScpP3BhcnNlSW50KG5vZGVTdGF0ZS5nZXQoJ3NlbGVjdGVkQ291bnRyeScpKTowOwogICAgICBsb2dnZXIuZXJyb3IoJ3NhbmRsb2c6IHNlbGVjdGVkIGNvdW50cnkge30nLCBzZWxlY3RlZENvdW50cnkpOwogICAgICBzZWxlY3RlZFN0YXRlID0gbm9kZVN0YXRlLmdldCgnc2VsZWN0ZWRTdGF0ZScpP3BhcnNlSW50KG5vZGVTdGF0ZS5nZXQoJ3NlbGVjdGVkU3RhdGUnKSk6MDsKICAgICAgbG9nZ2VyLmVycm9yKCdzYW5kbG9nOiBzZWxlY3RlZCBzdGF0ZSB7fScsIHNlbGVjdGVkU3RhdGUpOwogICAgICBjYWxsYmFja3NCdWlsZGVyLmNob2ljZUNhbGxiYWNrKCdTZWxlY3QgY291bnRyeScsIGdldENvdW50cmllcyhkYXRhKSwgc2VsZWN0ZWRDb3VudHJ5LCBmYWxzZSk7CiAgICAgIHN0YXRlcyA9IGdldFN0YXRlcyhkYXRhLCBzZWxlY3RlZENvdW50cnkpOwogICAgICBjYWxsYmFja3NCdWlsZGVyLmNob2ljZUNhbGxiYWNrKCdTZWxlY3Qgc3RhdGUnLCBzdGF0ZXMsIHNlbGVjdGVkU3RhdGUsIGZhbHNlKTsKICAgICAgY2l0aWVzID0gZ2V0Q2l0aWVzKGRhdGEsIHNlbGVjdGVkQ291bnRyeSwgc2VsZWN0ZWRTdGF0ZSk7CiAgICAgIGxvZ2dlci5lcnJvcignc2FuZGxvZzogaGVyZSAxJyk7CiAgICAgIGNpdGllcy5mb3JFYWNoKGU9PnsKICAgICAgICBjYWxsYmFja3NCdWlsZGVyLnRleHRPdXRwdXRDYWxsYmFjaygwLCBlKTsKICAgICAgfSk7CiAgICAgIGxvZ2dlci5lcnJvcignc2FuZGxvZzogaGVyZSAyJyk7CiAgICAgIGNhbGxiYWNrc0J1aWxkZXIuY29uZmlybWF0aW9uQ2FsbGJhY2soMCwgWydVcGRhdGUnLCAnQ29tcGxldGUnXSwgMCk7CiAgICAgIGxvZ2dlci5lcnJvcignc2FuZGxvZzogaGVyZSAzOiB7fScsIGNhbGxiYWNrcy5nZXRDaG9pY2VDYWxsYmFja3MoKS5zaXplKCkpOwogICAgICBjYWxsYmFja3MuZ2V0Q2hvaWNlQ2FsbGJhY2tzKCkuZ2V0KDApLnNldFNlbGVjdGVkSW5kZXgoc2VsZWN0ZWRDb3VudHJ5KTsKICAgICAgbG9nZ2VyLmVycm9yKCdzYW5kbG9nOiBoZXJlIDQnKTsKICAgICAgY2FsbGJhY2tzLmdldENob2ljZUNhbGxiYWNrcygpLmdldCgxKS5zZXRTZWxlY3RlZEluZGV4KHNlbGVjdGVkU3RhdGUpOwoKICAgICAgbG9nZ2VyLmVycm9yKCdzYW5kbG9nOiBoZXJlIDUnKTsKICAgICAgdmFyIHNjcmlwdCA9IGAKICAgICAgICAgIGZ1bmN0aW9uIHNob3dPcmdEZXRhaWxzKCkgewogICAgICAgICAgICB2YXIgd3JhcHBlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd3cmFwcGVyJyk7CiAgICAgICAgICAgIHdyYXBwZXIuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmViZWdpbicsICc8ZGl2PnRlc3Q8L2Rpdj4nKTsKICAgICAgICAgIH0KICAgICAgICAgIHNldFRpbWVvdXQoc2hvd09yZ0RldGFpbHMsIDEwMCk7CiAgICAgICAgICBgOwogICAgICAvLyBjYWxsYmFja3NCdWlsZGVyLnNjcmlwdFRleHRPdXRwdXRDYWxsYmFjayhzY3JpcHQpOwogICAgICAvLyBjYWxsYmFja3NCdWlsZGVyLmhpZGRlblZhbHVlQ2FsbGJhY2soJ3NlbGVjdGlvbkNoYW5nZWQnLCAnZmFsc2UnKQogICAgfSBlbHNlIHsKICAgICAgc2VsZWN0ZWRDb3VudHJ5ID0gY2FsbGJhY2tzLmdldENob2ljZUNhbGxiYWNrcygpLmdldCgwKVswXTsKICAgICAgbG9nZ2VyLmVycm9yKCdzYW5kbG9nOiBzZXQgc2VsZWN0ZWQgY291bnRyeSB7fScsIHNlbGVjdGVkQ291bnRyeSk7CiAgICAgIG5vZGVTdGF0ZS5wdXRTaGFyZWQoJ3NlbGVjdGVkQ291bnRyeScsIHNlbGVjdGVkQ291bnRyeSk7CiAgICAgIHNlbGVjdGVkU3RhdGUgPSBjYWxsYmFja3MuZ2V0Q2hvaWNlQ2FsbGJhY2tzKCkuZ2V0KDEpWzBdOwogICAgICBsb2dnZXIuZXJyb3IoJ3NhbmRsb2c6IHNldCBzZWxlY3RlZCBzdGF0ZSB7fScsIHNlbGVjdGVkU3RhdGUpOwogICAgICBub2RlU3RhdGUucHV0U2hhcmVkKCdzZWxlY3RlZFN0YXRlJywgc2VsZWN0ZWRTdGF0ZSk7CiAgICAgIGlmIChjYWxsYmFja3MuZ2V0Q29uZmlybWF0aW9uQ2FsbGJhY2tzKCkuZ2V0KDApID09IDApIHsKICAgICAgICBvdXRjb21lID0gJ3VwZGF0ZSc7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgb3V0Y29tZSA9ICdjb21wbGV0ZSc7CiAgICAgIH0KICAgIH0KICB9IGNhdGNoIChlKSB7CiAgICBsb2dnZXIuZXJyb3IoJ3NhbmRsb2c6IGVycm9yOiB7fSAnICsgZSwgZSk7CiAgICBvdXRjb21lID0gJ2Vycm9yJwogIH0KfSkoKTs=",
  },
  {
    "_id": "23143919-6b78-40c3-b25e-beca19b229e0",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Normalizes raw profile data from GitHub",
    "evaluatorVersion": "1.0",
    "language": "GROOVY",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "GitHub Profile Normalization (VS)",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjAgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLmZpZWxkCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5qc29uCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5vYmplY3QKCmxvZ2dlci53YXJuaW5nKCJHaXRIdWIgcmF3UHJvZmlsZTogIityYXdQcm9maWxlKQoKcmV0dXJuIGpzb24ob2JqZWN0KAogICAgICAgIGZpZWxkKCJpZCIsIHJhd1Byb2ZpbGUuaWQpLAogICAgICAgIGZpZWxkKCJkaXNwbGF5TmFtZSIsIHJhd1Byb2ZpbGUubmFtZSksCiAgICAgICAgZmllbGQoImdpdmVuTmFtZSIsIHJhd1Byb2ZpbGUuZmlyc3RfbmFtZSksCiAgICAgICAgZmllbGQoImZhbWlseU5hbWUiLCByYXdQcm9maWxlLmxhc3RfbmFtZSksCiAgICAgICAgZmllbGQoInBob3RvVXJsIiwgcmF3UHJvZmlsZS5waWN0dXJlLmRhdGEudXJsKSwKICAgICAgICBmaWVsZCgiZW1haWwiLCByYXdQcm9maWxlLmVtYWlsKSwKICAgICAgICBmaWVsZCgidXNlcm5hbWUiLCByYXdQcm9maWxlLmVtYWlsKSkp",
  },
  {
    "_id": "e387c5d7-ceb8-459e-87e6-d09eca512385",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "null",
    "evaluatorVersion": "1.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "resetPushBomb.js",
    "script": "dmFyIF9pZCA9IHNoYXJlZFN0YXRlLmdldCgiX2lkIik7CnZhciBhdHRyaWJ1dGUgPSAiZnItYXR0ci1zdHIyIjsKCmlkUmVwb3NpdG9yeS5zZXRBdHRyaWJ1dGUoX2lkLCBhdHRyaWJ1dGUsWyIiXSk7CgpvdXRjb21lID0gInRydWUiOw==",
  },
  {
    "_id": "248b8a56-df81-4b1b-b4ba-45d994f6504c",
    "context": "SAML2_IDP_ADAPTER",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Default global script for SAML2 IDP Adapter",
    "evaluatorVersion": "1.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "SAML2 IDP Adapter Script",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjEtMjAyMyBGb3JnZVJvY2sgQVMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQKICoKICogVXNlIG9mIHRoaXMgY29kZSByZXF1aXJlcyBhIGNvbW1lcmNpYWwgc29mdHdhcmUgbGljZW5zZSB3aXRoIEZvcmdlUm9jayBBUy4KICogb3Igd2l0aCBvbmUgb2YgaXRzIGFmZmlsaWF0ZXMuIEFsbCB1c2Ugc2hhbGwgYmUgZXhjbHVzaXZlbHkgc3ViamVjdAogKiB0byBzdWNoIGxpY2Vuc2UgYmV0d2VlbiB0aGUgbGljZW5zZWUgYW5kIEZvcmdlUm9jayBBUy4KICovCgovKgogKiBUaGUgc2NyaXB0IGhhcyB0aGVzZSB0b3AgbGV2ZWwgZnVuY3Rpb25zIHRoYXQgY291bGQgYmUgZXhlY3V0ZWQgZHVyaW5nIGEgU0FNTDIgZmxvdy4KICogICAgICAtIHByZVNpbmdsZVNpZ25PbgogKiAgICAgIC0gcHJlQXV0aGVudGljYXRpb24KICogICAgICAtIHByZVNlbmRSZXNwb25zZQogKiAgICAgIC0gcHJlU2lnblJlc3BvbnNlCiAqICAgICAgLSBwcmVTZW5kRmFpbHVyZVJlc3BvbnNlCiAqCiAqIFBsZWFzZSBzZWUgdGhlIGphdmFkb2MgZm9yIHRoZSBpbnRlcmZhY2UgZGVmaW5pdGlvbiBhbmQgbW9yZSBpbmZvcm1hdGlvbiBhYm91dCB0aGVzZSBtZXRob2RzLgogKiBodHRwczovL2JhY2tzdGFnZS5mb3JnZXJvY2suY29tL2RvY3MvYW0vNy4zL19hdHRhY2htZW50cy9hcGlkb2NzL2NvbS9zdW4vaWRlbnRpdHkvc2FtbDIvcGx1Z2lucy9TQU1MMklkZW50aXR5UHJvdmlkZXJBZGFwdGVyLmh0bWwKICogTm90ZSB0aGF0IHRoZSBpbml0aWFsaXplIG1ldGhvZCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoZSBzY3JpcHRzLgogKgogKiBEZWZpbmVkIHZhcmlhYmxlcy4gQ2hlY2sgdGhlIGRvY3VtZW50YXRpb24gb24gdGhlIHJlc3BlY3RpdmUgZnVuY3Rpb25zIGZvciB0aGUgdmFyaWFibGVzIGF2YWlsYWJsZSB0byBpdC4KICoKICogaG9zdGVkRW50aXR5SWQgLSBTdHJpbmcKICogICAgIEVudGl0eSBJRCBmb3IgdGhlIGhvc3RlZCBJRFAKICogcmVhbG0gLSBTdHJpbmcKICogICAgIFJlYWxtIG9mIHRoZSBob3N0ZWQgSURQCiAqIGlkcEFkYXB0ZXJTY3JpcHRIZWxwZXIgLSBJZHBBZGFwdGVyU2NyaXB0SGVscGVyICgxKQogKiAgICAgQW4gaW5zdGFuY2Ugb2YgSWRwQWRhcHRlclNjcmlwdEhlbHBlciBjb250YWluaW5nIGhlbHBlciBtZXRob2RzLiBTZWUgSmF2YWRvYyBmb3IgbW9yZSBkZXRhaWxzLgogKiByZXF1ZXN0IC0gSHR0cFNlcnZsZXRSZXF1ZXN0ICgyKQogKiAgICAgU2VydmxldCByZXF1ZXN0IG9iamVjdAogKiByZXNwb25zZSAtIEh0dHBTZXJ2bGV0UmVzcG9uc2UgKDMpCiAqICAgICBTZXJ2bGV0IHJlc3BvbnNlIG9iamVjdAogKiBhdXRoblJlcXVlc3QgLSBBdXRoblJlcXVlc3QgKDQpCiAqICAgICBUaGUgb3JpZ2luYWwgYXV0aGVudGljYXRpb24gcmVxdWVzdCBzZW50IGZyb20gU1AKICogcmVxSWQgLSBTdHJpbmcKICogICAgIFRoZSBpZCB0byB1c2UgZm9yIGNvbnRpbnVhdGlvbiBvZiBwcm9jZXNzaW5nIGlmIHRoZSBhZGFwdGVyIHJlZGlyZWN0cwogKiByZXMgLSBSZXNwb25zZSAoNSkKICogICAgIFRoZSBTQU1MIFJlc3BvbnNlCiAqIHNlc3Npb24gLSBTU09Ub2tlbiAoNikKICogICAgIFRoZSBzaW5nbGUgc2lnbi1vbiBzZXNzaW9uLiBUaGUgcmVmZXJlbmNlIHR5cGUgb2YgdGhpcyBpcyBPYmplY3QgYW5kIHdvdWxkIG5lZWQgdG8gYmUgY2FzdGVkIHRvIFNTT1Rva2VuLgogKiByZWxheVN0YXRlIC0gU3RyaW5nCiAqICAgICBUaGUgcmVsYXlTdGF0ZSB0aGF0IHdpbGwgYmUgdXNlZCBpbiB0aGUgcmVkaXJlY3QKICogZmF1bHRDb2RlIC0gU3RyaW5nCiAqICAgICB0aGUgZmF1bHQgY29kZSB0aGF0IHdpbGwgYmUgcmV0dXJuZWQgaW4gdGhlIFNBTUwgcmVzcG9uc2UKICogZmF1bHREZXRhaWwgLSBTdHJpbmcKICogICAgIHRoZSBmYXVsdCBkZXRhaWwgdGhhdCB3aWxsIGJlIHJldHVybmVkIGluIHRoZSBTQU1MIHJlc3BvbnNlCiAqIGxvZ2dlciAtIExvZ2dlciBpbnN0YW5jZQogKiAgICAgaHR0cHM6Ly9iYWNrc3RhZ2UuZm9yZ2Vyb2NrLmNvbS9kb2NzL2FtLzcuMy9zY3JpcHRpbmctZ3VpZGUvc2NyaXB0aW5nLWFwaS1nbG9iYWwtbG9nZ2VyLmh0bWwuCiAqICAgICBDb3JyZXNwb25kaW5nIGxvZyBmaWxlcyB3aWxsIGJlIHByZWZpeGVkIHdpdGg6IHNjcmlwdHMuPHNjcmlwdCBuYW1lPgogKgogKiBUaHJvd3MgU0FNTDJFeGNlcHRpb24gKDcpOgogKiAgICAgZm9yIGFueSBleGNlcHRpb25zIG9jY3VycmluZyBpbiB0aGUgYWRhcHRlci4gVGhlIGZlZGVyYXRpb24gcHJvY2VzcyB3aWxsIGNvbnRpbnVlCiAqCiAqIENsYXNzIHJlZmVyZW5jZToKICogKDEpIGlkcEFkYXB0ZXJTY3JpcHRIZWxwZXIgLSBodHRwczovL2JhY2tzdGFnZS5mb3JnZXJvY2suY29tL2RvY3MvYW0vNy4zL19hdHRhY2htZW50cy9hcGlkb2NzL2NvbS9zdW4vaWRlbnRpdHkvc2FtbDIvcGx1Z2lucy9zY3JpcHRlZC9JZHBBZGFwdGVyU2NyaXB0SGVscGVyLmh0bWwuCiAqICgyKSBIdHRwU2VydmxldFJlcXVlc3QgLSBodHRwczovL3RvbWNhdC5hcGFjaGUub3JnL3RvbWNhdC03LjAtZG9jL3NlcnZsZXRhcGkvamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVxdWVzdC5odG1sLgogKiAoMykgSHR0cFNlcnZsZXRSZXNwb25zZSAtIGh0dHBzOi8vdG9tY2F0LmFwYWNoZS5vcmcvdG9tY2F0LTcuMC1kb2Mvc2VydmxldGFwaS9qYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXNwb25zZS5odG1sLgogKiAoNCkgQXV0aG5SZXF1ZXN0IC0gaHR0cHM6Ly9iYWNrc3RhZ2UuZm9yZ2Vyb2NrLmNvbS9kb2NzL2FtLzcuMy9fYXR0YWNobWVudHMvYXBpZG9jcy9jb20vc3VuL2lkZW50aXR5L3NhbWwyL3Byb3RvY29sL0F1dGhuUmVxdWVzdC5odG1sLgogKiAoNSkgUmVzcG9uc2UgLSBodHRwczovL2JhY2tzdGFnZS5mb3JnZXJvY2suY29tL2RvY3MvYW0vNy4zL19hdHRhY2htZW50cy9hcGlkb2NzL2NvbS9zdW4vaWRlbnRpdHkvc2FtbDIvcHJvdG9jb2wvUmVzcG9uc2UuaHRtbC4KICogKDYpIFNTT1Rva2VuIC0gaHR0cHM6Ly9iYWNrc3RhZ2UuZm9yZ2Vyb2NrLmNvbS9kb2NzL2FtLzcuMy9fYXR0YWNobWVudHMvYXBpZG9jcy9jb20vaXBsYW5ldC9zc28vU1NPVG9rZW4uaHRtbC4KICogKDcpIFNBTUwyRXhjZXB0aW9uIC0gaHR0cHM6Ly9iYWNrc3RhZ2UuZm9yZ2Vyb2NrLmNvbS9kb2NzL2FtLzcuMy9fYXR0YWNobWVudHMvYXBpZG9jcy9jb20vc3VuL2lkZW50aXR5L3NhbWwyL2NvbW1vbi9TQU1MMkV4Y2VwdGlvbi5odG1sLgogKi8KCi8qCiAqIFRlbXBsYXRlL2RlZmF1bHQgc2NyaXB0IGZvciBTQU1MMiBJRFAgQWRhcHRlciBzY3JpcHRlZCBwbHVnaW4uCiAqLwoKLyoKICogQXZhaWxhYmxlIHZhcmlhYmxlcyBmb3IgcHJlU2luZ2xlU2lnbk9uOgogKiAgICAgaG9zdGVkRW50aXR5SWQKICogICAgIHJlYWxtCiAqICAgICBpZHBBZGFwdGVyU2NyaXB0SGVscGVyCiAqICAgICByZXF1ZXN0CiAqICAgICBhdXRoblJlcXVlc3QKICogICAgIHJlc3BvbnNlCiAqICAgICByZXFJZAogKiAgICAgbG9nZ2VyCiAqCiAqIFJldHVybiAtIHRydWUgaWYgYnJvd3NlciByZWRpcmVjdGlvbiBpcyBoYXBwZW5pbmcgYWZ0ZXIgcHJvY2Vzc2luZywgZmFsc2Ugb3RoZXJ3aXNlLiBEZWZhdWx0IHRvIGZhbHNlLgogKi8KZnVuY3Rpb24gcHJlU2luZ2xlU2lnbk9uICgpIHsKICAgIHJldHVybiBmYWxzZTsKfQoKLyoKICogQXZhaWxhYmxlIHZhcmlhYmxlcyBmb3IgcHJlQXV0aGVudGljYXRpb246CiAqICAgICBob3N0ZWRFbnRpdHlJZAogKiAgICAgcmVhbG0KICogICAgIGlkcEFkYXB0ZXJTY3JpcHRIZWxwZXIKICogICAgIHJlcXVlc3QKICogICAgIGF1dGhuUmVxdWVzdAogKiAgICAgcmVzcG9uc2UKICogICAgIHJlcUlkCiAqICAgICBzZXNzaW9uCiAqICAgICByZWxheVN0YXRlCiAqICAgICBsb2dnZXIKICoKICogUmV0dXJuIC0gdHJ1ZSBpZiBicm93c2VyIHJlZGlyZWN0aW9uIGlzIGhhcHBlbmluZyBhZnRlciBwcm9jZXNzaW5nLCBmYWxzZSBvdGhlcndpc2UuIERlZmF1bHQgdG8gZmFsc2UuCiAqLwpmdW5jdGlvbiBwcmVBdXRoZW50aWNhdGlvbiAoKSB7CiAgICByZXR1cm4gZmFsc2U7Cn0KCi8qCiAqIEF2YWlsYWJsZSB2YXJpYWJsZXMgZm9yIHByZVNlbmRSZXNwb25zZToKICogICAgIGhvc3RlZEVudGl0eUlkCiAqICAgICByZWFsbQogKiAgICAgaWRwQWRhcHRlclNjcmlwdEhlbHBlcgogKiAgICAgcmVxdWVzdAogKiAgICAgYXV0aG5SZXF1ZXN0CiAqICAgICByZXNwb25zZQogKiAgICAgcmVxSWQKICogICAgIHNlc3Npb24KICogICAgIHJlbGF5U3RhdGUKICogICAgIGxvZ2dlcgogKgogKiBSZXR1cm4gLSB0cnVlIGlmIGJyb3dzZXIgcmVkaXJlY3Rpb24gaGFwcGVuZWQgYWZ0ZXIgcHJvY2Vzc2luZywgZmFsc2Ugb3RoZXJ3aXNlLiBEZWZhdWx0IHRvIGZhbHNlLgogKi8KZnVuY3Rpb24gcHJlU2VuZFJlc3BvbnNlICgpIHsKICAgIHJldHVybiBmYWxzZTsKfQoKLyoKICogQXZhaWxhYmxlIHZhcmlhYmxlcyBmb3IgcHJlU2lnblJlc3BvbnNlOgogKiAgICAgaG9zdGVkRW50aXR5SWQKICogICAgIHJlYWxtCiAqICAgICBpZHBBZGFwdGVyU2NyaXB0SGVscGVyCiAqICAgICByZXF1ZXN0CiAqICAgICBhdXRoblJlcXVlc3QKICogICAgIHNlc3Npb24KICogICAgIHJlbGF5U3RhdGUKICogICAgIHJlcwogKiAgICAgbG9nZ2VyCiAqLwpmdW5jdGlvbiBwcmVTaWduUmVzcG9uc2UgKCkgewp9CgovKgogKiBBdmFpbGFibGUgdmFyaWFibGVzIGZvciBwcmVTZW5kRmFpbHVyZVJlc3BvbnNlOgogKiAgICAgaG9zdGVkRW50aXR5SWQKICogICAgIHJlYWxtCiAqICAgICBpZHBBZGFwdGVyU2NyaXB0SGVscGVyCiAqICAgICByZXF1ZXN0CiAqICAgICByZXNwb25zZQogKiAgICAgZmF1bHRDb2RlCiAqICAgICBmYXVsdERldGFpbAogKiAgICAgbG9nZ2VyCiAqLwpmdW5jdGlvbiBwcmVTZW5kRmFpbHVyZVJlc3BvbnNlICgpIHsKfQ==",
  },
  {
    "_id": "484e6246-dbc6-4288-97e6-54e55431402e",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Normalizes raw profile data from Apple",
    "evaluatorVersion": "1.0",
    "language": "GROOVY",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Apple Profile Normalization",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjEtMjAyMiBGb3JnZVJvY2sgQVMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQKICoKICogVXNlIG9mIHRoaXMgY29kZSByZXF1aXJlcyBhIGNvbW1lcmNpYWwgc29mdHdhcmUgbGljZW5zZSB3aXRoIEZvcmdlUm9jayBBUy4KICogb3Igd2l0aCBvbmUgb2YgaXRzIGFmZmlsaWF0ZXMuIEFsbCB1c2Ugc2hhbGwgYmUgZXhjbHVzaXZlbHkgc3ViamVjdAogKiB0byBzdWNoIGxpY2Vuc2UgYmV0d2VlbiB0aGUgbGljZW5zZWUgYW5kIEZvcmdlUm9jayBBUy4KICoKICogSW4gc29tZSBjb21tb24gZGVmYXVsdCBjb25maWd1cmF0aW9ucywgdGhlIGZvbGxvd2luZyBrZXlzIGFyZSByZXF1aXJlZCB0byBiZSBub3QgZW1wdHk6CiAqIHVzZXJuYW1lLCBnaXZlbk5hbWUsIGZhbWlseU5hbWUsIGVtYWlsLgogKgogKiBGcm9tIFJGQzQ1MTc6IEEgdmFsdWUgb2YgdGhlIERpcmVjdG9yeSBTdHJpbmcgc3ludGF4IGlzIGEgc3RyaW5nIG9mIG9uZSBvciBtb3JlCiAqIGFyYml0cmFyeSBjaGFyYWN0ZXJzIGZyb20gdGhlIFVuaXZlcnNhbCBDaGFyYWN0ZXIgU2V0IChVQ1MpLgogKiBBIHplcm8tbGVuZ3RoIGNoYXJhY3RlciBzdHJpbmcgaXMgbm90IHBlcm1pdHRlZC4KICovCgppbXBvcnQgc3RhdGljIG9yZy5mb3JnZXJvY2suanNvbi5Kc29uVmFsdWUuZmllbGQKaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLmpzb24KaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLm9iamVjdAoKU3RyaW5nIGVtYWlsID0gImNoYW5nZUBtZS5jb20iClN0cmluZyBzdWJqZWN0SWQgPSByYXdQcm9maWxlLnN1YgpTdHJpbmcgZmlyc3ROYW1lID0gIiAiClN0cmluZyBsYXN0TmFtZSA9ICIgIgpTdHJpbmcgdXNlcm5hbWUgPSBzdWJqZWN0SWQKU3RyaW5nIG5hbWUKCmlmIChyYXdQcm9maWxlLmlzRGVmaW5lZCgiZW1haWwiKSAmJiByYXdQcm9maWxlLmVtYWlsLmlzTm90TnVsbCgpKXsgLy8gVXNlciBjYW4gZWxlY3QgdG8gbm90IHNoYXJlIHRoZWlyIGVtYWlsCiAgICBlbWFpbCA9IHJhd1Byb2ZpbGUuZW1haWwuYXNTdHJpbmcoKQogICAgdXNlcm5hbWUgPSBlbWFpbAp9CmlmIChyYXdQcm9maWxlLmlzRGVmaW5lZCgibmFtZSIpICYmIHJhd1Byb2ZpbGUubmFtZS5pc05vdE51bGwoKSkgewogICAgaWYgKHJhd1Byb2ZpbGUubmFtZS5pc0RlZmluZWQoImZpcnN0TmFtZSIpICYmIHJhd1Byb2ZpbGUubmFtZS5maXJzdE5hbWUuaXNOb3ROdWxsKCkpIHsKICAgICAgICBmaXJzdE5hbWUgPSByYXdQcm9maWxlLm5hbWUuZmlyc3ROYW1lLmFzU3RyaW5nKCkKICAgIH0KICAgIGlmIChyYXdQcm9maWxlLm5hbWUuaXNEZWZpbmVkKCJsYXN0TmFtZSIpICYmIHJhd1Byb2ZpbGUubmFtZS5sYXN0TmFtZS5pc05vdE51bGwoKSkgewogICAgICAgIGxhc3ROYW1lID0gcmF3UHJvZmlsZS5uYW1lLmxhc3ROYW1lLmFzU3RyaW5nKCkKICAgIH0KfQoKbmFtZSA9IChmaXJzdE5hbWU/LnRyaW0oKSA/IGZpcnN0TmFtZSA6ICIiKSArIChsYXN0TmFtZT8udHJpbSgpID8gKChmaXJzdE5hbWU/LnRyaW0oKSA/ICIgIiA6ICIiKSArIGxhc3ROYW1lKSA6ICIiKQpuYW1lID0gICghbmFtZT8udHJpbSgpKSA/ICIgIiA6IG5hbWUKCnJldHVybiBqc29uKG9iamVjdCgKICAgICAgICBmaWVsZCgiaWQiLCBzdWJqZWN0SWQpLAogICAgICAgIGZpZWxkKCJkaXNwbGF5TmFtZSIsIG5hbWUpLAogICAgICAgIGZpZWxkKCJlbWFpbCIsIGVtYWlsKSwKICAgICAgICBmaWVsZCgiZ2l2ZW5OYW1lIiwgZmlyc3ROYW1lKSwKICAgICAgICBmaWVsZCgiZmFtaWx5TmFtZSIsIGxhc3ROYW1lKSwKICAgICAgICBmaWVsZCgidXNlcm5hbWUiLCB1c2VybmFtZSkpKQ==",
  },
  {
    "_id": "3c9d3b4a-b38c-4c77-a8d7-4b937e48f62f",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "null",
    "evaluatorVersion": "1.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "selectFavFactor.js",
    "script": "Ly8gRGlzcGxheXMgTUZBIG9wdGlvbnMgZmlsdGVyZWQgYnkgdXNlcnMgcHJlZmVyZW5jZXMKdmFyIHdlYmF1dGhuRGV2aWNlUHJvZmlsZXMgPSBpZFJlcG9zaXRvcnkuZ2V0QXR0cmlidXRlKHNoYXJlZFN0YXRlLmdldCgiX2lkIiksICJ3ZWJhdXRobkRldmljZVByb2ZpbGVzIikudG9TdHJpbmcoKTsKdmFyIHB1c2hEZXZpY2VQcm9maWxlcyA9IGlkUmVwb3NpdG9yeS5nZXRBdHRyaWJ1dGUoc2hhcmVkU3RhdGUuZ2V0KCJfaWQiKSwgInB1c2hEZXZpY2VQcm9maWxlcyIpLnRvU3RyaW5nKCk7Cgp2YXIgaGFzV2ViQXV0aE49ZmFsc2U7CnZhciBoYXNQdXNoPWZhbHNlOwoKaWYod2ViYXV0aG5EZXZpY2VQcm9maWxlcy5sZW5ndGg+MikgewogICAgaGFzV2ViQXV0aE4gPSB0cnVlOwp9CmlmKHB1c2hEZXZpY2VQcm9maWxlcy5sZW5ndGg+MikgewogICAgaGFzUHVzaCA9IHRydWU7Cn0KCgptZmFzID0geyAKICAgICAgICAgICJQdXNoIjogIlB1c2ggbm90aWZpY2F0aW9uIHZpYSBhdXRoZW50aWNhdG9yIGFwcCIsIAogICAgICAgICAiV2ViQXV0aE4iOiAiU2VjdXJpdHkgS2V5L1RvdWNoSUQvV2luZG93c0hlbGxvL1Bhc3NLZXkiLCAKICAgICAgICAgICAvLyJRUiIgOiAiUVIgQ29kZSBDYXNjYWRlZCBDb250ZXh0IChXZWJBdXRoTikiLAogICAgICAgICAgICJTTVMiIDogIlNNUyBDYXNjYWRlZCBDb250ZXh0IChXZWJBdXRoTikiLAogICAgICAgICAgLy8iRW1haWwiIDogIkUtbWFpbCBDYXNjYWRlZCBDb250ZXh0IChXZWJBdXRoTikiLAogICAgICAgICAgLy8gIlNNU01MIiA6ICJTTVMgTWFnaWMgTGluayIKICAgICAgIH07CgoKdmFyIGZyID0gSmF2YUltcG9ydGVyKAogICAgICBvcmcuZm9yZ2Vyb2NrLm9wZW5hbS5hdXRoLm5vZGUuYXBpLkFjdGlvbiwKICAgICAgamF2YXguc2VjdXJpdHkuYXV0aC5jYWxsYmFjay5UZXh0T3V0cHV0Q2FsbGJhY2ssCiAgICAgIGphdmF4LnNlY3VyaXR5LmF1dGguY2FsbGJhY2suQ2hvaWNlQ2FsbGJhY2sKKQoKdmFyIHVzZXJuYW1lID0gc2hhcmVkU3RhdGUuZ2V0KCJfaWQiKTsKCi8vIEFkZCBlbnRyeSB0byBtdWx0aSB2YWx1ZQp2YXIgY2hvaWNlcyA9IFtdOwppZihoYXNQdXNoPT10cnVlKXsKICAgICAgY2hvaWNlcy5wdXNoKG1mYXMuUHVzaCk7Cn0KaWYoaGFzV2ViQXV0aE49PXRydWUpewogICAgICBjaG9pY2VzLnB1c2gobWZhcy5XZWJBdXRoTik7CiAgICAgIC8vY2hvaWNlcy5wdXNoKG1mYXMuUVIpOwogICAgICAvL2Nob2ljZXMucHVzaChtZmFzLlNNUyk7CiAgICAvL2Nob2ljZXMucHVzaChtZmFzLkVtYWlsKTsKCn0KLy9jaG9pY2VzLnB1c2gobWZhcy5TTVNNTCk7CmZ1bmN0aW9uIHNldEN1c3RvbUF0dHJWYWx1ZSAoY3VzdG9tQXR0ck5hbWUsY3VzdG9tQXR0clZhbHVlKQp7CiAgdmFyIGlkID0gc2hhcmVkU3RhdGUuZ2V0KCdfaWQnKTsKICB2YXIgZnJJZG1DdXN0b21BdHRyaWJ1dGVzID0gaWRSZXBvc2l0b3J5LmdldEF0dHJpYnV0ZShpZCwgJ2ZyLWlkbS1jdXN0b20tYXR0cnMnKTsKICBpZiAoZnJJZG1DdXN0b21BdHRyaWJ1dGVzKQogIHsKICAgIHZhciBmcklkbUN1c3RvbUF0dHJpYnV0ZXNPYmplY3QgPSBKU09OLnBhcnNlKFN0cmluZyhmcklkbUN1c3RvbUF0dHJpYnV0ZXMudG9BcnJheSgpWzBdKSk7CiAgICBmcklkbUN1c3RvbUF0dHJpYnV0ZXNPYmplY3RbY3VzdG9tQXR0ck5hbWVdID0gY3VzdG9tQXR0clZhbHVlOwogICAgdmFyIGpzb25fc3RyaW5nID0gSlNPTi5zdHJpbmdpZnkoZnJJZG1DdXN0b21BdHRyaWJ1dGVzT2JqZWN0KTsKICAgIGlkUmVwb3NpdG9yeS5zZXRBdHRyaWJ1dGUoaWQsICJmci1pZG0tY3VzdG9tLWF0dHJzIixbanNvbl9zdHJpbmddKTsKICB9Cn0KCgovL0NhbGxiYWNrIHRvIHByZXNlbnQgYW5kIHJldHJpZXZlIHNlbGVjdGVkIG9yZyBhbmQgc2V0Ci8vc2VsZWN0ZWQgdGhlbWUgZm9yIHNldHRpbmcgaW4gdGhlIG5leHQgbm9kZQoKCgp3aXRoIChmcikgewogICAgICBpZiAoY2hvaWNlcy5sZW5ndGggPCAyKSBhY3Rpb24gPSBBY3Rpb24uZ29UbyhvdXRjb21lKS5idWlsZCgpOwogICAgZWxzZSB7CiAgICAgICAgIGlmIChjYWxsYmFja3MuaXNFbXB0eSgpKSB7CiAgICAgICAgICAgICAgYWN0aW9uID0gZnIuQWN0aW9uLnNlbmQoCiAgICAgICAgICAgICAgICBuZXcgZnIuQ2hvaWNlQ2FsbGJhY2soCiAgICAgICAgICAgICAgICAgICAgICAiU3Ryb25nIEF1dGhlbnRpY2F0aW9uIFJlcXVpcmVkLiBQbGVhc2Ugc2VsZWN0IHlvdXIgcHJlZmVycmVkIGZvcm0gb2Ygc3Ryb25nIGF1dGhlbnRpY2F0aW9uIGZyb20gdGhlIGxpc3QgYmVsb3cuIiwKICAgICAgICAgICAgICAgICAgY2hvaWNlcywKICAgICAgICAgICAgICAgICAgMCwKICAgICAgICAgICAgICAgICAgZmFsc2UKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICApLndpdGhTdGFnZShKU09OLnN0cmluZ2lmeSh7ICJDaG9pY2VDYWxsYmFjayI6IFsgeyAiZGlzcGxheVR5cGUiOiJyYWRpbyIgfSBdIH0pKS53aXRoSGVhZGVyKCJDaG9vc2UgTWV0aG9kIikuYnVpbGQoKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHZhciBzZWxlY3RlZEluZGV4ID0gY2FsbGJhY2tzLmdldCgwKS5nZXRTZWxlY3RlZEluZGV4ZXMoKVswXTsKICAgICAgICAgICAgdmFyIHNlbGVjdGVkTmFtZTsKICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIG1mYXMpIGlmIChjaG9pY2VzW3NlbGVjdGVkSW5kZXhdID09IG1mYXNba2V5XSkgc2VsZWN0ZWROYW1lID0ga2V5OwogICAgICAgICAgICBzaGFyZWRTdGF0ZS5wdXQoInNlbGVjdGVkTmFtZSIsIHNlbGVjdGVkTmFtZSk7CiAgICAgICAgICAgICAgc2V0Q3VzdG9tQXR0clZhbHVlICgiY3VzdG9tX2Zhdm91cml0ZUZhY3RvciIsc2VsZWN0ZWROYW1lKTsKICAgICAgICAgICAgYWN0aW9uID0gQWN0aW9uLmdvVG8oc2VsZWN0ZWROYW1lKS5idWlsZCgpOwogICAgICAgIH0gICAKICAgIH0KfQ==",
  },
  {
    "_id": "7e3d7067-d50f-4674-8c76-a3e13a810c33",
    "context": "AUTHENTICATION_SERVER_SIDE",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Default global script for server side Scripted Authentication Module",
    "evaluatorVersion": "1.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Scripted Module - Server Side",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMTUtMjAyMyBGb3JnZVJvY2sgQVMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQKICoKICogVXNlIG9mIHRoaXMgY29kZSByZXF1aXJlcyBhIGNvbW1lcmNpYWwgc29mdHdhcmUgbGljZW5zZSB3aXRoIEZvcmdlUm9jayBBUy4KICogb3Igd2l0aCBvbmUgb2YgaXRzIGFmZmlsaWF0ZXMuIEFsbCB1c2Ugc2hhbGwgYmUgZXhjbHVzaXZlbHkgc3ViamVjdAogKiB0byBzdWNoIGxpY2Vuc2UgYmV0d2VlbiB0aGUgbGljZW5zZWUgYW5kIEZvcmdlUm9jayBBUy4KICovCgp2YXIgU1RBUlRfVElNRSA9IDk7ICAvLyA5YW0KdmFyIEVORF9USU1FICAgPSAxNzsgLy8gNXBtCnZhciBsb25naXR1ZGUsIGxhdGl0dWRlOwp2YXIgbG9jYWxUaW1lOwoKbG9nZ2VyLm1lc3NhZ2UoIlN0YXJ0aW5nIHNjcmlwdGVkIGF1dGhlbnRpY2F0aW9uIik7CmxvZ2dlci5tZXNzYWdlKCJVc2VyOiAiICsgdXNlcm5hbWUpOwoKdmFyIHVzZXJQb3N0YWxBZGRyZXNzID0gZ2V0VXNlclBvc3RhbEFkZHJlc3MoKTsKbG9nZ2VyLm1lc3NhZ2UoIlVzZXIgYWRkcmVzczogIiArIHVzZXJQb3N0YWxBZGRyZXNzKTsKCmdldExvbmdpdHVkZUxhdGl0dWRlRnJvbVVzZXJQb3N0YWxBZGRyZXNzKCk7CmdldExvY2FsVGltZSgpOwoKbG9nZ2VyLm1lc3NhZ2UoIkN1cnJlbnQgdGltZSBhdCB0aGUgdXNlcnMgbG9jYXRpb246ICIgKyBsb2NhbFRpbWUuZ2V0SG91cnMoKSk7CmlmIChsb2NhbFRpbWUuZ2V0SG91cnMoKSA8IFNUQVJUX1RJTUUgfHwgbG9jYWxUaW1lLmdldEhvdXJzKCkgPiBFTkRfVElNRSkgewogICAgbG9nZ2VyLmVycm9yKCJMb2dpbiBmb3JiaWRkZW4gb3V0c2lkZSB3b3JrIGhvdXJzISIpOwogICAgYXV0aFN0YXRlID0gRkFJTEVEOwp9IGVsc2UgewogICAgbG9nZ2VyLm1lc3NhZ2UoIkF1dGhlbnRpY2F0aW9uIGFsbG93ZWQhIik7CiAgICBhdXRoU3RhdGUgPSBTVUNDRVNTOwp9CgpmdW5jdGlvbiBnZXRMb25naXR1ZGVMYXRpdHVkZUZyb21Vc2VyUG9zdGFsQWRkcmVzcygpIHsKCiAgICB2YXIgcmVxdWVzdCA9IG5ldyBvcmcuZm9yZ2Vyb2NrLmh0dHAucHJvdG9jb2wuUmVxdWVzdCgpOwogICAgcmVxdWVzdC5zZXRVcmkoImh0dHA6Ly9tYXBzLmdvb2dsZWFwaXMuY29tL21hcHMvYXBpL2dlb2NvZGUvanNvbj9hZGRyZXNzPSIgKyBlbmNvZGVVUklDb21wb25lbnQodXNlclBvc3RhbEFkZHJlc3MpKTsKICAgICAgcmVxdWVzdC5zZXRNZXRob2QoIkdFVCIpOwogICAgICAvL3RoZSBhYm92ZSBVUkkgaGFzIHRvIGJlIGV4dGVuZGVkIHdpdGggYW4gQVBJX0tFWSBpZiB1c2VkIGluIGEgZnJlcXVlbnQgbWFubmVyCiAgICAgIC8vc2VlIGRvY3VtZW50YXRpb246IGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL21hcHMvZG9jdW1lbnRhdGlvbi9nZW9jb2RpbmcvaW50cm8KCiAgICB2YXIgcmVzcG9uc2UgPSBodHRwQ2xpZW50LnNlbmQocmVxdWVzdCkuZ2V0KCk7CiAgICBsb2dSZXNwb25zZShyZXNwb25zZSk7CgogICAgdmFyIGdlb2NvZGUgPSBKU09OLnBhcnNlKHJlc3BvbnNlLmdldEVudGl0eSgpLmdldFN0cmluZygpKTsKICAgIHZhciBpOwogICAgZm9yIChpID0gMDsgaSA8IGdlb2NvZGUucmVzdWx0cy5sZW5ndGg7IGkrKykgewogICAgICAgIHZhciByZXN1bHQgPSBnZW9jb2RlLnJlc3VsdHNbaV07CiAgICAgICAgbGF0aXR1ZGUgPSByZXN1bHQuZ2VvbWV0cnkubG9jYXRpb24ubGF0OwogICAgICAgIGxvbmdpdHVkZSA9IHJlc3VsdC5nZW9tZXRyeS5sb2NhdGlvbi5sbmc7CgogICAgICAgICAgIGxvZ2dlci5tZXNzYWdlKCJsYXRpdHVkZToiICsgbGF0aXR1ZGUgKyAiIGxvbmdpdHVkZToiICsgbG9uZ2l0dWRlKTsKICAgIH0KfQoKZnVuY3Rpb24gZ2V0TG9jYWxUaW1lKCkgewoKICAgIHZhciBub3cgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSAvIDEwMDA7CiAgICB2YXIgbG9jYXRpb24gPSAibG9jYXRpb249IiArIGxhdGl0dWRlICsgIiwiICsgbG9uZ2l0dWRlOwogICAgdmFyIHRpbWVzdGFtcCA9ICJ0aW1lc3RhbXA9IiArIG5vdzsKCiAgICB2YXIgcmVxdWVzdCA9IG5ldyBvcmcuZm9yZ2Vyb2NrLmh0dHAucHJvdG9jb2wuUmVxdWVzdCgpOwogICAgcmVxdWVzdC5zZXRVcmkoImh0dHBzOi8vbWFwcy5nb29nbGVhcGlzLmNvbS9tYXBzL2FwaS90aW1lem9uZS9qc29uPyIgKyBsb2NhdGlvbiArICImIiArIHRpbWVzdGFtcCk7CiAgICAgIHJlcXVlc3Quc2V0TWV0aG9kKCJHRVQiKTsKICAgICAgLy90aGUgYWJvdmUgVVJJIGhhcyB0byBiZSBleHRlbmRlZCB3aXRoIGFuIEFQSV9LRVkgaWYgdXNlZCBpbiBhIGZyZXF1ZW50IG1hbm5lcgogICAgICAvL3NlZSBkb2N1bWVudGF0aW9uOiBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS9tYXBzL2RvY3VtZW50YXRpb24vdGltZXpvbmUvaW50cm8KCiAgICB2YXIgcmVzcG9uc2UgPSBodHRwQ2xpZW50LnNlbmQocmVxdWVzdCkuZ2V0KCk7CiAgICBsb2dSZXNwb25zZShyZXNwb25zZSk7CgogICAgdmFyIHRpbWV6b25lID0gSlNPTi5wYXJzZShyZXNwb25zZS5nZXRFbnRpdHkoKS5nZXRTdHJpbmcoKSk7CiAgICB2YXIgbG9jYWxUaW1lc3RhbXAgPSBwYXJzZUludChub3cpICsgcGFyc2VJbnQodGltZXpvbmUuZHN0T2Zmc2V0KSArIHBhcnNlSW50KHRpbWV6b25lLnJhd09mZnNldCk7CiAgICBsb2NhbFRpbWUgPSBuZXcgRGF0ZShsb2NhbFRpbWVzdGFtcCoxMDAwKTsKfQoKZnVuY3Rpb24gZ2V0VXNlclBvc3RhbEFkZHJlc3MoKSB7CiAgICB2YXIgdXNlckFkZHJlc3NTZXQgPSBpZFJlcG9zaXRvcnkuZ2V0QXR0cmlidXRlKHVzZXJuYW1lLCAicG9zdGFsQWRkcmVzcyIpOwogICAgaWYgKHVzZXJBZGRyZXNzU2V0ID09IG51bGwgfHwgdXNlckFkZHJlc3NTZXQuaXNFbXB0eSgpKSB7CiAgICAgICAgbG9nZ2VyLndhcm5pbmcoIk5vIGFkZHJlc3Mgc3BlY2lmaWVkIGZvciB1c2VyOiAiICsgdXNlcm5hbWUpOwogICAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICAgIHJldHVybiB1c2VyQWRkcmVzc1NldC5pdGVyYXRvcigpLm5leHQoKQp9CgpmdW5jdGlvbiBsb2dSZXNwb25zZShyZXNwb25zZSkgewogICAgbG9nZ2VyLm1lc3NhZ2UoIlVzZXIgUkVTVCBDYWxsLiBTdGF0dXM6ICIgKyByZXNwb25zZS5nZXRTdGF0dXMoKSArICIsIEJvZHk6ICIgKyByZXNwb25zZS5nZXRFbnRpdHkoKS5nZXRTdHJpbmcoKSk7Cn0K",
  },
  {
    "_id": "3b7c5bbe-5a80-4ba1-8918-6a3e2ef891c4",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Check if a valid session already exists",
    "evaluatorVersion": "1.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "CheckIfValidSession",
    "script": "aWYgKHR5cGVvZiBleGlzdGluZ1Nlc3Npb24gIT09ICd1bmRlZmluZWQnKQp7CiAgb3V0Y29tZSA9ICJoYXNTZXNzaW9uIjsKfQplbHNlCnsKICBvdXRjb21lID0gIm5vU2Vzc2lvbiI7Cn0=",
  },
  {
    "_id": "c9cb4b1e-1cd3-4e5b-8f56-140f83ba9f6d",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Check if username has already been collected.",
    "evaluatorVersion": "1.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "FrodoTestScript1",
    "script": "LyogQ2hlY2sgVXNlcm5hbWUKICoKICogQXV0aG9yOiB2b2xrZXIuc2NoZXViZXJAZm9yZ2Vyb2NrLmNvbQogKiAKICogQ2hlY2sgaWYgdXNlcm5hbWUgaGFzIGFscmVhZHkgYmVlbiBjb2xsZWN0ZWQuCiAqIFJldHVybiAia25vd24iIGlmIHllcywgInVua25vd24iIG90aGVyd2lzZS4KICogCiAqIFRoaXMgc2NyaXB0IGRvZXMgbm90IG5lZWQgdG8gYmUgcGFyYW1ldHJpemVkLiBJdCB3aWxsIHdvcmsgcHJvcGVybHkgYXMgaXMuCiAqIAogKiBUaGUgU2NyaXB0ZWQgRGVjaXNpb24gTm9kZSBuZWVkcyB0aGUgZm9sbG93aW5nIG91dGNvbWVzIGRlZmluZWQ6CiAqIC0ga25vd24KICogLSB1bmtub3duCiAqLwooZnVuY3Rpb24gKCkgewogICAgaWYgKG51bGwgIT0gc2hhcmVkU3RhdGUuZ2V0KCJ1c2VybmFtZSIpKSB7CiAgICAgICAgb3V0Y29tZSA9ICJrbm93biI7CiAgICB9CiAgICBlbHNlIHsKICAgICAgICBvdXRjb21lID0gInVua25vd24iOwogICAgfQp9KCkpOw==",
  },
  {
    "_id": "320012d2-ad02-401a-871e-3973db81a3d7",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "null",
    "evaluatorVersion": "1.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Demo - Journey Chooser",
    "script": "Ly8gRGlzcGxheSBjaG9pY2Ugb2Ygam91cm5leXMKLy8gU2VlIGh0dHBzOi8vY2RuLWljb25zLXBuZy5mbGF0aWNvbi5jb20gZm9yIGV4YW1wbGUgaWNvbnMKdmFyIGpvdXJuZXlzID0gWwogIC8veyAibmFtZSI6ICJMZWdhY3kgTG9naW4iLCAidXJsIjogIkxvZ2luIiwgImljb24iOiAiMTI4LzYzMTcvNjMxNzU3Ny5wbmciIH0sCiAgeyAibmFtZSI6ICJMb2dpbiIsICJ1cmwiOiAiUGFzc3dvcmRsZXNzLU1hc3RlciIsICJpY29uIjogIjEyOC85Njk5Lzk2OTk1ODIucG5nIiB9LAogIC8veyAibmFtZSI6ICJSZWdpc3RlciIsICJ1cmwiOiAiRGVtby1Qd2RsZXNzLU5ldy1Vc2VyICIsICJpY29uIjogIjEyOC8xNjk4LzE2OTg1NzIucG5nIiB9LAogIC8veyAibmFtZSI6ICJRUiBMb2dpbiIsICJ1cmwiOiAiRGVtby1Qd2RMZXNzLVFSIiwgImljb24iOiAiMTI4LzEyODcvMTI4NzU1OC5wbmciIH0sCiAgLy97ICJuYW1lIjogIlNNUyBXZWJBdXRoTiIsICJ1cmwiOiAiRGVtby1Qd2RMZXNzLVNNUyIsICJpY29uIjogIjEyOC8yNzA0LzI3MDQxNjcucG5nIiB9LAogIC8veyAibmFtZSI6ICJTTVMgTWFnaWMgTGluayIsICJ1cmwiOiAiRGVtby1Qd2RMZXNzLVNNUy1TaW1wbGUiLCAiaWNvbiI6ICIxMjgvMjcwNC8yNzA0MTY3LnBuZyIgfSwKICAvL3sgIm5hbWUiOiAiSUQgUHJvb2ZpbmciLCAidXJsIjogIkRlbW8tT25GaWRvIiwgImljb24iOiAiMTI4LzYwNjEvNjA2MTM5Ni5wbmciIH0sCiAgLy97ICJuYW1lIjogIlJlZ2lzdGVyK0lEVi1MaXZlIiwgInVybCI6ICJEZW1vLVNlbGZSZWdpc3RyYXRpb24iLCAiaWNvbiI6ICIxMjgvMTY5OC8xNjk4NTcyLnBuZyIgfSwKICAvL3sgIm5hbWUiOiAiUmVnaXN0ZXIrSURWLVNhbmRib3giLCAidXJsIjogIkRlbW8tU2VsZlJlZ2lzdHJhdGlvblNhbmRib3giLCAiaWNvbiI6ICIxMjgvMTY5OC8xNjk4NTcyLnBuZyIgfSwKICAvL3sgIm5hbWUiOiAiUmVtZW1iZXIgVXNlcm5hbWVzIiwgInVybCI6ICJEZW1vLVJlbWVtYmVyTXlVc2VybmFtZSIsICJpY29uIjogIjEyOC84ODkvODg5NjY4LnBuZyIgfSwKICAvL3sgIm5hbWUiOiAiUGVlciBSZWNvdmVyeSIsICJ1cmwiOiAiRGVtby1SZWNvdmVyeSIsICJpY29uIjogIjEyOC8yNTk3LzI1OTcxNDMucG5nIiB9LAogIC8veyAibmFtZSI6ICJGaW5nZXJwcmludEpTIiwgInVybCI6ICJGaW5nZXJwcmludEpTIiwgImljb24iOiAiLzEyOC84MzM3LzgzMzc3MDIucG5nIiB9LAogIC8veyAibmFtZSI6ICJGaW5nZXJwcmludEpTIFBybyIsICJ1cmwiOiAiRmluZ2VycHJpbnRQcm9KUyIsICJpY29uIjogIi8xMjgvODMzNy84MzM3NzAyLnBuZyIgfSwKICAvL3sgIm5hbWUiOiAiUmVzZXQgUGFzc3dvcmQiLCAidXJsIjogIlJlc2V0UGFzc3dvcmQiLCAiaWNvbiI6ICIxMjgvMTAwMC8xMDAwOTMzLnBuZyIgfSwKICAvL3sgIm5hbWUiOiAiU29jaWFsIExvZ2luIiwgInVybCI6ICJEZW1vLVNvY2lhbCIsICJpY29uIjogIjEyOC8zMDAvMzAwMjIxLnBuZyIgfSwKICAvL3sgIm5hbWUiOiAiU0FNTCIsICJ1cmwiOiAiRGVtby1TQU1MIiwgImljb24iOiAiMTI4LzI5LzI5NjExLnBuZyIgfSwKICAvL3sgIm5hbWUiOiAiTUZBLU9BVEgiLCAidXJsIjogIkRlbW8tTUZBLU9BVEgiLCAiaWNvbiI6ICIxMjgvNzQ3Ni83NDc2Nzk2LnBuZyIgfSwKICAvL3sgIm5hbWUiOiAiTUZBLVB1c2giLCAidXJsIjogIkRlbW8tTUZBLVB1c2giLCAiaWNvbiI6ICIxMjgvNzQ3Ni83NDc2Nzk2LnBuZyIgfSwKICAvL3sgIm5hbWUiOiAiUGFzc3dvcmRsZXNzIiwgInVybCI6ICJEZW1vLU1GQS1QYXNzd2RsZXNzIiwgImljb24iOiAiMTI4LzI3NjcvMjc2NzE0Ni5wbmciIH0sICAKICAvL3sgIm5hbWUiOiAiTUZBLUNob2ljZSIsICJ1cmwiOiAiRGVtby1NRkEtQ2hvaWNlIiwgImljb24iOiAiMTI4Lzc0NzYvNzQ3Njc5Ni5wbmciIH0sCiAgLy97ICJuYW1lIjogIlByb2dyZXNzaXZlIFByb2ZpbGUiLCAidXJsIjogIlByb2dyZXNzaXZlUHJvZmlsZSIsICJpY29uIjogIjEyOC83MzE5LzczMTk1MDkucG5nIiB9LAogIC8veyAibmFtZSI6ICJBZ2UtQmFzZWQgTG9naW4iLCAidXJsIjogIkRlbW8tQWdlQmFzZWRMb2dpbiIsICJpY29uIjogIjEyOC8zMDgxLzMwODE5NjkucG5nIiB9LAogIC8veyAibmFtZSI6ICJNdWx0aSBCcmFuZCIsICJ1cmwiOiAiRGVtby1NdWx0aUJyYW5kIiwgImljb24iOiAiMTI4LzY5ODAvNjk4MDczNS5wbmciIH0sCiAgLy97ICJuYW1lIjogIkFudGkgRnJhdWQiLCAidXJsIjogIjEtRGVtby1DaG9vc2VyLUF1dG9BY2Nlc3MiLCAiaWNvbiI6ICIxMjgvMjg2Ny8yODY3NzI1LnBuZyIgfSwKICAKICAKXQoKCnZhciBJQ09OUyA9ICJodHRwczovL2Nkbi1pY29ucy1wbmcuZmxhdGljb24uY29tLyIKdmFyIFNJWkUgPSAiMjQiOwoKdmFyIGNzcyA9ICIqIHsgYm94LXNpemluZzogYm9yZGVyLWJveDsgfSAgLmNvbHVtbiB7IGZsb2F0OiBsZWZ0OyB3aWR0aDogNTAlOyBwYWRkaW5nOiAxMHB4OyB0ZXh0LWFsaWduOmxlZnQ7IH0gLnJvdzphZnRlciB7IGNvbnRlbnQ6IFwiXCI7IGRpc3BsYXk6IHRhYmxlOyBjbGVhcjogYm90aDsgfSAuYm94IHsgZGlzcGxheTogZmxleDsgYWxpZ24taXRlbXM6IGNlbnRlcjsgIGhlaWdodDogNjBweDsgdGV4dC1kZWNvcmF0aW9uOiBub25lOyBwYWRkaW5nOiAwIDEwcHg7IGJhY2tncm91bmQtY29sb3I6IHJnYigyNTUsIDI1NSwgMjU1KTsgY29sb3I6IHJnYigwLCAwLCAwKTsgYm9yZGVyLWNvbG9yOiByZ2IoMCwgMCwgMCk7IGJvcmRlci1zdHlsZTogc29saWQ7IGJvcmRlci13aWR0aDoxcHg7IG1hcmdpbi1ib3R0b206IDJweDsgIH0gLmljb24geyBoZWlnaHQ6IDMycHg7IG1pbi13aWR0aDogMzJweDsgbWFyZ2luLXJpZ2h0OiAxMHB4OyB9IGE6aG92ZXIgeyB0ZXh0LWRlY29yYXRpb246IG5vbmU7IH0iOwoKdmFyIGZyID0gSmF2YUltcG9ydGVyKAogICAgb3JnLmZvcmdlcm9jay5vcGVuYW0uYXV0aC5ub2RlLmFwaS5BY3Rpb24sCiAgICBjb20uc3VuLmlkZW50aXR5LmF1dGhlbnRpY2F0aW9uLmNhbGxiYWNrcy5TY3JpcHRUZXh0T3V0cHV0Q2FsbGJhY2sKKQoKCndpdGgoZnIpIHsKICAgIHZhciBzY3JpcHQ7CiAgICBmdW5jdGlvbiBjcmVhdGVTY3JpcHQoKSB7CiAgICAgICAgICB2YXIgbGVmdCA9ICIiOwogICAgICAgIHZhciByaWdodCA9ICIiOwogICAgICAgICAgZm9yIChpIGluIGpvdXJuZXlzKSB7CiAgICAgICAgICAgIHZhciBlbGVtID0gJzxhIGNsYXNzPVwiYnRuIGJ0bi1saWdodCBidG4tYmxvY2sgYm94XCIgaHJlZj1cImh0dHBzOi8vb3BlbmFtLXZvbGtlci1kZW1vLmZvcmdlYmxvY2tzLmNvbS9hbS9YVUk/cmVhbG09YWxwaGEmYXV0aEluZGV4VHlwZT1zZXJ2aWNlJmF1dGhJbmRleFZhbHVlPScgKyBqb3VybmV5c1tpXVsidXJsIl0gKyAnXCI+PGltZyBjbGFzcz1cImljb25cIiBzcmM9XCInICsgSUNPTlMgKyBqb3VybmV5c1tpXVsiaWNvbiJdICsgJ1wiPjxzcGFuPicgKyBqb3VybmV5c1tpXVsibmFtZSJdICsgJzwvc3Bhbj48L2E+JzsKICAgICAgICAgICAgICBpZiAoaSAlIDIgPT0gMCkgCiAgICAgICAgICAgICAgICAgIGxlZnQgKz0gZWxlbTsKICAgICAgICAgICAgICBlbHNlIAogICAgICAgICAgICAgICAgICByaWdodCArPSBlbGVtOwogICAgICAgIH0KICAgICAgICByZXR1cm4gU3RyaW5nKCJkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKSkuaW5uZXJIVE1MID0gJyIgKyBjc3MgKyAiJyBcblwKICAgICAgICAgICAgdmFyIGNob29zZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsgXG5cCiAgICAgICAgICAgIGNob29zZXIuaWQgPSAnY2hvb3Nlcic7IFxuXAogICAgICAgICAgICB2YXIgY2IgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2FsbGJhY2tzUGFuZWwnKTsgXG5cCiAgICAgICAgICAgIGNiLmluc2VydEJlZm9yZShjaG9vc2VyLCBjYi5maXJzdENoaWxkKTsgXG5cCiAgICAgICAgICAgIGNob29zZXIuaW5uZXJIVE1MID0gJzxkaXYgY2xhc3M9XCJyb3dcIj48ZGl2IGNsYXNzPVwiY29sdW1uXCI+IitsZWZ0KyI8L2Rpdj48ZGl2IGNsYXNzPVwiY29sdW1uXCI+IityaWdodCsiPC9kaXY+PC9kaXY+JyBcblwKICAgICAgICAgICAgaWYgKGRvY3VtZW50LmJvZHkucXVlcnlTZWxlY3RvcignYnV0dG9uW3R5cGU9c3VibWl0XScpKSB7IFxuXAogICAgICAgICAgICAgICAgdmFyIGIgPSBkb2N1bWVudC5ib2R5LnF1ZXJ5U2VsZWN0b3IoJ2J1dHRvblt0eXBlPXN1Ym1pdF0nKTsgXG5cCiAgICAgICAgICAgICAgICBiLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbigpIHsgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Nob29zZXInKS5yZW1vdmUoKTsgIH0pOyBcblwKICAgICAgICAgICAgfSBcblwKICAgICAgICAiKTsKICAgIH0gIAogIAogICAgaWYgKGNhbGxiYWNrcy5pc0VtcHR5KCkpIHsKICAgICAgICBhY3Rpb24gPSBBY3Rpb24uc2VuZCgKICAgICAgICAgICAgbmV3IFNjcmlwdFRleHRPdXRwdXRDYWxsYmFjayhjcmVhdGVTY3JpcHQoKSkKICAgICAgICApLmJ1aWxkKCkKICAgIH0gZWxzZSBhY3Rpb24gPSBBY3Rpb24uZ29UbygidHJ1ZSIpLmJ1aWxkKCk7Cn0=",
  },
  {
    "_id": "d22f9a0c-426a-4466-b95e-d0f125b0d5fa",
    "context": "OAUTH2_ACCESS_TOKEN_MODIFICATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Default global script for OAuth2 Access Token Modification",
    "evaluatorVersion": "1.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "OAuth2 Access Token Modification Script",
    "script": "",
  },
  {
    "_id": "0ab1dc10-a54f-476f-ad07-2a04915cd443",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "DisplayUserName",
    "evaluatorVersion": "1.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "wks-DisplayUserName",
    "script": "LyogRGlzcGxheSBVc2VybmFtZQogKgogKiBBdXRob3I6IHZvbGtlci5zY2hldWJlckBmb3JnZXJvY2suY29tCiAqIAogKiBEaXNwbGF5IHRoZSB1c2VybmFtZS4KICogCiAqIFRoaXMgc2NyaXB0IGRvZXMgbm90IG5lZWQgdG8gYmUgcGFyYW1ldHJpemVkLiBJdCB3aWxsIHdvcmsgcHJvcGVybHkgYXMgaXMuCiAqIAogKiBUaGUgU2NyaXB0ZWQgRGVjaXNpb24gTm9kZSBuZWVkcyB0aGUgZm9sbG93aW5nIG91dGNvbWVzIGRlZmluZWQ6CiAqIC0gdHJ1ZQogKi8KKGZ1bmN0aW9uICgpIHsKICB0cnkgewogICAgdmFyIG91dGNvbWUgPSAndHJ1ZSc7CiAgICB2YXIgdXNlcm5hbWUgPSBub2RlU3RhdGUuZ2V0KCd1c2VybmFtZScpLmFzU3RyaW5nKCk7CgogICAgLy8gU3BlY2lmeSB0aGUgbWVzc2FnZSB5b3Ugd2FudCB0byBkaXNwbGF5LiBZb3UgbWF5IHVzZSBIVE1MIGZvciBmb3JtYXR0aW5nLiBBdm9pZCBsaW5lIGJyZWFrcyEgVXNlIDxicj4gaW5zdGVhZC4KICAgIHZhciBtZXNzYWdlID0gJ1lvdXIgRW5jb3JlIHVzZXJuYW1lIGlzOjxoMyBzdHlsZT0iY29sb3I6IzI5NDhBNzsiPicrdXNlcm5hbWUrJzwvaDM+JzsKCiAgICB2YXIgYW5jaG9yID0gJ2FuY2hvci0nK2dlbmVyYXRlTnVtZXJpY1Rva2VuKCd4eHgnKTsKICAgIHZhciBzY3JpcHQgPSAiQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoXG4gXAogICAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdjYWxsYmFjay1jb21wb25lbnQnKSkuZm9yRWFjaChcbiBcCiAgICAgIGZ1bmN0aW9uIChlKSB7XG4gXAogICAgICAgIHZhciBtZXNzYWdlID0gZS5maXJzdEVsZW1lbnRDaGlsZDtcbiBcCiAgICAgICAgaWYgKG1lc3NhZ2UuZmlyc3RDaGlsZCAmJiBtZXNzYWdlLmZpcnN0Q2hpbGQubm9kZU5hbWUgPT0gJyN0ZXh0JyAmJiBtZXNzYWdlLmZpcnN0Q2hpbGQubm9kZVZhbHVlLnRyaW0oKSA9PSAnIithbmNob3IrIicpIHtcbiBcCiAgICAgICAgICBtZXNzYWdlLmlubmVySFRNTCA9ICciK21lc3NhZ2UrIic7XG4gXAogICAgICAgIH1cbiBcCiAgICAgIH0pIjsKICAgIHZhciBmciA9IEphdmFJbXBvcnRlcigKICAgICAgICBvcmcuZm9yZ2Vyb2NrLm9wZW5hbS5hdXRoLm5vZGUuYXBpLkFjdGlvbiwKICAgICAgICBqYXZheC5zZWN1cml0eS5hdXRoLmNhbGxiYWNrLlRleHRPdXRwdXRDYWxsYmFjaywKICAgICAgICBjb20uc3VuLmlkZW50aXR5LmF1dGhlbnRpY2F0aW9uLmNhbGxiYWNrcy5TY3JpcHRUZXh0T3V0cHV0Q2FsbGJhY2sKICAgICkKICAgIGlmIChtZXNzYWdlLmxlbmd0aCAmJiBjYWxsYmFja3MuaXNFbXB0eSgpKSB7CiAgICAgICAgYWN0aW9uID0gZnIuQWN0aW9uLnNlbmQoCiAgICAgICAgICAgIG5ldyBmci5UZXh0T3V0cHV0Q2FsbGJhY2soCiAgICAgICAgICAgICAgICBmci5UZXh0T3V0cHV0Q2FsbGJhY2suSU5GT1JNQVRJT04sCiAgICAgICAgICAgICAgICBhbmNob3IKICAgICAgICAgICAgKSwKICAgICAgICAgICAgbmV3IGZyLlNjcmlwdFRleHRPdXRwdXRDYWxsYmFjayhzY3JpcHQpCiAgICAgICAgKS5idWlsZCgpCiAgICB9CiAgICBlbHNlIHsKICAgICAgYWN0aW9uID0gZnIuQWN0aW9uLmdvVG8ob3V0Y29tZSkuYnVpbGQoKTsKICAgIH0KICB9IGNhdGNoIChlcnJvcikgewogICAgbG9nZ2VyLmVycm9yKCdFcnJvcjogJyArIGVycm9yKTsKICAgIG5vZGVTdGF0ZS5wdXRTaGFyZWQoJ2Vycm9yJywgZXJyb3IubWVzc2FnZSk7CiAgfQoKICAgLyoKICAgICogR2VuZXJhdGUgYSB0b2tlbiBpbiB0aGUgZGVzaXJlZCBmb3JtYXQuIEFsbCAneCcgY2hhcmFjdGVycyB3aWxsIGJlIHJlcGxhY2VkIHdpdGggYSByYW5kb20gbnVtYmVyIDAtOS4KICAgICogCiAgICAqIEV4YW1wbGU6CiAgICAqICd4eHh4eCcgcHJvZHVjZXMgJzI4NTM1JwogICAgKiAneHh4LXh4eCcgcHJvZHVjZXMgJzQzMi01MjEnCiAgICAqLwogIGZ1bmN0aW9uIGdlbmVyYXRlTnVtZXJpY1Rva2VuKGZvcm1hdCkgewogICAgICByZXR1cm4gZm9ybWF0LnJlcGxhY2UoL1t4XS9nLCBmdW5jdGlvbihjKSB7CiAgICAgICAgICB2YXIgciA9IE1hdGgucmFuZG9tKCkqMTB8MDsKICAgICAgICAgIHZhciB2ID0gcjsKICAgICAgICAgIHJldHVybiB2LnRvU3RyaW5nKDEwKTsKICAgICAgfSk7CiAgfQp9KCkpOw==",
  },
  {
    "_id": "9674f7d1-7448-4544-879e-91587bb04f46",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Get esc admin token",
    "evaluatorVersion": "1.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Get esv admin token",
    "script": "LyoKICAtIERhdGEgbWFkZSBhdmFpbGFibGUgYnkgbm9kZXMgdGhhdCBoYXZlIGFscmVhZHkgZXhlY3V0ZWQgYXJlIGF2YWlsYWJsZSBpbiB0aGUgc2hhcmVkU3RhdGUgdmFyaWFibGUuCiAgLSBUaGUgc2NyaXB0IHNob3VsZCBzZXQgb3V0Y29tZSB0byBlaXRoZXIgInRydWUiIG9yICJmYWxzZSIuCiAqLwp2YXIgYWRtaW5Ub2tlbiA9ICBzeXN0ZW1FbnYuZ2V0UHJvcGVydHkoImVzdi5hZG1pbi50b2tlbiIpOwpzaGFyZWRTdGF0ZS5wdXQoJ2FkbWluVG9rZW4nLCBhZG1pblRva2VuKTsKb3V0Y29tZSA9ICJ0cnVlIjs=",
  },
  {
    "_id": "c0413dae-fdd1-45b7-9302-61d6ae02b194",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Debug to show AM States",
    "evaluatorVersion": "1.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "FR-Debug",
    "script": "LyogRElTQ0xBSU1FUjogVGhpcyBjb2RlIGlzIHByb3ZpZGVkIHRvIHlvdSBleHByZXNzbHkgYXMgYW4gZXhhbXBsZSAgKOKAnFNhbXBsZSBDb2Rl4oCdKS4gSXQgaXMgdGhlIHJlc3BvbnNpYmlsaXR5IG9mIHRoZSBpbmRpdmlkdWFsIHJlY2lwaWVudCB1c2VyLCBpbiBoaXMvaGVyIHNvbGUgZGlzY3JldGlvbiwgdG8gZGlsaWdlbmNlIHN1Y2ggU2FtcGxlIENvZGUgZm9yIGFjY3VyYWN5LCBjb21wbGV0ZW5lc3MsIHNlY3VyaXR5LCBhbmQgZmluYWwgZGV0ZXJtaW5hdGlvbiBmb3IgYXBwcm9wcmlhdGVuZXNzIG9mIHVzZS4gCiAqIEFOWSBTQU1QTEUgQ09ERSBJUyBQUk9WSURFRCBPTiBBTiDigJxBUyBJU+KAnSBJUyBCQVNJUywgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORC4gRk9SR0VST0NLIEFORCBJVFMgTElDRU5TT1JTIEVYUFJFU1NMWSBESVNDTEFJTSBBTEwgV0FSUkFOVElFUywgIFdIRVRIRVIgRVhQUkVTUywgSU1QTElFRCwgT1IgU1RBVFVUT1JZLCBJTkNMVURJTkcgV0lUSE9VVCBMSU1JVEFUSU9OLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTICBPRiBNRVJDSEFOVEFCSUxJVFksIE9SIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLgogKiBGT1JHRVJPQ0sgU0hBTEwgTk9UIEhBVkUgQU5ZIExJQUJJTElUWSBBUklTSU5HIE9VVCBPRiBPUiBSRUxBVElORyBUTyBBTlkgVVNFLCBJTVBMRU1FTlRBVElPTiwgSU5URUdSQVRJT04sIE9SIENPTkZJR1VSQVRJT04gT0YgQU5ZIFNBTVBMRSBDT0RFIElOIEFOWSBQUk9EVUNUSU9OIEVOVklST05NRU5UIE9SIEZPUiBBTlkgQ09NTUVSQ0lBTCBERVBMT1lNRU5UKFMpLgogKgogKiBTY3JpcHQgTmFtZTogQU0gSm91cm5leSBUZW1wbGF0ZQogKgogKiBBdXRob3JzOiBzZUBmb3JnZXJvY2suY29tCiAqIAogKiBUaGlzIHNjcmlwdCBzaG93cyBhIGRlZmF1bHQgdGVtcGxhdGUgb24gaG93IHlvdXIgU2NyaXB0aW5nIERlY2lzaW9uIE5vZGUgc2NyaXB0cyBzaG91bGQgYmUgd3JpdHRlbi4KICogSXQgc2hvd3MgeW91IGhvdyB0byB3b3JrIHdpdGggc2hhcmVkU3RhdGUsIHRyYW5zaWVudFN0YXRlLCBzZWN1cmVTdGF0ZS4KICogVGhpcyBpcyBhIGdyZWF0IGRlYnVnIHNjcmlwdCB0byB1c2UgaW4gYW5kIG9mIGl0c2VsZiBhcyBpdCB3aWxsIGRpc3BsYXkgYWxsIHRocmVlIHN0YXRlcyBtZW50aW9uZWQgYWJvdmUgaW4gYSBmb3JtYXR0ZWQgdGFibGUKICogCiAqIFRoaXMgc2NyaXB0IG5lZWRzIHRvIGJlIHBhcmFtZXRyaXplZC4gSXQgd2lsbCBub3Qgd29yayBwcm9wZXJseSBhcyBpcy4gCiAqIEl0IHJlcXVpcmVzIHNvbWUgbm9kZXMgdGhhdCBzZXQgYXQgbGVhc3Qgc2hhcmVkU3RhdGUgYmVmb3JlIGl0IGNhbiBvcGVyYXRlLgogKiBGb3IgZXhhbXBsZSwgc2V0IGEgcGFnZSBub2RlIHdpdGggUGxhdGZvcm0gVXNlcm5hbWUgYW5kIFBsYXRmb3JtIFBhc3N3b3JkIG5vZGVzCiAqIAogKiBUaGlzIFNjcmlwdGVkIERlY2lzaW9uIE5vZGUgbmVlZHMgdGhlIGZvbGxvd2luZyBvdXRjb21lcyBkZWZpbmVkOgogKiAtIHRydWUKKi8KCi8vIERvIGV2ZXJ5dGhpbmcgaW4gYSBzZWxmLWludm9raW5nIGZ1bmN0aW9uIGFuZCBkbyBub3Qgd3JpdGUgY29kZSBvdXRzaWRlIG9mIGEgZnVuY3Rpb24gb3IgeW91IHdpbGwgcGF5IGRlYXJseS4gCi8vIFRoaXMgaXMgYmVjYXVzZSBvZiB0b3AtbGV2ZWwgc2NvcGluZy93aGl0ZWxpc3RpbmcvZXRjIGlzc3VlcyB0aGF0IGdpdmUgeW91ICd1bmRlZmluZWQnIGVycm9ycy4KKGZ1bmN0aW9uICgpIHsKICBsb2dnZXIubWVzc2FnZSgiU2NyaXB0OiBzdGFydCIpOyAvLyBiZWdpbmcgb2Ygc2NyaXB0IG1haW4KICBvdXRjb21lID0gInRydWUiOyAvLyA8LSBmaWxsIGluIGRlZmF1bHQgb3V0Y29tZSBoZXJlIGFuZCBpdCBzaG91bGQgbWF0Y2ggYSAiU2NyaXB0IE91dGNvbWVzIiBzZXR0aW5nIG9uIHRoaXMgbm9kZSBpdHNlbGYKCiAgLy8gYnVpbGQgb3V0cHV0IGh0bWwgdGFibGUgdGhhdCB3aWxsIGJlIHNlbnQgYmFjayB0byBicm93c2VyCiAgdmFyIG91dHB1dCA9IGNyZWF0ZUh0bWwoKTsKCiAgLy8gaXNzdWUgY2FsbGJhY2sgdG8gYnJvd3NlciBhZnRlciBvdXRwdXQgaHRtbCBpcyBidWlsdCBmcm9tIGNyZWF0ZUh0bWwoKSBmdW5jdGlvbgogIGRpc3BsYXlNZXNzYWdlKG91dHB1dCk7CiAgCiAgbG9nZ2VyLm1lc3NhZ2UoIlNjcmlwdDogZW5kIik7IC8vIGVuZCBvZiBzY3JpcHQgbWFpbgoKICAvKgogICogUHV0IGZ1bmN0aW9ucyBiZWxvdyBoZXJlCiAgKi8KICBmdW5jdGlvbiBjcmVhdGVIdG1sKCkgewogICAgICB2YXIgaHRtbCA9ICI8dGFibGUgY2xhc3M9XCJ0YWJsZSB0YWJsZS1zdHJpcGVkXCI+IjsKICAgICAgaHRtbCArPSAiPHRoZWFkIGNsYXNzPVwidGhlYWQtZGFya1wiPjx0cj48dGggY2xhc3M9XCJweC0xIHB5LTFcIiBjb2xzcGFuPVwiMlwiPlNoYXJlZCBTdGF0ZSBWYXJpYWJsZXMgKHNoYXJlZFN0YXRlLmdldCk8L3RoPjwvdHI+PC90aGVhZD4iOwogICAgICAvLyBnZXQgYWxsIHRoZSBrZXlzIGluIG5vZGVTdGF0ZQogICAgICB2YXIgaXRlcmF0b3IgPSBub2RlU3RhdGUua2V5cygpLml0ZXJhdG9yKCk7CiAgICAgIHZhciBzdGF0ZUtleXMgPSBbXTsKICAgICAgd2hpbGUgKGl0ZXJhdG9yLmhhc05leHQoKSkgewogICAgICAgICAgc3RhdGVLZXlzLnB1c2goaXRlcmF0b3IubmV4dCgpLnRvU3RyaW5nKCkpOwogICAgICB9CiAgICAgIHN0YXRlS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChzdGF0ZUtleSkgewogICAgICAgIGlmIChzaGFyZWRTdGF0ZS5nZXQoc3RhdGVLZXkpIAogICAgICAgICAgICAmJiBzaGFyZWRTdGF0ZS5nZXQoc3RhdGVLZXkpLnRvU3RyaW5nKCkgIT09ICJudWxsIgogICAgICAgICAgICAmJiBzaGFyZWRTdGF0ZS5nZXQoc3RhdGVLZXkpLnRvU3RyaW5nKCkgIT09ICIiCiAgICAgICAgICAgICYmICIiK3N0YXRlS2V5ICE9PSAib2JqZWN0QXR0cmlidXRlcyIgIC8vIGdvaW5nIHRvIHB1bGwgb3V0IG9iamVjdEF0dHJpYnV0ZXMgbGF0ZXIKICAgICAgICAgICAgJiYgIiIrc3RhdGVLZXkgIT09ICJwYWdlTm9kZUNhbGxiYWNrcyIpIC8vcGFnZU5vZGVDYWxsYmFja3MgYXJlIGludGVybmFsIHRvIHRoZSBQYWdlIE5vZGUgYW5kIG5vdCBuZWVkZWQvdXNlZCAgCiAgICAgICAgewogICAgICAgICAgaHRtbCArPSAiPHRyPjx0ZCBjbGFzcz1cInB4LTEgcHktMVwiPiIgKyBzdGF0ZUtleSArICI8L3RkPjx0ZCBjbGFzcz1cInB4LTEgcHktMVwiPiIgKyBzaGFyZWRTdGF0ZS5nZXQoc3RhdGVLZXkpICsgIjwvdGQ+PC90cj4iOwogICAgICAgIH0KICAgICAgfSk7CiAgICAgIGh0bWwgKz0gIjwvdGFibGU+IjsKCiAgICAgIGh0bWwgKz0gIjx0YWJsZSBjbGFzcz1cInRhYmxlIHRhYmxlLXN0cmlwZWRcIj4iOwogICAgICAKICAgICAgaHRtbCArPSAiPHRoZWFkIGNsYXNzPVwidGhlYWQtZGFya1wiPjx0cj48dGggY2xhc3M9XCJweC0xIHB5LTFcIiBjb2xzcGFuPVwiMlwiPlRyYW5zaWVudCBTdGF0ZSBWYXJpYWJsZXMgKHRyYW5zaWVudFN0YXRlLmdldCk8L3RoPjwvdHI+PC90aGVhZD4iOwogICAgICAvLyBnZXQgYWxsIHRoZSBrZXlzIGluIG5vZGVTdGF0ZQogICAgICB2YXIgaXRlcmF0b3IgPSBub2RlU3RhdGUua2V5cygpLml0ZXJhdG9yKCk7CiAgICAgIHZhciBzdGF0ZUtleXMgPSBbXTsKICAgICAgd2hpbGUgKGl0ZXJhdG9yLmhhc05leHQoKSkgewogICAgICAgICAgc3RhdGVLZXlzLnB1c2goaXRlcmF0b3IubmV4dCgpLnRvU3RyaW5nKCkpOwogICAgICB9CiAgICAgIHN0YXRlS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChzdGF0ZUtleSkgewogICAgICAgIGlmICh0cmFuc2llbnRTdGF0ZS5nZXQoc3RhdGVLZXkpIAogICAgICAgICAgICAmJiB0cmFuc2llbnRTdGF0ZS5nZXQoc3RhdGVLZXkpLnRvU3RyaW5nKCkgIT09ICJudWxsIiAKICAgICAgICAgICAgJiYgdHJhbnNpZW50U3RhdGUuZ2V0KHN0YXRlS2V5KS50b1N0cmluZygpICE9PSAiIgogICAgICAgICAgICAmJiAiIitzdGF0ZUtleSAhPT0gIm9iamVjdEF0dHJpYnV0ZXMiKSAKICAgICAgICB7CiAgICAgICAgICBodG1sICs9ICI8dHI+PHRkIGNsYXNzPVwicHgtMSBweS0xXCI+IiArIHN0YXRlS2V5ICsgIjwvdGQ+PHRkIGNsYXNzPVwicHgtMSBweS0xXCI+IiArIHRyYW5zaWVudFN0YXRlLmdldChzdGF0ZUtleSkgKyAiPC90ZD48L3RyPiI7CiAgICAgICAgfQogICAgICB9KTsKICAgICAgaHRtbCArPSAiPC90YWJsZT4iOwoKICAgICAgaHRtbCArPSAiPHRhYmxlIGNsYXNzPVwidGFibGUgdGFibGUtc3RyaXBlZFwiPiI7CiAgICAgIC8vIEJ1aWxkIHRoZSB0YWJsZSBvZiBvYmplY3RBdHRyaWJ1dGVzIGluIHNoYXJlZFN0YXRlCiAgICAgIGlmIChzaGFyZWRTdGF0ZS5nZXQoIm9iamVjdEF0dHJpYnV0ZXMiKSkKICAgICAgeyAgIAogICAgICAgIGh0bWwgKz0gIjx0aGVhZCBjbGFzcz1cInRoZWFkLWRhcmtcIj48dHI+PHRoIGNsYXNzPVwicHgtMSBweS0xXCIgY29sc3Bhbj1cIjJcIj5TaGFyZWQgT2JqZWN0IEF0dHJpYnV0ZXMgKHNoYXJlZFN0YXRlLmdldCk8L3RoPjwvdHI+PC90aGVhZD4iOwogICAgICAgIHZhciBlbnRyaWVzID0gc2hhcmVkU3RhdGUuZ2V0KCdvYmplY3RBdHRyaWJ1dGVzJykuZW50cnlTZXQoKS50b0FycmF5KCk7CiAgICAgICAgZW50cmllcy5mb3JFYWNoKGZ1bmN0aW9uIChlbnRyeSkgeyAvLyBzaG93aW5nIGhvdyB0byB1c2UgZW50cnlTZXQoKS4gQ2FuIHVzZSBrZXlTZXQoKS4KICAgICAgICAgICAgaHRtbCArPSAiPHRyPjx0ZCBjbGFzcz1cInB4LTEgcHktMVwiPiIgKyBlbnRyeS5nZXRLZXkoKSArICI8L3RkPjx0ZCBjbGFzcz1cInB4LTEgcHktMVwiPiIgKyBlbnRyeS5nZXRWYWx1ZSgpICsgIjwvdGQ+PC90cj4iOwogICAgICAgIH0pOwogICAgICB9CiAgICAgIGVsc2UgewogICAgICAgIGh0bWwgKz0gIjx0cj48dGQgY29sc3Bhbj1cIjJcIj5FTVBUWTwvdGQ+PC90cj4iOwogICAgICB9CiAgICAgIGh0bWwgKz0gIjwvdGFibGU+IjsKCiAgICAgIGh0bWwgKz0gIjx0YWJsZSBjbGFzcz1cInRhYmxlIHRhYmxlLXN0cmlwZWRcIj4iOwogICAgICAvLyBCdWlsZCB0aGUgdGFibGUgb2Ygb2JqZWN0QXR0cmlidXRlcyBpbiB0cmFuc2llbnRTdGF0ZQogICAgICBpZiAodHJhbnNpZW50U3RhdGUuZ2V0KCJvYmplY3RBdHRyaWJ1dGVzIikpCiAgICAgIHsKICAgICAgICBodG1sICs9ICI8dGhlYWQgY2xhc3M9XCJ0aGVhZC1kYXJrXCI+PHRyPjx0aCBjbGFzcz1cInB4LTEgcHktMVwiIGNvbHNwYW49XCIyXCI+VHJhbnNpZW50IE9iamVjdCBBdHRyaWJ1dGVzICh0cmFuc2llbnRTdGF0ZS5nZXQpPC90aD48L3RyPjwvdGhlYWQ+IjsKICAgICAgICB2YXIga2V5cyA9IHRyYW5zaWVudFN0YXRlLmdldCgnb2JqZWN0QXR0cmlidXRlcycpLmtleVNldCgpLnRvQXJyYXkoKTsKICAgICAgICBrZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyAvLyBzaG93aW5nIGhvdyB0byB1c2Uga2V5U2V0KCkuIENhbiB1c2UgZW50cnlTZXQoKS4KICAgICAgICAgICAgaHRtbCArPSAiPHRyPjx0ZCBjbGFzcz1cInB4LTEgcHktMVwiPiIgKyBrZXkgKyAiPC90ZD48dGQgY2xhc3M9XCJweC0xIHB5LTFcIj4iICsgdHJhbnNpZW50U3RhdGUuZ2V0KCdvYmplY3RBdHRyaWJ1dGVzJykuZ2V0KGtleSkgKyAiPC90ZD48L3RyPiI7CiAgICAgICAgfSk7CiAgICAgIH0KICAgICAgZWxzZSB7CiAgICAgICAgaHRtbCArPSAiPHRyPjx0ZCBjb2xzcGFuPVwiMlwiPkVNUFRZPC90ZD48L3RyPiI7CiAgICAgIH0KICAgICAgaHRtbCArPSAiPC90YWJsZT4iOwoKICAgICAgaHRtbCArPSAiPHRhYmxlIGNsYXNzPVwidGFibGUgdGFibGUtc3RyaXBlZFwiPiI7CiAgICAgIGh0bWwgKz0gIjx0aGVhZCBjbGFzcz1cInRoZWFkLWRhcmtcIj48dHI+PHRoIGNsYXNzPVwicHgtMSBweS0xXCIgY29sc3Bhbj1cIjJcIj5ub2RlU3RhdGUuZ2V0ICh0cmFuc2llbnRTdGF0ZSwgc2VjdXJlU3RhdGUsIHNoYXJlZFN0YXRlKTwvdGg+PC90cj48L3RoZWFkPiI7CiAgICAgIC8vIGdldCBhbGwgdGhlIGtleXMgaW4gbm9kZVN0YXRlCiAgICAgIHZhciBpdGVyYXRvciA9IG5vZGVTdGF0ZS5rZXlzKCkuaXRlcmF0b3IoKTsKICAgICAgdmFyIHN0YXRlS2V5cyA9IFtdOwogICAgICB3aGlsZSAoaXRlcmF0b3IuaGFzTmV4dCgpKSB7CiAgICAgICAgICBzdGF0ZUtleXMucHVzaChpdGVyYXRvci5uZXh0KCkudG9TdHJpbmcoKSk7CiAgICAgIH0KICAgICAgc3RhdGVLZXlzLmZvckVhY2goZnVuY3Rpb24gKHN0YXRlS2V5KSB7CiAgICAgICAgaWYgKG5vZGVTdGF0ZS5nZXQoc3RhdGVLZXkpIAogICAgICAgICAgICAmJiBub2RlU3RhdGUuZ2V0KHN0YXRlS2V5KS50b1N0cmluZygpICE9PSAibnVsbCIKICAgICAgICAgICAgJiYgbm9kZVN0YXRlLmdldChzdGF0ZUtleSkudG9TdHJpbmcoKSAhPT0gIiIKICAgICAgICAgICAgJiYgIiIrc3RhdGVLZXkgIT09ICJwYWdlTm9kZUNhbGxiYWNrcyIpIC8vcGFnZU5vZGVDYWxsYmFja3MgYXJlIGludGVybmFsIHRvIHRoZSBQYWdlIE5vZGUgYW5kIG5vdCBuZWVkZWQvdXNlZCAgCgogICAgICAgIHsKICAgICAgICAgIGh0bWwgKz0gIjx0cj48dGQgY2xhc3M9XCJweC0xIHB5LTFcIj4iICsgc3RhdGVLZXkgKyAiPC90ZD48dGQgY2xhc3M9XCJweC0xIHB5LTFcIj4iICsgbm9kZVN0YXRlLmdldChzdGF0ZUtleSkgKyAiPC90ZD48L3RyPiI7CiAgICAgICAgfQogICAgICB9KTsKICAgICAgaHRtbCArPSAiPC90YWJsZT4iOwoKCiAgICAgIGh0bWwgKz0gIjx0YWJsZSBjbGFzcz1cInRhYmxlIHRhYmxlLXN0cmlwZWRcIj4iOwogICAgICAvLyBsb29raW5nIGZvciBhIHdheSB0byBidWlsZCB0aGlzIEFNIFVzZXIgUHJvZmlsZSBsaXN0IGR5bmFtaWNhbGx5CiAgICAgIHZhciBvYmpBTUF0dHJzID0gWwogICAgICAgICJ1aWQiLAogICAgICAgICJjbiIsCiAgICAgICAgImluZXRVc2VyU3RhdHVzIiwKICAgICAgICAiZ2l2ZW5OYW1lIiwKICAgICAgICAic24iLAogICAgICAgICJtYWlsIiwKICAgICAgICAiZGVzY3JpcHRpb24iLAogICAgICAgICJ0ZWxlcGhvbmVOdW1iZXIiLAogICAgICAgICJzdHJlZXQiLAogICAgICAgICJsIiwKICAgICAgICAicG9zdGFsQ29kZSIsCiAgICAgICAgImNvIiwKICAgICAgICAic3QiLAogICAgICAgICJkaXNwbGF5TmFtZSIsCiAgICAgICAgImZyLWF0dHItaXN0cjEiLAogICAgICAgICJmci1hdHRyLWlzdHIyIiwKICAgICAgICAiZnItYXR0ci1pc3RyMyIsCiAgICAgICAgImZyLWF0dHItaXN0cjQiLAogICAgICAgICJmci1hdHRyLWlzdHI1IiwKICAgICAgICAiZnItYXR0ci1zdHIxIiwKICAgICAgICAiZnItYXR0ci1zdHIyIiwKICAgICAgICAiZnItYXR0ci1zdHIzIiwKICAgICAgICAiZnItYXR0ci1zdHI0IiwKICAgICAgICAiZnItYXR0ci1zdHI1IiwKICAgICAgICAiZnItYXR0ci1pbXVsdGkxIiwKICAgICAgICAiZnItYXR0ci1pbXVsdGkyIiwKICAgICAgICAiZnItYXR0ci1pbXVsdGkzIiwKICAgICAgICAiZnItYXR0ci1pbXVsdGk0IiwKICAgICAgICAiZnItYXR0ci1pbXVsdGk1IiwKICAgICAgICAiZnItYXR0ci1tdWx0aTEiLAogICAgICAgICJmci1hdHRyLW11bHRpMiIsCiAgICAgICAgImZyLWF0dHItbXVsdGkzIiwKICAgICAgICAiZnItYXR0ci1tdWx0aTQiLAogICAgICAgICJmci1hdHRyLW11bHRpNSIsCiAgICAgICAgImZyLWF0dHItaWRhdGUxIiwKICAgICAgICAiZnItYXR0ci1pZGF0ZTIiLAogICAgICAgICJmci1hdHRyLWlkYXRlMyIsCiAgICAgICAgImZyLWF0dHItaWRhdGU0IiwKICAgICAgICAiZnItYXR0ci1pZGF0ZTUiLAogICAgICAgICJmci1hdHRyLWRhdGUxIiwKICAgICAgICAiZnItYXR0ci1kYXRlMiIsCiAgICAgICAgImZyLWF0dHItZGF0ZTMiLAogICAgICAgICJmci1hdHRyLWRhdGU0IiwKICAgICAgICAiZnItYXR0ci1kYXRlNSIsCiAgICAgICAgImZyLWF0dHItaWludDEiLAogICAgICAgICJmci1hdHRyLWlpbnQyIiwKICAgICAgICAiZnItYXR0ci1paW50MyIsCiAgICAgICAgImZyLWF0dHItaWludDQiLAogICAgICAgICJmci1hdHRyLWlpbnQ1IiwKICAgICAgICAiZnItYXR0ci1pbnQxIiwKICAgICAgICAiZnItYXR0ci1pbnQyIiwKICAgICAgICAiZnItYXR0ci1pbnQzIiwKICAgICAgICAiZnItYXR0ci1pbnQ0IiwKICAgICAgICAiZnItYXR0ci1pbnQ1IgogICAgICBdOyAgCgogICAgICAvLyBCdWlsZCB0aGUgdGFibGUgb2YgaWRSZXBvc2l0b3J5IGJpbmRpbmcKICAgICAgdmFyIGF0dHJzMjsKICAgICAgaWYgKHNoYXJlZFN0YXRlLmdldCgiX2lkIikgJiYgaWRSZXBvc2l0b3J5LmdldEF0dHJpYnV0ZShzaGFyZWRTdGF0ZS5nZXQoIl9pZCIpLCAidWlkIikpCiAgICAgIHsKICAgICAgICBodG1sICs9ICI8dGhlYWQgY2xhc3M9XCJ0aGVhZC1kYXJrXCI+PHRyPjx0aCBjbGFzcz1cInB4LTEgcHktMVwiIGNvbHNwYW49XCIyXCI+aWRSZXBvc2l0b3J5IEFNIFVzZXIgUHJvZmlsZTwvdGg+PC90cj48L3RoZWFkPiI7ICAgICAgICAKICAgICAgICB2YXIgaWQgPSBzaGFyZWRTdGF0ZS5nZXQoIl9pZCIpOwogICAgICAgIG9iakFNQXR0cnMuZm9yRWFjaChmdW5jdGlvbiAoYXR0cikgewogICAgICAgICAgYXR0cnMgPSBpZFJlcG9zaXRvcnkuZ2V0QXR0cmlidXRlKGlkLCBhdHRyKTsgIAogICAgICAgICAgaWYgKGF0dHJzICYmICIiK2F0dHJzICE9PSAibnVsbCIgJiYgIiIrYXR0cnMgIT09ICIiICYmICIiK2F0dHJzLnNpemUoKT4wKXsKICAgICAgICAgICAgaWYgKGF0dHJzLnNpemUoKT09PTEpewogICAgICAgICAgICAgICAgYXR0cnMgPSBzaW5nbGVWYWx1ZShhdHRycyk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICBodG1sICs9ICI8dHI+PHRkIGNsYXNzPVwicHgtMSBweS0xXCI+IiArIGF0dHIgKyAiPC90ZD48dGQgY2xhc3M9XCJweC0xIHB5LTFcIj4iICsgYXR0cnMgKyAiPC90ZD48L3RyPiI7CiAgICAgICAgICB9CiAgICAgICAgfSk7ICAgICAgCiAgICAgIH0KICAgICAgaHRtbCArPSAiPC90YWJsZT4iOwogICAgICAKICAgICAgaHRtbCArPSAiPHRhYmxlIGNsYXNzPVwidGFibGUgdGFibGUtc3RyaXBlZFwiPiI7CiAgICAgIGh0bWwgKz0gIjx0aGVhZCBjbGFzcz1cInRoZWFkLWRhcmtcIj48dHI+PHRoIGNsYXNzPVwicHgtMSBweS0xXCIgY29sc3Bhbj1cIjJcIj5SZXF1ZXN0IEhlYWRlcnM8L3RoPjwvdHI+PC90aGVhZD4iOwogICAgICAvL2h0bWwgKz0gIjx0cj48dGQgY29sc3Bhbj1cIjJcIj4iICsgcmVxdWVzdEhlYWRlcnMudG9TdHJpbmcoKSArICI8L3RkPjwvdHI+IjsKICAgICAgdmFyIHJIZWFkZXJzID0gU3RyaW5nKHJlcXVlc3RIZWFkZXJzKS5zcGxpdCgnXSwgJykubWFwKGZ1bmN0aW9uIChoZWFkZXIpewogICAgICAgIHJldHVybiBoZWFkZXIuc3BsaXQoJz0nKVswXS5yZXBsYWNlKCd7JywnJykucmVwbGFjZSgnfScsJycpOyAKICAgICAgfSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICBySGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uIChoZWFkZXJOYW1lKSB7CiAgICAgICAgdmFyIGhlYWRlciA9IHJlcXVlc3RIZWFkZXJzLmdldChoZWFkZXJOYW1lKTsKICAgICAgICBodG1sICs9ICI8dHI+PHRkIGNsYXNzPVwicHgtMSBweS0xXCI+IiArIGhlYWRlck5hbWUgKyAiPC90ZD48dGQgY2xhc3M9XCJweC0xIHB5LTFcIj4iICsgaGVhZGVyLmdldCgwKSArICI8L3RkPjwvdHI+IjsKICAgICAgfSk7ICAgIAogICAgCiAgICBodG1sICs9ICI8L3RhYmxlPiI7CiAgICAgIAogICAgcmV0dXJuIGh0bWw7CiAgfQogIAogIC8vYnVpbGRzIHRoZSBodG1sIHRvIGRpc3BsYXkgdGhlIG1lc3NhZ2UgaW4gdGhlIGJyb3dzZXIgb24gdGhlIGNhbGxiYWNrCiAgLy91c2UgdmlldyBzb3VyY2UgaW4gYnJvd3NlciBhbmQgbG9vayBmb3IgY2xhc3M9ImNhbGxiYWNrLWNvbXBvbmVudCIgdG8gc2VlIGh0bWwgcmVzcG9uc2UKICBmdW5jdGlvbiBkaXNwbGF5TWVzc2FnZShtZXNzYWdlKSB7CiAgICAgIHZhciBhbmNob3IgPSAiYW5jaG9yLSIuY29uY2F0KGdlbmVyYXRlTnVtZXJpY1Rva2VuKCd4eHgnKSk7CiAgICAgIHZhciBoYWxpZ24gPSAibGVmdCI7CiAgICAgIHZhciBzY3JpcHQgPSAiQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoXG4iLmNvbmNhdCgKICAgICAgICAgICJkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdjYWxsYmFjay1jb21wb25lbnQnKSkuZm9yRWFjaChcbiIpLmNvbmNhdCgKICAgICAgICAgICAgICAiZnVuY3Rpb24gKGUpIHtcbiIpLmNvbmNhdCgKICAgICAgICAgICAgICAgICAgIiAgdmFyIG1lc3NhZ2UgPSBlLmZpcnN0RWxlbWVudENoaWxkO1xuIikuY29uY2F0KAogICAgICAgICAgICAgICAgICAgICAgIiAgaWYgKG1lc3NhZ2UuZmlyc3RDaGlsZCAmJiBtZXNzYWdlLmZpcnN0Q2hpbGQubm9kZU5hbWUgPT0gJyN0ZXh0JyAmJiBtZXNzYWdlLmZpcnN0Q2hpbGQubm9kZVZhbHVlLnRyaW0oKSA9PSAnIikuY29uY2F0KGFuY2hvcikuY29uY2F0KCInKSB7XG4iKS5jb25jYXQoCiAgICAgICAgICAgICAgICAgICAgICAgICAgIiAgICBtZXNzYWdlLmNsYXNzTmFtZSA9IFwiXCI7XG4iKS5jb25jYXQoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIgICAgbWVzc2FnZS5zdHlsZSA9IFwiXCI7XG4iKS5jb25jYXQoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiICAgIG1lc3NhZ2UuYWxpZ24gPSBcIiIpLmNvbmNhdChoYWxpZ24pLmNvbmNhdCgiXCI7XG4iKS5jb25jYXQoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIiAgICBtZXNzYWdlLmlubmVySFRNTCA9ICciKS5jb25jYXQobWVzc2FnZSkuY29uY2F0KCInO1xuIikuY29uY2F0KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiICB9XG4iKS5jb25jYXQoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAifSkiKQogICAgICB2YXIgZnIgPSBKYXZhSW1wb3J0ZXIoCiAgICAgICAgICBvcmcuZm9yZ2Vyb2NrLm9wZW5hbS5hdXRoLm5vZGUuYXBpLkFjdGlvbiwKICAgICAgICAgIGphdmF4LnNlY3VyaXR5LmF1dGguY2FsbGJhY2suVGV4dE91dHB1dENhbGxiYWNrLAogICAgICAgICAgY29tLnN1bi5pZGVudGl0eS5hdXRoZW50aWNhdGlvbi5jYWxsYmFja3MuU2NyaXB0VGV4dE91dHB1dENhbGxiYWNrCiAgICAgICkKICAgICAgaWYgKG1lc3NhZ2UubGVuZ3RoICYmIGNhbGxiYWNrcy5pc0VtcHR5KCkpIHsKICAgICAgICAgIGFjdGlvbiA9IGZyLkFjdGlvbi5zZW5kKAogICAgICAgICAgICAgIG5ldyBmci5UZXh0T3V0cHV0Q2FsbGJhY2soCiAgICAgICAgICAgICAgICAgIGZyLlRleHRPdXRwdXRDYWxsYmFjay5JTkZPUk1BVElPTiwKICAgICAgICAgICAgICAgICAgYW5jaG9yCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBuZXcgZnIuU2NyaXB0VGV4dE91dHB1dENhbGxiYWNrKHNjcmlwdCkKICAgICAgICAgICkuYnVpbGQoKQogICAgICB9CiAgICAgIGVsc2UgewogICAgICAgICAgYWN0aW9uID0gZnIuQWN0aW9uLmdvVG8ob3V0Y29tZSkuYnVpbGQoKTsKICAgICAgfQogIH0KCiAgLyoKICAgKiBHZW5lcmF0ZSBhIHRva2VuIGluIHRoZSBkZXNpcmVkIGZvcm1hdC4gQWxsICd4JyBjaGFyYWN0ZXJzIHdpbGwgYmUgcmVwbGFjZWQgd2l0aCBhIHJhbmRvbSBudW1iZXIgMC05LgogICAqIFRoaXMgaXMgbmVlZGVkIHRvIGhhdmUgYSB1bmlxdWUgZGl2KGFuY2hvci14KSBvbiB0aGUgaHRtbCBjYWxsYmFjayB0aGF0IHdlIGNhbiBwb3B1bGF0ZSBkYXRhCiAgICogRXhhbXBsZToKICAgKiAneHh4eHgnIHByb2R1Y2VzICcyODUzNScKICAgKiAneHh4LXh4eCcgcHJvZHVjZXMgJzQzMi01MjEnCiAgICovCiAgZnVuY3Rpb24gZ2VuZXJhdGVOdW1lcmljVG9rZW4oZm9ybWF0KSB7CiAgICAgIHJldHVybiBmb3JtYXQucmVwbGFjZSgvW3hdL2csIGZ1bmN0aW9uIChjKSB7CiAgICAgICAgICB2YXIgciA9IE1hdGgucmFuZG9tKCkgKiAxMCB8IDA7CiAgICAgICAgICB2YXIgdiA9IHI7CiAgICAgICAgICByZXR1cm4gdi50b1N0cmluZygxMCk7CiAgICAgIH0pOwogIH0KCiAgLy8gZ2V0IGEgc2luZ2xlVmFsdWUgZnJvbSBhIEhhc2hTZXQKICBmdW5jdGlvbiBzaW5nbGVWYWx1ZSh4KQogIHsKICAgIGlmKHguc2l6ZSgpPjApCiAgICAgIHsKICAgICAgICByZXR1cm4geC5pdGVyYXRvcigpLm5leHQoKTsKICAgICAgfQogICAgICAKICAgIHJldHVybiAiIjsKICAgIAogIH0KCn0oKSk7IC8vIHNlbGYtaW52b2tpbmcgZnVuY3Rpb24=",
  },
  {
    "_id": "10643e95-873a-4ec0-b713-a7f56760d179",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Check if username has already been collected.",
    "evaluatorVersion": "1.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "FrodoTestScript4",
    "script": "LyogQ2hlY2sgVXNlcm5hbWUKICoKICogQXV0aG9yOiB2b2xrZXIuc2NoZXViZXJAZm9yZ2Vyb2NrLmNvbQogKiAKICogQ2hlY2sgaWYgdXNlcm5hbWUgaGFzIGFscmVhZHkgYmVlbiBjb2xsZWN0ZWQuCiAqIFJldHVybiAia25vd24iIGlmIHllcywgInVua25vd24iIG90aGVyd2lzZS4KICogCiAqIFRoaXMgc2NyaXB0IGRvZXMgbm90IG5lZWQgdG8gYmUgcGFyYW1ldHJpemVkLiBJdCB3aWxsIHdvcmsgcHJvcGVybHkgYXMgaXMuCiAqIAogKiBUaGUgU2NyaXB0ZWQgRGVjaXNpb24gTm9kZSBuZWVkcyB0aGUgZm9sbG93aW5nIG91dGNvbWVzIGRlZmluZWQ6CiAqIC0ga25vd24KICogLSB1bmtub3duCiAqLwooZnVuY3Rpb24gKCkgewogICAgaWYgKG51bGwgIT0gc2hhcmVkU3RhdGUuZ2V0KCJ1c2VybmFtZSIpKSB7CiAgICAgICAgb3V0Y29tZSA9ICJrbm93biI7CiAgICB9CiAgICBlbHNlIHsKICAgICAgICBvdXRjb21lID0gInVua25vd24iOwogICAgfQp9KCkpOw==",
  },
  {
    "_id": "0414eed8-abfd-43bb-94b5-c841a8ba2c98",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "null",
    "evaluatorVersion": "1.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "pushBomb.js",
    "script": "dmFyIGF0dHJpYnV0ZSA9ICJmci1hdHRyLXN0cjIiOwp2YXIgdGhyZXNob2xkID0gMjsKb3V0Y29tZSA9ICJkZWZhdWx0IjsKdmFyIG5vdyA9IG5ldyBEYXRlKCkgIAp2YXIgZXBvY2ggPSBNYXRoLnJvdW5kKG5vdy5nZXRUaW1lKCkgLyAxMDAwKTsKdmFyIGVwb2NoQ3VycmVudE1pbnV0ZSA9IE1hdGgucm91bmQoZXBvY2gvNjApOwoKdmFyIHVzZXJBdHRyOwp2YXIgX2lkID0gc2hhcmVkU3RhdGUuZ2V0KCJfaWQiKTsKdmFyIGVwb2NoQXR0ck1pbnV0ZT0wOwp2YXIgYXR0ZW1wdENvdW50PTE7Cgp2YXIgdXNlclByZWZlcmVuY2VzID0gaWRSZXBvc2l0b3J5LmdldEF0dHJpYnV0ZShfaWQsICJmci1pZG0tcHJlZmVyZW5jZXMiKS50b1N0cmluZygpOwoKaWYodXNlclByZWZlcmVuY2VzLmluZGV4T2YoIlwiY3VzdG9tX3B1c2hcIjp0cnVlIikgPiAtMSkKewogICAgb3V0Y29tZSA9ICJzdXNwZW5kZWQiOwp9CmVsc2UKewogIHZhciB1c2VyQXR0clJhdyA9IGlkUmVwb3NpdG9yeS5nZXRBdHRyaWJ1dGUoX2lkLCBhdHRyaWJ1dGUpOwogIGlmICh1c2VyQXR0clJhdyAmJiB1c2VyQXR0clJhdy5pdGVyYXRvcigpLmhhc05leHQoKSkgewogICAgICB1c2VyQXR0ciA9IEpTT04ucGFyc2UodXNlckF0dHJSYXcuaXRlcmF0b3IoKS5uZXh0KCkudG9TdHJpbmcoKSk7CiAgICAgIGVwb2NoQXR0ck1pbnV0ZSA9IHVzZXJBdHRyWzBdOwogICAgICBhdHRlbXB0Q291bnQgPSB1c2VyQXR0clsxXTsKICAgICAgYXR0ZW1wdENvdW50ID0gYXR0ZW1wdENvdW50ICsgMTsKICB9CgogIC8vaWYoCgogIHZhciBuZXdBdHRyOwogIGlmKGVwb2NoQ3VycmVudE1pbnV0ZT09ZXBvY2hBdHRyTWludXRlKSB7CiAgICAgIG5ld0F0dHIgPSBTdHJpbmcoIlsiICsgZXBvY2hBdHRyTWludXRlLnRvU3RyaW5nKCkgKyAiLCIgKyBhdHRlbXB0Q291bnQudG9TdHJpbmcoKSAgKyAiXSIpOwogIH0KICBlbHNlIHsKICAgICAgYXR0ZW1wdENvdW50PTE7CiAgICAgIG5ld0F0dHIgPSBTdHJpbmcoIlsiICsgZXBvY2hDdXJyZW50TWludXRlLnRvU3RyaW5nKCkgKyAiLCIgKyBhdHRlbXB0Q291bnQudG9TdHJpbmcoKSArICJdIik7CiAgfQogIGlkUmVwb3NpdG9yeS5zZXRBdHRyaWJ1dGUoX2lkLCAiZnItYXR0ci1zdHIyIixbbmV3QXR0cl0pOwoKICBpZihhdHRlbXB0Q291bnQ+dGhyZXNob2xkKSB7CiAgICBvdXRjb21lID0gInRydWUiOwogIH0KICBlbHNlIHsKICAgIG91dGNvbWUgPSAiZmFsc2UiOwogIH0KfQ==",
  },
  {
    "_id": "157298c0-7d31-4059-a95b-eeb08473b7e5",
    "context": "AUTHENTICATION_CLIENT_SIDE",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Default global script for client side Device Id (Match) Authentication Module",
    "evaluatorVersion": "1.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Device Id (Match) - Client Side",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjMgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKdmFyIGZvbnREZXRlY3RvciA9IChmdW5jdGlvbiAoKSB7CiAgICAvKioKICAgICAqIEphdmFTY3JpcHQgY29kZSB0byBkZXRlY3QgYXZhaWxhYmxlIGF2YWlsYWJpbGl0eSBvZiBhCiAgICAgKiBwYXJ0aWN1bGFyIGZvbnQgaW4gYSBicm93c2VyIHVzaW5nIEphdmFTY3JpcHQgYW5kIENTUy4KICAgICAqCiAgICAgKiBBdXRob3IgOiBMYWxpdCBQYXRlbAogICAgICogV2Vic2l0ZTogaHR0cDovL3d3dy5sYWxpdC5vcmcvbGFiL2phdmFzY3JpcHQtY3NzLWZvbnQtZGV0ZWN0LwogICAgICogTGljZW5zZTogQXBhY2hlIFNvZnR3YXJlIExpY2Vuc2UgMi4wCiAgICAgKiAgICAgICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKICAgICAqIFZlcnNpb246IDAuMTUgKDIxIFNlcCAyMDA5KQogICAgICogICAgICAgICAgQ2hhbmdlZCBjb21wYXJpc2lvbiBmb250IHRvIGRlZmF1bHQgZnJvbSBzYW5zLWRlZmF1bHQtZGVmYXVsdCwKICAgICAqICAgICAgICAgIGFzIGluIEZGMy4wIGZvbnQgb2YgY2hpbGQgZWxlbWVudCBkaWRuJ3QgZmFsbGJhY2sKICAgICAqICAgICAgICAgIHRvIHBhcmVudCBlbGVtZW50IGlmIHRoZSBmb250IGlzIG1pc3NpbmcuCiAgICAgKiBWZXJzaW9uOiAwLjIgKDA0IE1hciAyMDEyKQogICAgICogICAgICAgICAgQ29tcGFyaW5nIGZvbnQgYWdhaW5zdCBhbGwgdGhlIDMgZ2VuZXJpYyBmb250IGZhbWlsaWVzIGllLAogICAgICogICAgICAgICAgJ21vbm9zcGFjZScsICdzYW5zLXNlcmlmJyBhbmQgJ3NhbnMnLiBJZiBpdCBkb2Vzbid0IG1hdGNoIGFsbCAzCiAgICAgKiAgICAgICAgICB0aGVuIHRoYXQgZm9udCBpcyAxMDAlIG5vdCBhdmFpbGFibGUgaW4gdGhlIHN5c3RlbQogICAgICogVmVyc2lvbjogMC4zICgyNCBNYXIgMjAxMikKICAgICAqICAgICAgICAgIFJlcGxhY2VkIHNhbnMgd2l0aCBzZXJpZiBpbiB0aGUgbGlzdCBvZiBiYXNlRm9udHMKICAgICAqLwogICAgLyoKICAgICAqIFBvcnRpb25zIENvcHlyaWdodGVkIDIwMTMgRm9yZ2VSb2NrIEFTLgogICAgICovCiAgICB2YXIgZGV0ZWN0b3IgPSB7fSwgYmFzZUZvbnRzLCB0ZXN0U3RyaW5nLCB0ZXN0U2l6ZSwgaCwgcywgZGVmYXVsdFdpZHRoID0ge30sIGRlZmF1bHRIZWlnaHQgPSB7fSwgaW5kZXg7CgogICAgLy8gYSBmb250IHdpbGwgYmUgY29tcGFyZWQgYWdhaW5zdCBhbGwgdGhlIHRocmVlIGRlZmF1bHQgZm9udHMuCiAgICAvLyBhbmQgaWYgaXQgZG9lc24ndCBtYXRjaCBhbGwgMyB0aGVuIHRoYXQgZm9udCBpcyBub3QgYXZhaWxhYmxlLgogICAgYmFzZUZvbnRzID0gWydtb25vc3BhY2UnLCAnc2Fucy1zZXJpZicsICdzZXJpZiddOwoKICAgIC8vd2UgdXNlIG0gb3IgdyBiZWNhdXNlIHRoZXNlIHR3byBjaGFyYWN0ZXJzIHRha2UgdXAgdGhlIG1heGltdW0gd2lkdGguCiAgICAvLyBBbmQgd2UgdXNlIGEgTExpIHNvIHRoYXQgdGhlIHNhbWUgbWF0Y2hpbmcgZm9udHMgY2FuIGdldCBzZXBhcmF0ZWQKICAgIHRlc3RTdHJpbmcgPSAibW1tbW1tbW1tbWxsaSI7CgogICAgLy93ZSB0ZXN0IHVzaW5nIDcycHggZm9udCBzaXplLCB3ZSBtYXkgdXNlIGFueSBzaXplLiBJIGd1ZXNzIGxhcmdlciB0aGUgYmV0dGVyLgogICAgdGVzdFNpemUgPSAnNzJweCc7CgogICAgaCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCJib2R5IilbMF07CgogICAgLy8gY3JlYXRlIGEgU1BBTiBpbiB0aGUgZG9jdW1lbnQgdG8gZ2V0IHRoZSB3aWR0aCBvZiB0aGUgdGV4dCB3ZSB1c2UgdG8gdGVzdAogICAgcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInNwYW4iKTsKICAgIHMuc3R5bGUuZm9udFNpemUgPSB0ZXN0U2l6ZTsKICAgIHMuaW5uZXJIVE1MID0gdGVzdFN0cmluZzsKICAgIGZvciAoaW5kZXggaW4gYmFzZUZvbnRzKSB7CiAgICAgICAgLy9nZXQgdGhlIGRlZmF1bHQgd2lkdGggZm9yIHRoZSB0aHJlZSBiYXNlIGZvbnRzCiAgICAgICAgcy5zdHlsZS5mb250RmFtaWx5ID0gYmFzZUZvbnRzW2luZGV4XTsKICAgICAgICBoLmFwcGVuZENoaWxkKHMpOwogICAgICAgIGRlZmF1bHRXaWR0aFtiYXNlRm9udHNbaW5kZXhdXSA9IHMub2Zmc2V0V2lkdGg7IC8vd2lkdGggZm9yIHRoZSBkZWZhdWx0IGZvbnQKICAgICAgICBkZWZhdWx0SGVpZ2h0W2Jhc2VGb250c1tpbmRleF1dID0gcy5vZmZzZXRIZWlnaHQ7IC8vaGVpZ2h0IGZvciB0aGUgZGVmdWFsdCBmb250CiAgICAgICAgaC5yZW1vdmVDaGlsZChzKTsKICAgIH0KCiAgICBkZXRlY3Rvci5kZXRlY3QgPSBmdW5jdGlvbihmb250KSB7CiAgICAgICAgdmFyIGRldGVjdGVkID0gZmFsc2UsIGluZGV4LCBtYXRjaGVkOwogICAgICAgIGZvciAoaW5kZXggaW4gYmFzZUZvbnRzKSB7CiAgICAgICAgICAgIHMuc3R5bGUuZm9udEZhbWlseSA9IGZvbnQgKyAnLCcgKyBiYXNlRm9udHNbaW5kZXhdOyAvLyBuYW1lIG9mIHRoZSBmb250IGFsb25nIHdpdGggdGhlIGJhc2UgZm9udCBmb3IgZmFsbGJhY2suCiAgICAgICAgICAgIGguYXBwZW5kQ2hpbGQocyk7CiAgICAgICAgICAgIG1hdGNoZWQgPSAocy5vZmZzZXRXaWR0aCAhPT0gZGVmYXVsdFdpZHRoW2Jhc2VGb250c1tpbmRleF1dIHx8IHMub2Zmc2V0SGVpZ2h0ICE9PSBkZWZhdWx0SGVpZ2h0W2Jhc2VGb250c1tpbmRleF1dKTsKICAgICAgICAgICAgaC5yZW1vdmVDaGlsZChzKTsKICAgICAgICAgICAgZGV0ZWN0ZWQgPSBkZXRlY3RlZCB8fCBtYXRjaGVkOwogICAgICAgIH0KICAgICAgICByZXR1cm4gZGV0ZWN0ZWQ7CiAgICB9OwoKICAgIHJldHVybiBkZXRlY3RvcjsKfSgpKTsKLyoKICogRE8gTk9UIEFMVEVSIE9SIFJFTU9WRSBDT1BZUklHSFQgTk9USUNFUyBPUiBUSElTIEhFQURFUi4KICoKICogQ29weXJpZ2h0IChjKSAyMDA5IFN1biBNaWNyb3N5c3RlbXMgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFRoZSBjb250ZW50cyBvZiB0aGlzIGZpbGUgYXJlIHN1YmplY3QgdG8gdGhlIHRlcm1zCiAqIG9mIHRoZSBDb21tb24gRGV2ZWxvcG1lbnQgYW5kIERpc3RyaWJ1dGlvbiBMaWNlbnNlCiAqICh0aGUgTGljZW5zZSkuIFlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluCiAqIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4KICoKICogWW91IGNhbiBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CiAqIGh0dHBzOi8vb3BlbnNzby5kZXYuamF2YS5uZXQvcHVibGljL0NEREx2MS4wLmh0bWwgb3IKICogb3BlbnNzby9sZWdhbC9DRERMdjEuMC50eHQKICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nCiAqIHBlcm1pc3Npb24gYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgogKgogKiBXaGVuIGRpc3RyaWJ1dGluZyBDb3ZlcmVkIENvZGUsIGluY2x1ZGUgdGhpcyBDRERMCiAqIEhlYWRlciBOb3RpY2UgaW4gZWFjaCBmaWxlIGFuZCBpbmNsdWRlIHRoZSBMaWNlbnNlIGZpbGUKICogYXQgb3BlbnNzby9sZWdhbC9DRERMdjEuMC50eHQuCiAqIElmIGFwcGxpY2FibGUsIGFkZCB0aGUgZm9sbG93aW5nIGJlbG93IHRoZSBDRERMIEhlYWRlciwKICogd2l0aCB0aGUgZmllbGRzIGVuY2xvc2VkIGJ5IGJyYWNrZXRzIFtdIHJlcGxhY2VkIGJ5CiAqIHlvdXIgb3duIGlkZW50aWZ5aW5nIGluZm9ybWF0aW9uOgogKiAiUG9ydGlvbnMgQ29weXJpZ2h0ZWQgW3llYXJdIFtuYW1lIG9mIGNvcHlyaWdodCBvd25lcl0iCiAqCiAqLwovKgogKiBQb3J0aW9ucyBDb3B5cmlnaHRlZCAyMDEzIFN5bnRlZ3JpdHkuCiAqIFBvcnRpb25zIENvcHlyaWdodGVkIDIwMTMtMjAxNCBGb3JnZVJvY2sgQVMuCiAqLwoKdmFyIGNvbGxlY3RTY3JlZW5JbmZvID0gZnVuY3Rpb24gKCkgewogICAgICAgIHZhciBzY3JlZW5JbmZvID0ge307CiAgICAgICAgaWYgKHNjcmVlbikgewogICAgICAgICAgICBpZiAoc2NyZWVuLndpZHRoKSB7CiAgICAgICAgICAgICAgICBzY3JlZW5JbmZvLnNjcmVlbldpZHRoID0gc2NyZWVuLndpZHRoOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoc2NyZWVuLmhlaWdodCkgewogICAgICAgICAgICAgICAgc2NyZWVuSW5mby5zY3JlZW5IZWlnaHQgPSBzY3JlZW4uaGVpZ2h0OwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoc2NyZWVuLnBpeGVsRGVwdGgpIHsKICAgICAgICAgICAgICAgIHNjcmVlbkluZm8uc2NyZWVuQ29sb3VyRGVwdGggPSBzY3JlZW4ucGl4ZWxEZXB0aDsKICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGNvbnNvbGUud2FybigiQ2Fubm90IGNvbGxlY3Qgc2NyZWVuIGluZm9ybWF0aW9uLiBzY3JlZW4gaXMgbm90IGRlZmluZWQuIik7CiAgICAgICAgfQogICAgICAgIHJldHVybiBzY3JlZW5JbmZvOwogICAgfSwKICAgIGNvbGxlY3RUaW1lem9uZUluZm8gPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIHRpbWV6b25lSW5mbyA9ICB7fSwgb2Zmc2V0ID0gbmV3IERhdGUoKS5nZXRUaW1lem9uZU9mZnNldCgpOwoKICAgICAgICBpZiAob2Zmc2V0KSB7CiAgICAgICAgICAgIHRpbWV6b25lSW5mby50aW1lem9uZSA9IG9mZnNldDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBjb25zb2xlLndhcm4oIkNhbm5vdCBjb2xsZWN0IHRpbWV6b25lIGluZm9ybWF0aW9uLiB0aW1lem9uZSBpcyBub3QgZGVmaW5lZC4iKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiB0aW1lem9uZUluZm87CiAgICB9LAogICAgY29sbGVjdEJyb3dzZXJQbHVnaW5zSW5mbyA9IGZ1bmN0aW9uICgpIHsKCiAgICAgICAgaWYgKG5hdmlnYXRvciAmJiBuYXZpZ2F0b3IucGx1Z2lucykgewogICAgICAgICAgICB2YXIgcGx1Z2luc0luZm8gPSB7fSwgaSwgcGx1Z2lucyA9IG5hdmlnYXRvci5wbHVnaW5zOwogICAgICAgICAgICBwbHVnaW5zSW5mby5pbnN0YWxsZWRQbHVnaW5zID0gIiI7CgogICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcGx1Z2lucy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgcGx1Z2luc0luZm8uaW5zdGFsbGVkUGx1Z2lucyA9IHBsdWdpbnNJbmZvLmluc3RhbGxlZFBsdWdpbnMgKyBwbHVnaW5zW2ldLmZpbGVuYW1lICsgIjsiOwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gcGx1Z2luc0luZm87CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgY29uc29sZS53YXJuKCJDYW5ub3QgY29sbGVjdCBicm93c2VyIHBsdWdpbiBpbmZvcm1hdGlvbi4gbmF2aWdhdG9yLnBsdWdpbnMgaXMgbm90IGRlZmluZWQuIik7CiAgICAgICAgICAgIHJldHVybiB7fTsKICAgICAgICB9CgogICAgfSwKLy8gR2V0dGluZyBnZW9sb2NhdGlvbiB0YWtlcyBzb21lIHRpbWUgYW5kIGlzIGRvbmUgYXN5bmNocm9ub3VzbHksIGhlbmNlIG5lZWQgYSBjYWxsYmFjayB3aGljaCBpcyBjYWxsZWQgb25jZSBnZW9sb2NhdGlvbiBpcyByZXRyaWV2ZWQuCiAgICBjb2xsZWN0R2VvbG9jYXRpb25JbmZvID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7CiAgICAgICAgdmFyIGdlb2xvY2F0aW9uSW5mbyA9IHt9LAogICAgICAgICAgICBzdWNjZXNzQ2FsbGJhY2sgPSBmdW5jdGlvbihwb3NpdGlvbikgewogICAgICAgICAgICAgICAgZ2VvbG9jYXRpb25JbmZvLmxvbmdpdHVkZSA9IHBvc2l0aW9uLmNvb3Jkcy5sb25naXR1ZGU7CiAgICAgICAgICAgICAgICBnZW9sb2NhdGlvbkluZm8ubGF0aXR1ZGUgPSBwb3NpdGlvbi5jb29yZHMubGF0aXR1ZGU7CiAgICAgICAgICAgICAgICBjYWxsYmFjayhnZW9sb2NhdGlvbkluZm8pOwogICAgICAgICAgICB9LCBlcnJvckNhbGxiYWNrID0gZnVuY3Rpb24oZXJyb3IpIHsKICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybigiQ2Fubm90IGNvbGxlY3QgZ2VvbG9jYXRpb24gaW5mb3JtYXRpb24uICIgKyBlcnJvci5jb2RlICsgIjogIiArIGVycm9yLm1lc3NhZ2UpOwogICAgICAgICAgICAgICAgY2FsbGJhY2soZ2VvbG9jYXRpb25JbmZvKTsKICAgICAgICAgICAgfTsKICAgICAgICBpZiAobmF2aWdhdG9yICYmIG5hdmlnYXRvci5nZW9sb2NhdGlvbikgewogICAgICAgICAgICAvLyBOQjogSWYgdXNlciBjaG9vc2VzICdOb3Qgbm93JyBvbiBGaXJlZm94IG5laXRoZXIgY2FsbGJhY2sgZ2V0cyBjYWxsZWQKICAgICAgICAgICAgLy8gICAgIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY3NTUzMwogICAgICAgICAgICBuYXZpZ2F0b3IuZ2VvbG9jYXRpb24uZ2V0Q3VycmVudFBvc2l0aW9uKHN1Y2Nlc3NDYWxsYmFjaywgZXJyb3JDYWxsYmFjayk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgY29uc29sZS53YXJuKCJDYW5ub3QgY29sbGVjdCBnZW9sb2NhdGlvbiBpbmZvcm1hdGlvbi4gbmF2aWdhdG9yLmdlb2xvY2F0aW9uIGlzIG5vdCBkZWZpbmVkLiIpOwogICAgICAgICAgICBjYWxsYmFjayhnZW9sb2NhdGlvbkluZm8pOwogICAgICAgIH0KICAgIH0sCiAgICBjb2xsZWN0QnJvd3NlckZvbnRzSW5mbyA9IGZ1bmN0aW9uICgpIHsKICAgICAgICB2YXIgZm9udHNJbmZvID0ge30sIGksIGZvbnRzTGlzdCA9IFsiY3Vyc2l2ZSIsIm1vbm9zcGFjZSIsInNlcmlmIiwic2Fucy1zZXJpZiIsImZhbnRhc3kiLCJkZWZhdWx0IiwiQXJpYWwiLCJBcmlhbCBCbGFjayIsCiAgICAgICAgICAgICJBcmlhbCBOYXJyb3ciLCJBcmlhbCBSb3VuZGVkIE1UIEJvbGQiLCJCb29rbWFuIE9sZCBTdHlsZSIsIkJyYWRsZXkgSGFuZCBJVEMiLCJDZW50dXJ5IiwiQ2VudHVyeSBHb3RoaWMiLAogICAgICAgICAgICAiQ29taWMgU2FucyBNUyIsIkNvdXJpZXIiLCJDb3VyaWVyIE5ldyIsIkdlb3JnaWEiLCJHZW50aXVtIiwiSW1wYWN0IiwiS2luZyIsIkx1Y2lkYSBDb25zb2xlIiwiTGFsaXQiLAogICAgICAgICAgICAiTW9kZW5hIiwiTW9ub3R5cGUgQ29yc2l2YSIsIlBhcHlydXMiLCJUYWhvbWEiLCJUZVgiLCJUaW1lcyIsIlRpbWVzIE5ldyBSb21hbiIsIlRyZWJ1Y2hldCBNUyIsIlZlcmRhbmEiLAogICAgICAgICAgICAiVmVyb25hIl07CiAgICAgICAgZm9udHNJbmZvLmluc3RhbGxlZEZvbnRzID0gIiI7CgogICAgICAgIGZvciAoaSA9IDA7IGkgPCBmb250c0xpc3QubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgaWYgKGZvbnREZXRlY3Rvci5kZXRlY3QoZm9udHNMaXN0W2ldKSkgewogICAgICAgICAgICAgICAgZm9udHNJbmZvLmluc3RhbGxlZEZvbnRzID0gZm9udHNJbmZvLmluc3RhbGxlZEZvbnRzICsgZm9udHNMaXN0W2ldICsgIjsiOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiBmb250c0luZm87CiAgICB9LAogICAgZGV2aWNlUHJpbnQgPSB7fTsKCmRldmljZVByaW50LnNjcmVlbiA9IGNvbGxlY3RTY3JlZW5JbmZvKCk7CmRldmljZVByaW50LnRpbWV6b25lID0gY29sbGVjdFRpbWV6b25lSW5mbygpOwpkZXZpY2VQcmludC5wbHVnaW5zID0gY29sbGVjdEJyb3dzZXJQbHVnaW5zSW5mbygpOwpkZXZpY2VQcmludC5mb250cyA9IGNvbGxlY3RCcm93c2VyRm9udHNJbmZvKCk7CgppZiAobmF2aWdhdG9yLnVzZXJBZ2VudCkgewogICAgZGV2aWNlUHJpbnQudXNlckFnZW50ID0gbmF2aWdhdG9yLnVzZXJBZ2VudDsKfQppZiAobmF2aWdhdG9yLmFwcE5hbWUpIHsKICAgIGRldmljZVByaW50LmFwcE5hbWUgPSBuYXZpZ2F0b3IuYXBwTmFtZTsKfQppZiAobmF2aWdhdG9yLmFwcENvZGVOYW1lKSB7CiAgICBkZXZpY2VQcmludC5hcHBDb2RlTmFtZSA9IG5hdmlnYXRvci5hcHBDb2RlTmFtZTsKfQppZiAobmF2aWdhdG9yLmFwcFZlcnNpb24pIHsKICAgIGRldmljZVByaW50LmFwcFZlcnNpb24gPSBuYXZpZ2F0b3IuYXBwVmVyc2lvbjsKfQppZiAobmF2aWdhdG9yLmFwcE1pbm9yVmVyc2lvbikgewogICAgZGV2aWNlUHJpbnQuYXBwTWlub3JWZXJzaW9uID0gbmF2aWdhdG9yLmFwcE1pbm9yVmVyc2lvbjsKfQppZiAobmF2aWdhdG9yLmJ1aWxkSUQpIHsKICAgIGRldmljZVByaW50LmJ1aWxkSUQgPSBuYXZpZ2F0b3IuYnVpbGRJRDsKfQppZiAobmF2aWdhdG9yLnBsYXRmb3JtKSB7CiAgICBkZXZpY2VQcmludC5wbGF0Zm9ybSA9IG5hdmlnYXRvci5wbGF0Zm9ybTsKfQppZiAobmF2aWdhdG9yLmNwdUNsYXNzKSB7CiAgICBkZXZpY2VQcmludC5jcHVDbGFzcyA9IG5hdmlnYXRvci5jcHVDbGFzczsKfQppZiAobmF2aWdhdG9yLm9zY3B1KSB7CiAgICBkZXZpY2VQcmludC5vc2NwdSA9IG5hdmlnYXRvci5vc2NwdTsKfQppZiAobmF2aWdhdG9yLnByb2R1Y3QpIHsKICAgIGRldmljZVByaW50LnByb2R1Y3QgPSBuYXZpZ2F0b3IucHJvZHVjdDsKfQppZiAobmF2aWdhdG9yLnByb2R1Y3RTdWIpIHsKICAgIGRldmljZVByaW50LnByb2R1Y3RTdWIgPSBuYXZpZ2F0b3IucHJvZHVjdFN1YjsKfQppZiAobmF2aWdhdG9yLnZlbmRvcikgewogICAgZGV2aWNlUHJpbnQudmVuZG9yID0gbmF2aWdhdG9yLnZlbmRvcjsKfQppZiAobmF2aWdhdG9yLnZlbmRvclN1YikgewogICAgZGV2aWNlUHJpbnQudmVuZG9yU3ViID0gbmF2aWdhdG9yLnZlbmRvclN1YjsKfQppZiAobmF2aWdhdG9yLmxhbmd1YWdlKSB7CiAgICBkZXZpY2VQcmludC5sYW5ndWFnZSA9IG5hdmlnYXRvci5sYW5ndWFnZTsKfQppZiAobmF2aWdhdG9yLnVzZXJMYW5ndWFnZSkgewogICAgZGV2aWNlUHJpbnQudXNlckxhbmd1YWdlID0gbmF2aWdhdG9yLnVzZXJMYW5ndWFnZTsKfQppZiAobmF2aWdhdG9yLmJyb3dzZXJMYW5ndWFnZSkgewogICAgZGV2aWNlUHJpbnQuYnJvd3Nlckxhbmd1YWdlID0gbmF2aWdhdG9yLmJyb3dzZXJMYW5ndWFnZTsKfQppZiAobmF2aWdhdG9yLnN5c3RlbUxhbmd1YWdlKSB7CiAgICBkZXZpY2VQcmludC5zeXN0ZW1MYW5ndWFnZSA9IG5hdmlnYXRvci5zeXN0ZW1MYW5ndWFnZTsKfQoKLy8gQXR0ZW1wdCB0byBjb2xsZWN0IGdlby1sb2NhdGlvbiBpbmZvcm1hdGlvbiBhbmQgcmV0dXJuIHRoaXMgd2l0aCB0aGUgZGF0YSBjb2xsZWN0ZWQgc28gZmFyLgovLyBPdGhlcndpc2UsIGlmIGdlby1sb2NhdGlvbiBmYWlscyBvciB0YWtlcyBsb25nZXIgdGhhbiAzMCBzZWNvbmRzLCBhdXRvLXN1Ym1pdCB0aGUgZGF0YSBjb2xsZWN0ZWQgc28gZmFyLgphdXRvU3VibWl0RGVsYXkgPSAzMDAwMDsKb3V0cHV0LnZhbHVlID0gSlNPTi5zdHJpbmdpZnkoZGV2aWNlUHJpbnQpOwpjb2xsZWN0R2VvbG9jYXRpb25JbmZvKGZ1bmN0aW9uKGdlb2xvY2F0aW9uSW5mbykgewogICAgZGV2aWNlUHJpbnQuZ2VvbG9jYXRpb24gPSBnZW9sb2NhdGlvbkluZm87CiAgICBvdXRwdXQudmFsdWUgPSBKU09OLnN0cmluZ2lmeShkZXZpY2VQcmludCk7CiAgICBzdWJtaXQoKTsKfSk7Cg==",
  },
  {
    "_id": "312e951f-70c5-49d2-a9ae-93aef909d5df",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Normalizes raw profile data from Salesforce",
    "evaluatorVersion": "1.0",
    "language": "GROOVY",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Salesforce Profile Normalization",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjAgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLmZpZWxkCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5qc29uCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5vYmplY3QKCnJldHVybiBqc29uKG9iamVjdCgKICAgICAgICBmaWVsZCgiaWQiLCByYXdQcm9maWxlLnVzZXJfaWQpLAogICAgICAgIGZpZWxkKCJkaXNwbGF5TmFtZSIsIHJhd1Byb2ZpbGUubmFtZSksCiAgICAgICAgZmllbGQoImdpdmVuTmFtZSIsIHJhd1Byb2ZpbGUuZ2l2ZW5fbmFtZSksCiAgICAgICAgZmllbGQoImZhbWlseU5hbWUiLCByYXdQcm9maWxlLmZhbWlseV9uYW1lKSwKICAgICAgICBmaWVsZCgicGhvdG9VcmwiLCByYXdQcm9maWxlLnBpY3R1cmUpLAogICAgICAgIGZpZWxkKCJlbWFpbCIsIHJhd1Byb2ZpbGUuZW1haWwpLAogICAgICAgIGZpZWxkKCJ1c2VybmFtZSIsIHJhd1Byb2ZpbGUuZW1haWwpLAogICAgICAgIGZpZWxkKCJsb2NhbGUiLCByYXdQcm9maWxlLnpvbmVJbmZvKSkp",
  },
  {
    "_id": "69f06e63-128c-4e2f-af52-079a8a6f448b",
    "context": "SAML2_SP_ADAPTER",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Default global script for SAML2 SP Adapter",
    "evaluatorVersion": "1.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "SAML2 SP Adapter Script",
    "script": "",
  },
  {
    "_id": "3cb43516-ae69-433a-8787-501d45db14e9",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Display sharedState, transientState, and headers.",
    "evaluatorVersion": "1.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "debug",
    "script": "LyogZGVidWcKICoKICogQXV0aG9yOiB2b2xrZXIuc2NoZXViZXJAZm9yZ2Vyb2NrLmNvbQogKiAKICogRGlzcGxheSBzaGFyZWRTdGF0ZSwgdHJhbnNpZW50U3RhdGUsIGFuZCBoZWFkZXJzLgogKiAKICogVGhpcyBzY3JpcHQgZG9lcyBub3QgbmVlZCB0byBiZSBwYXJhbWV0cml6ZWQuIEl0IHdpbGwgd29yayBwcm9wZXJseSBhcyBpcy4KICogCiAqIFRoZSBTY3JpcHRlZCBEZWNpc2lvbiBOb2RlIG5lZWRzIHRoZSBmb2xsb3dpbmcgb3V0Y29tZXMgZGVmaW5lZDoKICogLSB0cnVlCiAqLwp2YXIgYW5jaG9yID0gImFuY2hvci0iLmNvbmNhdChnZW5lcmF0ZU51bWVyaWNUb2tlbigneHh4JykpOwp2YXIgaGFsaWduID0gImxlZnQiOwp2YXIgbWVzc2FnZSA9ICI8cD48Yj5TaGFyZWQgU3RhdGU8L2I+Ojxici8+Ii5jb25jYXQoCiAgICAgIHNoYXJlZFN0YXRlLnRvU3RyaW5nKCkpLmNvbmNhdCgiPC9wPiIpLmNvbmNhdCgKICAgICI8cD48Yj5UcmFuc2llbnQgU3RhdGU8L2I+Ojxici8+IikuY29uY2F0KAogICAgICB0cmFuc2llbnRTdGF0ZS50b1N0cmluZygpKS5jb25jYXQoIjwvcD4iKS5jb25jYXQoCiAgICAiPHA+PGI+UmVxdWVzdCBIZWFkZXJzPC9iPjo8YnIvPiIpLmNvbmNhdCgKICAgICAgcmVxdWVzdEhlYWRlcnMudG9TdHJpbmcoKSkuY29uY2F0KCI8L3A+IikKdmFyIHNjcmlwdCA9ICJBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChcbiIuY29uY2F0KAogICJkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdjYWxsYmFjay1jb21wb25lbnQnKSkuZm9yRWFjaChcbiIpLmNvbmNhdCgKICAiZnVuY3Rpb24gKGUpIHtcbiIpLmNvbmNhdCgKICAiICB2YXIgbWVzc2FnZSA9IGUuZmlyc3RFbGVtZW50Q2hpbGQ7XG4iKS5jb25jYXQoCiAgIiAgaWYgKG1lc3NhZ2UuZmlyc3RDaGlsZCAmJiBtZXNzYWdlLmZpcnN0Q2hpbGQubm9kZU5hbWUgPT0gJyN0ZXh0JyAmJiBtZXNzYWdlLmZpcnN0Q2hpbGQubm9kZVZhbHVlLnRyaW0oKSA9PSAnIikuY29uY2F0KGFuY2hvcikuY29uY2F0KCInKSB7XG4iKS5jb25jYXQoCiAgIiAgICBtZXNzYWdlLmNsYXNzTmFtZSA9IFwidGV4dC1sZWZ0XCI7XG4iKS5jb25jYXQoCiAgIiAgICBtZXNzYWdlLmFsaWduID0gXCIiKS5jb25jYXQoaGFsaWduKS5jb25jYXQoIlwiO1xuIikuY29uY2F0KAogICIgICAgbWVzc2FnZS5pbm5lckhUTUwgPSAnIikuY29uY2F0KG1lc3NhZ2UpLmNvbmNhdCgiJztcbiIpLmNvbmNhdCgKICAiICB9XG4iKS5jb25jYXQoCiAgIn0pIikKdmFyIGZyID0gSmF2YUltcG9ydGVyKAogICAgb3JnLmZvcmdlcm9jay5vcGVuYW0uYXV0aC5ub2RlLmFwaS5BY3Rpb24sCiAgICBqYXZheC5zZWN1cml0eS5hdXRoLmNhbGxiYWNrLlRleHRPdXRwdXRDYWxsYmFjaywKICAgIGNvbS5zdW4uaWRlbnRpdHkuYXV0aGVudGljYXRpb24uY2FsbGJhY2tzLlNjcmlwdFRleHRPdXRwdXRDYWxsYmFjawopCmlmIChtZXNzYWdlLmxlbmd0aCAmJiBjYWxsYmFja3MuaXNFbXB0eSgpKSB7CiAgICBhY3Rpb24gPSBmci5BY3Rpb24uc2VuZCgKICAgICAgICBuZXcgZnIuVGV4dE91dHB1dENhbGxiYWNrKAogICAgICAgICAgICBmci5UZXh0T3V0cHV0Q2FsbGJhY2suSU5GT1JNQVRJT04sCiAgICAgICAgICAgIGFuY2hvcgogICAgICAgICksCiAgICAgICAgbmV3IGZyLlNjcmlwdFRleHRPdXRwdXRDYWxsYmFjayhzY3JpcHQpCiAgICApLmJ1aWxkKCkKfQplbHNlIHsKICBhY3Rpb24gPSBmci5BY3Rpb24uZ29UbygidHJ1ZSIpLmJ1aWxkKCk7Cn0KCiAvKgogICogR2VuZXJhdGUgYSB0b2tlbiBpbiB0aGUgZGVzaXJlZCBmb3JtYXQuIEFsbCAneCcgY2hhcmFjdGVycyB3aWxsIGJlIHJlcGxhY2VkIHdpdGggYSByYW5kb20gbnVtYmVyIDAtOS4KICAqIAogICogRXhhbXBsZToKICAqICd4eHh4eCcgcHJvZHVjZXMgJzI4NTM1JwogICogJ3h4eC14eHgnIHByb2R1Y2VzICc0MzItNTIxJwogICovCmZ1bmN0aW9uIGdlbmVyYXRlTnVtZXJpY1Rva2VuKGZvcm1hdCkgewogICAgcmV0dXJuIGZvcm1hdC5yZXBsYWNlKC9beF0vZywgZnVuY3Rpb24oYykgewogICAgICAgIHZhciByID0gTWF0aC5yYW5kb20oKSoxMHwwOwogICAgICAgIHZhciB2ID0gcjsKICAgICAgICByZXR1cm4gdi50b1N0cmluZygxMCk7CiAgICB9KTsKfQ==",
  },
  {
    "_id": "a7a78773-445b-4eca-bb93-409e86bced81",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Normalizes raw profile data from GitHub",
    "evaluatorVersion": "1.0",
    "language": "GROOVY",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "GitHub Profile Normalization",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjIgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLmZpZWxkCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5qc29uCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5vYmplY3QKCnJldHVybiBqc29uKG9iamVjdCgKICAgICAgICBmaWVsZCgiaWQiLCByYXdQcm9maWxlLmlkKSwKICAgICAgICBmaWVsZCgiZGlzcGxheU5hbWUiLCByYXdQcm9maWxlLm5hbWUpLAogICAgICAgIGZpZWxkKCJ1c2VybmFtZSIsIHJhd1Byb2ZpbGUubG9naW4pKSk=",
  },
  {
    "_id": "01e1a3c0-038b-4c16-956a-6c9d89328cff",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Default global script for a scripted decision node",
    "evaluatorVersion": "1.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Authentication Tree Decision Node Script",
    "script": "LyoKICAtIERhdGEgbWFkZSBhdmFpbGFibGUgYnkgbm9kZXMgdGhhdCBoYXZlIGFscmVhZHkgZXhlY3V0ZWQgYXJlIGF2YWlsYWJsZSBpbiB0aGUgc2hhcmVkU3RhdGUgdmFyaWFibGUuCiAgLSBUaGUgc2NyaXB0IHNob3VsZCBzZXQgb3V0Y29tZSB0byBlaXRoZXIgInRydWUiIG9yICJmYWxzZSIuCiAqLwoKb3V0Y29tZSA9ICJ0cnVlIjsK",
  },
  {
    "_id": "bb393d07-a121-47e2-9d24-1a1066f39ec0",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "My Example Script Using Libraries",
    "evaluatorVersion": "2.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "My Example Script Using Libraries",
    "script": "LyoqCiAqIFRlc3RpbmcgbGlicmFyeSBzY3JpcHRzCiAqLwp2YXIgbXlsaWIgPSByZXF1aXJlKCdNeSBFeGFtcGxlIExpYnJhcnknKTsKdmFyIGxvZ2dlcnMgPSByZXF1aXJlKCdMaWJyYXJ5IFNjcmlwdCcpOwoKbXlsaWIuYWRkKDEpOwpteWxpYi5sb2dUb3RhbChsb2dnZXIpOwpteWxpYi5hZGQoMyk7Cm15bGliLmxvZ1RvdGFsV2l0aE1lc3NhZ2UobG9nZ2VyLCBteWxpYi5NU0cpOwoKb3V0Y29tZSA9ICd0cnVlJzs=",
  },
  {
    "_id": "77e87451-bde9-40c0-84b1-02d4c97687f2",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "null",
    "evaluatorVersion": "1.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "takeFavouriteFactor.js",
    "script": "ZnVuY3Rpb24gZ2V0Q3VzdG9tQXR0clZhbHVlIChjdXN0b21BdHRyTmFtZSkKewogIHZhciBpZCA9IHNoYXJlZFN0YXRlLmdldCgnX2lkJyk7CiAgdmFyIGZySWRtQ3VzdG9tQXR0cmlidXRlcyA9IGlkUmVwb3NpdG9yeS5nZXRBdHRyaWJ1dGUoaWQsICdmci1pZG0tY3VzdG9tLWF0dHJzJyk7CiAgaWYgKGZySWRtQ3VzdG9tQXR0cmlidXRlcykKICB7CiAgICAgIHZhciBmcklkbUN1c3RvbUF0dHJpYnV0ZXNPYmplY3QgPSBKU09OLnBhcnNlKFN0cmluZyhmcklkbUN1c3RvbUF0dHJpYnV0ZXMudG9BcnJheSgpWzBdKSk7CiAgICAgICAgcmV0dXJuIGZySWRtQ3VzdG9tQXR0cmlidXRlc09iamVjdFtjdXN0b21BdHRyTmFtZV07CiAgfQp9Cgp2YXIgZmF2RmFjdG9yID0gZ2V0Q3VzdG9tQXR0clZhbHVlKCJjdXN0b21fZmF2b3VyaXRlRmFjdG9yIik7Cm91dGNvbWUgPSBmYXZGYWN0b3I7",
  },
  {
    "_id": "39c08084-1238-43e8-857f-2e11005eac49",
    "context": "OAUTH2_ACCESS_TOKEN_MODIFICATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Default alpha realm script for OAuth2 Access Token Modification",
    "evaluatorVersion": "1.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Alpha OAuth2 Access Token Modification Script",
    "script": "",
  },
  {
    "_id": "6b3cfd48-62d3-48ff-a96f-fe8f3a22ab30",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Normalizes raw profile data from Amazon",
    "evaluatorVersion": "1.0",
    "language": "GROOVY",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Amazon Profile Normalization",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjAgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLmZpZWxkCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5qc29uCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5vYmplY3QKCnJldHVybiBqc29uKG9iamVjdCgKICAgICAgICBmaWVsZCgiaWQiLCByYXdQcm9maWxlLnVzZXJfaWQpLAogICAgICAgIGZpZWxkKCJkaXNwbGF5TmFtZSIsIHJhd1Byb2ZpbGUubmFtZSksCiAgICAgICAgZmllbGQoImVtYWlsIiwgcmF3UHJvZmlsZS5lbWFpbCksCiAgICAgICAgZmllbGQoInVzZXJuYW1lIiwgcmF3UHJvZmlsZS5lbWFpbCkpKQ==",
  },
  {
    "_id": "424da748-82cc-4b54-be6f-82bd64d82a74",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Normalizes raw profile data from Yahoo",
    "evaluatorVersion": "1.0",
    "language": "GROOVY",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Yahoo Profile Normalization",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjAgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLmZpZWxkCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5qc29uCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5vYmplY3QKCnJldHVybiBqc29uKG9iamVjdCgKICAgICAgICBmaWVsZCgiaWQiLCByYXdQcm9maWxlLnN1YiksCiAgICAgICAgZmllbGQoImRpc3BsYXlOYW1lIiwgcmF3UHJvZmlsZS5uYW1lKSwKICAgICAgICBmaWVsZCgiZ2l2ZW5OYW1lIiwgcmF3UHJvZmlsZS5naXZlbl9uYW1lKSwKICAgICAgICBmaWVsZCgiZmFtaWx5TmFtZSIsIHJhd1Byb2ZpbGUuZmFtaWx5X25hbWUpLAogICAgICAgIGZpZWxkKCJwaG90b1VybCIsIHJhd1Byb2ZpbGUucGljdHVyZSksCiAgICAgICAgZmllbGQoImVtYWlsIiwgcmF3UHJvZmlsZS5lbWFpbCksCiAgICAgICAgZmllbGQoInVzZXJuYW1lIiwgcmF3UHJvZmlsZS5lbWFpbCksCiAgICAgICAgZmllbGQoImxvY2FsZSIsIHJhd1Byb2ZpbGUubG9jYWxlKSkp",
  },
  {
    "_id": "da56fe60-8b38-4c46-a405-d6b306d4b336",
    "context": "OAUTH2_EVALUATE_SCOPE",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Default global script for OAuth2 Scope Evaluation",
    "evaluatorVersion": "1.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "OAuth2 Evaluate Scope Script",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjEgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKLyoKICogVGhpcyBzY3JpcHQgbGV0cyB5b3UgcG9wdWxhdGUgdGhlIHNjb3BlcyB3aXRoIHByb2ZpbGUgYXR0cmlidXRlIHZhbHVlcyB3aGVuIHRoZSB0b2tlbmluZm8gZW5kcG9pbnQgaXMgY2FsbGVkLgogKiBGb3IgZXhhbXBsZSwgaWYgb25lIG9mIHRoZSBzY29wZXMgaXMgbWFpbCwgQU0gc2V0cyBtYWlsIHRvIHRoZSByZXNvdXJjZSBvd25lcidzIGVtYWlsIGFkZHJlc3MgaW4gdGhlIHRva2VuIGluZm9ybWF0aW9uIHJldHVybmVkLgogKgogKiBEZWZpbmVkIHZhcmlhYmxlczoKICogYWNjZXNzVG9rZW4gLSBBY2Nlc3NUb2tlbiAoMSkuCiAqICAgICAgICAgICAgICAgVGhlIGFjY2VzcyB0b2tlbiB0byBiZSB1cGRhdGVkLgogKiAgICAgICAgICAgICAgIE11dGFibGUgb2JqZWN0LCBhbGwgY2hhbmdlcyB0byB0aGUgYWNjZXNzIHRva2VuIHdpbGwgYmUgcmVmbGVjdGVkLgogKiBpZGVudGl0eSAtIEFNSWRlbnRpdHkgKDIpLgogKiAgICAgICAgICAgIFRoZSBjbGllbnQncyBpZGVudGl0eSBpZiBwcmVzZW50IG9yIHRoZSByZXNvdXJjZSBvd25lcidzIGlkZW50aXR5LiBDYW4gYmUgbnVsbC4KICogc2NyaXB0TmFtZSAtIFN0cmluZyAocHJpbWl0aXZlKS4KICogICAgICAgICAgICAgIEFsd2F5cyBwcmVzZW50LCB0aGUgZGlzcGxheSBuYW1lIG9mIHRoZSBzY3JpcHQuCiAqIGxvZ2dlciAtIEFsd2F5cyBwcmVzZW50LCB0aGUgZGVidWcgbG9nZ2VyIGluc3RhbmNlOgogKiAgICAgICAgICBodHRwczovL2JhY2tzdGFnZS5mb3JnZXJvY2suY29tL2RvY3MvYW0vNy9zY3JpcHRpbmctZ3VpZGUvc2NyaXB0aW5nLWFwaS1nbG9iYWwtbG9nZ2VyLmh0bWwjc2NyaXB0aW5nLWFwaS1nbG9iYWwtbG9nZ2VyLgogKiAgICAgICAgICBDb3JyZXNwb25kaW5nIGxvZyBmaWxlcyB3aWxsIGJlIHByZWZpeGVkIHdpdGg6IHNjcmlwdHMuT0FVVEgyX0VWQUxVQVRFX1NDT1BFCiAqIGh0dHBDbGllbnQgLSBIVFRQIENsaWVudCAoMykuCiAqICAgICAgICAgICAgICBBbHdheXMgcHJlc2VudCwgdGhlIEhUVFAgQ2xpZW50IGluc3RhbmNlOgogKiAgICAgICAgICAgICAgaHR0cHM6Ly9iYWNrc3RhZ2UuZm9yZ2Vyb2NrLmNvbS9kb2NzL2FtLzcvc2NyaXB0aW5nLWd1aWRlL3NjcmlwdGluZy1hcGktZ2xvYmFsLWh0dHAtY2xpZW50Lmh0bWwjc2NyaXB0aW5nLWFwaS1nbG9iYWwtaHR0cC1jbGllbnQuCiAqCiAqIFJldHVybiAtIGEgTWFwPFN0cmluZywgT2JqZWN0PiBvZiB0aGUgYWNjZXNzIHRva2VuJ3MgaW5mb3JtYXRpb24gKDQpLgogKgogKiBDbGFzcyByZWZlcmVuY2U6CiAqICgxKSBBY2Nlc3NUb2tlbiAtIGh0dHBzOi8vYmFja3N0YWdlLmZvcmdlcm9jay5jb20vZG9jcy9hbS83L2FwaWRvY3Mvb3JnL2Zvcmdlcm9jay9vYXV0aDIvY29yZS9BY2Nlc3NUb2tlbi5odG1sLgogKiAoMikgQU1JZGVudGl0eSAtIGh0dHBzOi8vYmFja3N0YWdlLmZvcmdlcm9jay5jb20vZG9jcy9hbS83L2FwaWRvY3MvY29tL3N1bi9pZGVudGl0eS9pZG0vQU1JZGVudGl0eS5odG1sLgogKiAoMykgQ2xpZW50IC0gaHR0cHM6Ly9iYWNrc3RhZ2UuZm9yZ2Vyb2NrLmNvbS9kb2NzL2FtLzcvYXBpZG9jcy9vcmcvZm9yZ2Vyb2NrL2h0dHAvQ2xpZW50Lmh0bWwuCiAqICg0KSBNYXAgLSBodHRwczovL2RvY3Mub3JhY2xlLmNvbS9lbi9qYXZhL2phdmFzZS8xMS9kb2NzL2FwaS9qYXZhLmJhc2UvamF2YS91dGlsL0hhc2hNYXAuaHRtbC4KICovCgovKioKICogRGVmYXVsdCBldmFsdWF0ZSBzY29wZSBzY3JpcHQgdG8gdXNlIGFzIGEgdGVtcGxhdGUgZm9yIG5ldyBzY3JpcHRzLgogKi8KCihmdW5jdGlvbiAoKSB7CiAgICB2YXIgbWFwID0gbmV3IGphdmEudXRpbC5IYXNoTWFwKCk7CiAgICBpZiAoaWRlbnRpdHkgIT09IG51bGwpIHsKICAgICAgICB2YXIgc2NvcGVzID0gYWNjZXNzVG9rZW4uZ2V0U2NvcGUoKS50b0FycmF5KCk7CiAgICAgICAgc2NvcGVzLmZvckVhY2goZnVuY3Rpb24gKHNjb3BlKSB7CiAgICAgICAgICAgIHZhciBhdHRyaWJ1dGVzID0gaWRlbnRpdHkuZ2V0QXR0cmlidXRlKHNjb3BlKS50b0FycmF5KCk7CiAgICAgICAgICAgIG1hcC5wdXQoc2NvcGUsIGF0dHJpYnV0ZXMuam9pbigiLCIpKTsKICAgICAgICB9KTsKICAgIH0gZWxzZSB7CiAgICAgICAgbG9nZ2VyLmVycm9yKCdpZGVudGl0eSBpcyBudWxsJyk7CiAgICB9CiAgICByZXR1cm4gbWFwOwp9KCkpOw==",
  },
  {
    "_id": "41c24257-d7fc-4654-8b46-c2666dc5b56d",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "set per level shared state variable",
    "evaluatorVersion": "1.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "level",
    "script": "KGZ1bmN0aW9uICgpIHsKICBvdXRjb21lID0gJ3RydWUnOwogIHZhciBsZXZlbCA9IG5vZGVTdGF0ZS5nZXQoJ2xldmVsJykuYXNJbnRlZ2VyKCk7CiAgc2hhcmVkU3RhdGUucHV0KCdsZXZlbCcgKyBsZXZlbCArICdWYWx1ZScsICdMZXZlbCAnICsgbGV2ZWwgKyAnOiBUaGlzIGlzIGEgbG9uZ2VyIHN0cmluZyB2YWx1ZSBzZXQgYXQgZWFjaCBsZXZlbCBvZiB0aGUgbmVzdGVkIGpvdXJuZXlzLiBJdCBjb250YWlucyBhbiBpbmRpY2F0b3IgaW4gd2hpY2ggbGV2ZWwgaXQgd2FzIHNldC4nKTsKfSgpKTs=",
  },
  {
    "_id": "403cf226-6051-4368-8b72-9ba14f9a5140",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Normalizes raw profile data from VKontakte",
    "evaluatorVersion": "1.0",
    "language": "GROOVY",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "VKontakte Profile Normalization",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjAgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLmZpZWxkCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5qc29uCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5vYmplY3QKCnJldHVybiBqc29uKG9iamVjdCgKICAgICAgICBmaWVsZCgiaWQiLCByYXdQcm9maWxlLmlkKSwKICAgICAgICBmaWVsZCgiZGlzcGxheU5hbWUiLCByYXdQcm9maWxlLmZpcnN0X25hbWUpLAogICAgICAgIGZpZWxkKCJnaXZlbk5hbWUiLCByYXdQcm9maWxlLmZpcnN0X25hbWUpLAogICAgICAgIGZpZWxkKCJmYW1pbHlOYW1lIiwgcmF3UHJvZmlsZS5sYXN0X25hbWUpLAogICAgICAgIGZpZWxkKCJwaG90b1VybCIsIHJhd1Byb2ZpbGUucGhvdG9fNTApLAogICAgICAgIGZpZWxkKCJlbWFpbCIsIHJhd1Byb2ZpbGUuZW1haWwpLAogICAgICAgIGZpZWxkKCJ1c2VybmFtZSIsIHJhd1Byb2ZpbGUuZW1haWwpKSk=",
  },
  {
    "_id": "c4f22465-2368-4e27-8013-e6399974fd48",
    "context": "SAML2_IDP_ATTRIBUTE_MAPPER",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Default global script for SAML2 IDP Attribute Mapper",
    "evaluatorVersion": "1.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "SAML2 IDP Attribute Mapper Script",
    "script": "",
  },
  {
    "_id": "46074930-6a38-4e36-8985-1ed90b4bdb3b",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "null",
    "evaluatorVersion": "1.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "SaveLogin",
    "script": "dmFyIGZyID0gSmF2YUltcG9ydGVyKAogIG9yZy5mb3JnZXJvY2sub3BlbmFtLmF1dGgubm9kZS5hcGksCiAgY29tLnN1bi5pZGVudGl0eS5hdXRoZW50aWNhdGlvbi5jYWxsYmFja3MuU2NyaXB0VGV4dE91dHB1dENhbGxiYWNrCik7CndpdGggKGZyKSB7CiAgLy8gQ3JlYXRlIG5ldyBlbnRyeSB3aXRoIGRldmljZSBwcm9maWxlIGFuZCBkYXRlCiAgdmFyIHByb2ZpbGUgPSBzaGFyZWRTdGF0ZS5nZXQoImZvcmdlUm9jay5kZXZpY2UucHJvZmlsZSIpOwogIHZhciBkYXRlID0gRGF0ZS5ub3coKQogIHZhciBpZGVudGlmaWVyID0gcHJvZmlsZS5nZXQoImlkZW50aWZpZXIiKQogIHZhciBwbGF0Zm9ybSA9IHByb2ZpbGUuZ2V0KCJtZXRhZGF0YSIpLmdldCgicGxhdGZvcm0iKS5nZXQoInBsYXRmb3JtIikKICB2YXIgZGV2aWNlTmFtZSA9IHByb2ZpbGUuZ2V0KCJtZXRhZGF0YSIpLmdldCgicGxhdGZvcm0iKS5nZXQoImRldmljZU5hbWUiKQogIHZhciBsYXRpdHVkZSA9IHByb2ZpbGUuZ2V0KCJsb2NhdGlvbiIpLmdldCgibGF0aXR1ZGUiKQogIHZhciBsb25naXR1ZGUgPSBwcm9maWxlLmdldCgibG9jYXRpb24iKS5nZXQoImxvbmdpdHVkZSIpCiAgdmFyIHVzZXJBZ2VudCA9IHByb2ZpbGUuZ2V0KCJtZXRhZGF0YSIpLmdldCgiYnJvd3NlciIpLmdldCgidXNlckFnZW50Iik7CiAgdmFyIGJyb3dzZXIgPSAiIgogIAogIC8vIFdvcmsgb3V0IHdoaWNoIGJyb3dzZXIgdGhpcyBpcwogIGlmICh1c2VyQWdlbnQudG9VcHBlckNhc2UoKS5pbmRleE9mKCJGSVJFRk9YIikgPiAtMSkgewogICAgYnJvd3NlciA9ICJGaXJlZm94IjsKICB9IGVsc2UgaWYgKHVzZXJBZ2VudC50b1VwcGVyQ2FzZSgpLmluZGV4T2YoIkNIUk9NRSIpID4gLTEgJiYgdXNlckFnZW50LnRvVXBwZXJDYXNlKCkuaW5kZXhPZigiU0FGQVJJIikgPiAtMSkgewogICAgLy8gQ2hyb21lIGNhbiBzb21ldGltZXMgbGlzdCBDaHJvbWUgZm9sbG93ZWQgYnkgU2FmYXJpIGluIHVzZXJBZ2VudAogICAgaWYgKHVzZXJBZ2VudC50b1VwcGVyQ2FzZSgpLmluZGV4T2YoIkNIUk9NRSIpIDwgdXNlckFnZW50LnRvVXBwZXJDYXNlKCkuaW5kZXhPZigiU0FGQVJJIikpIHsKICAgICAgYnJvd3NlciA9ICJDaHJvbWUiOwogICAgfQogIH0gZWxzZSBpZiAodXNlckFnZW50LnRvVXBwZXJDYXNlKCkuaW5kZXhPZigiQ0hST01FIikgPiAtMSkgewogICAgYnJvd3NlciA9ICJDaHJvbWUiOwogIH0gZWxzZSBpZiAodXNlckFnZW50LnRvVXBwZXJDYXNlKCkuaW5kZXhPZigiU0FGQVJJIikgPiAtMSkgewogICAgYnJvd3NlciA9ICJTYWZhcmkiOwogIH0KICAKICB2YXIgZW50cnkgPSB7CiAgICAiZGF0ZSI6IERhdGUoKS50b1N0cmluZygpLAogICAgImxhc3RTZWxlY3RlZERhdGUiOiBkYXRlLAogICAgImRldmljZSI6IHsKICAgICAgImlkZW50aWZpZXIiOiBTdHJpbmcoaWRlbnRpZmllciksCiAgICAgICJtZXRhZGF0YSI6IHsKICAgICAgICAicGxhdGZvcm0iOiB7CiAgICAgICAgICAicGxhdGZvcm0iOiBTdHJpbmcocGxhdGZvcm0pLAogICAgICAgICAgImRldmljZU5hbWUiOiBTdHJpbmcoZGV2aWNlTmFtZSkKICAgICAgICB9LAogICAgICAgICJicm93c2VyIjogYnJvd3NlcgogICAgICB9CiAgICB9LAogICAgImxvY2F0aW9uIjogewogICAgICAibGF0aXR1ZGUiOiBTdHJpbmcobGF0aXR1ZGUpLAogICAgICAibG9uZ2l0dWRlIjogU3RyaW5nKGxvbmdpdHVkZSkKICAgIH0KICB9CiAgCiAgLy8gQWRkIGVudHJ5IHRvIG11bHRpIHZhbHVlCiAgdmFyIHVzZXJuYW1lID0gc2hhcmVkU3RhdGUuZ2V0KCJfaWQiKQogIHZhciBhdHRyaWJ1dGUgPSAiZnItYXR0ci1pbXVsdGkxIgogIGlkUmVwb3NpdG9yeS5hZGRBdHRyaWJ1dGUodXNlcm5hbWUsIGF0dHJpYnV0ZSwgSlNPTi5zdHJpbmdpZnkoZW50cnkpKTsKICAKICBvdXRjb21lID0gInRydWUiCn0=",
  },
  {
    "_id": "e1db8a0a-0329-4962-a5bf-ecffaca376ae",
    "context": "OIDC_CLAIMS",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Used by endUserUIClient",
    "evaluatorVersion": "1.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Alpha endUserUIClient OIDC Claims Script",
    "script": "",
  },
  {
    "_id": "5bbdaeff-ddee-44b9-b608-8d413d7d65a6",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Check if mode has already been set.",
    "evaluatorVersion": "1.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "mode",
    "script": "LyogbW9kZQogKgogKiBBdXRob3I6IHZvbGtlci5zY2hldWJlckBmb3JnZXJvY2suY29tCiAqIAogKiBDb2xsZWN0IG1vZGUgaWYgbm90IGFscmVhZHkgc2V0IGFuZCBzZXQgb3V0Y29tZSB0byBtb2RlLgogKiAKICogVGhpcyBzY3JpcHQgZG9lcyBub3QgbmVlZCB0byBiZSBwYXJhbWV0cml6ZWQuIEl0IHdpbGwgd29yayBwcm9wZXJseSBhcyBpcy4KICogCiAqIFRoZSBTY3JpcHRlZCBEZWNpc2lvbiBOb2RlIG5lZWRzIHRoZSBmb2xsb3dpbmcgb3V0Y29tZXMgZGVmaW5lZDoKICogLSAnc2hhcmVkIGFuZCBsZXZlbCcKICogLSAnc2hhcmVkIG9ubHknCiAqIC0gJ2xldmVsIG9ubHknCiAqIC0gJ25vbmUnCiAqLwooZnVuY3Rpb24gKCkgewogIHZhciBtb2RlID0gbm9kZVN0YXRlLmdldCgnbW9kZScpOwogIGlmIChtb2RlKSB7CiAgICBvdXRjb21lID0gbW9kZS5hc1N0cmluZygpOwogICAgdmFyIGxldmVsID0gbm9kZVN0YXRlLmdldCgnbGV2ZWwnKS5hc0ludGVnZXIoKSArIDE7CiAgICBsb2dnZXIuZXJyb3IoJ21vZGU6IG1vZGU9JyArIG1vZGUuYXNTdHJpbmcoKSArICcsIGxldmVsPScgKyBsZXZlbCk7CiAgICBzaGFyZWRTdGF0ZS5wdXQoJ2xldmVsJywgbGV2ZWwpOwogIH0KICBlbHNlIHsKICAgIHZhciBjaG9pY2VzID0gWydzaGFyZWQgYW5kIGxldmVsJywgJ3NoYXJlZCBvbmx5JywgJ2xldmVsIG9ubHknLCAnbm9uZSddOwogIAogICAgdmFyIGZyID0gSmF2YUltcG9ydGVyKAogICAgICBvcmcuZm9yZ2Vyb2NrLm9wZW5hbS5hdXRoLm5vZGUuYXBpLkFjdGlvbiwKICAgICAgamF2YXguc2VjdXJpdHkuYXV0aC5jYWxsYmFjay5DaG9pY2VDYWxsYmFjawogICAgKQoKICAgIGlmIChjYWxsYmFja3MuaXNFbXB0eSgpKSB7CiAgICAgIGFjdGlvbiA9IGZyLkFjdGlvbi5zZW5kKFsKICAgICAgICBuZXcgZnIuQ2hvaWNlQ2FsbGJhY2soJ0Nob29zZSB0ZXN0IG1vZGUnLCBjaG9pY2VzLCAwLCBmYWxzZSkKICAgICAgXSkuYnVpbGQoKTsKICAgIH0gZWxzZSB7CiAgICAgIHZhciBjaG9pY2UgPSBwYXJzZUludChjYWxsYmFja3MuZ2V0KDApLmdldFNlbGVjdGVkSW5kZXhlcygpWzBdKTsKICAgICAgbm9kZVN0YXRlLnB1dFNoYXJlZCgnbW9kZScsIGNob2ljZXNbY2hvaWNlXSk7CiAgICAgIG5vZGVTdGF0ZS5wdXRTaGFyZWQoJ2xldmVsJywgMCk7CiAgICAgIGFjdGlvbiA9IGZyLkFjdGlvbi5nb1RvKGNob2ljZXNbY2hvaWNlXSkuYnVpbGQoKTsKICAgIH0KICB9Cn0oKSk7",
  },
  {
    "_id": "743351b3-001a-4ec8-b3ac-a674ddb8de22",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Enrich user session with UOP class ID.",
    "evaluatorVersion": "1.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "UOP Enrich Session",
    "script": "LyogVU9QIEVucmljaCBTZXNzaW9uCiAqCiAqIEF1dGhvcjogdm9sa2VyLnNjaGV1YmVyQGZvcmdlcm9jay5jb20KICogCiAqIEFkZCBjdXJyZW50IGNsYXNzIElEIHRvIHVzZXIgc2Vzc2lvbi4KICogCiAqIFRoaXMgc2NyaXB0IGRvZXMgbm90IG5lZWQgdG8gYmUgcGFyYW1ldHJpemVkLiBJdCB3aWxsIHdvcmsgcHJvcGVybHkgYXMgaXMuIAogKiBJdCByZXF1aXJlcyB0aGUgSWRlbnRpZnkgRXhpc3RpbmcgVXNlciBub2RlIGJlZm9yZSBpdCBpcyBiZWluZyBjYWxsZWQuCiAqIAogKiBUaGUgU2NyaXB0ZWQgRGVjaXNpb24gTm9kZSBuZWVkcyB0aGUgZm9sbG93aW5nIG91dGNvbWVzIGRlZmluZWQ6CiAqIC0gdHJ1ZQogKiAtIGZhbHNlCiAqLwpsb2dnZXIud2FybmluZygiVU9QIEVucmljaCBTZXNzaW9uOiBzdGFydCIpOwpvdXRjb21lID0gImZhbHNlIjsKCmlmIChzaGFyZWRTdGF0ZS5nZXQoInVvcEN1cnJlbnRDbGFzc0lEIikpIHsKICAgIG91dGNvbWUgPSAidHJ1ZSI7CiAgICBsb2dnZXIud2FybmluZygiVU9QIEVucmljaCBTZXNzaW9uOiBnb2luZyB0byBlbnJpY2ggc2Vzc2lvbiB3aXRoIGNsYXNzIGlkOiAiLmNvbmNhdChzaGFyZWRTdGF0ZS5nZXQoInVvcEN1cnJlbnRDbGFzc0lEIikpKTsKICAKICAgIHZhciBmciA9IEphdmFJbXBvcnRlcigKICAgICAgb3JnLmZvcmdlcm9jay5vcGVuYW0uYXV0aC5ub2RlLmFwaQogICAgKTsKCiAgICB3aXRoIChmcikgewogICAgICAgIGxvZ2dlci53YXJuaW5nKCJVT1AgRW5yaWNoIFNlc3Npb246IEVuZCAob3V0Y29tZT0iLmNvbmNhdChvdXRjb21lKS5jb25jYXQoIikiKSk7CiAgICAgICAgYWN0aW9uID0gQWN0aW9uLmdvVG8ob3V0Y29tZSkucHV0U2Vzc2lvblByb3BlcnR5KCJVT1BDbGFzc0lEIiwgc2hhcmVkU3RhdGUuZ2V0KCJ1b3BDdXJyZW50Q2xhc3NJRCIpKS5idWlsZCgpOwogICAgfQogIAp9IGVsc2UgewogICAgbG9nZ2VyLmVycm9yKCJVT1AgRW5yaWNoIFNlc3Npb246IG5vIGNsYXNzZXMhIik7CiAgICBsb2dnZXIud2FybmluZygiVU9QIEVucmljaCBTZXNzaW9uOiBFbmQgKG91dGNvbWU9Ii5jb25jYXQob3V0Y29tZSkuY29uY2F0KCIpIikpOwp9",
  },
  {
    "_id": "85523e71-2d77-4577-b078-6f9674cc54e2",
    "context": "SAML2_IDP_ADAPTER",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Always redirect browser pre-auth",
    "evaluatorVersion": "1.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Saml2 IDP Adapter Always Auth",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjEtMjAyMiBGb3JnZVJvY2sgQVMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQKICoKICogVXNlIG9mIHRoaXMgY29kZSByZXF1aXJlcyBhIGNvbW1lcmNpYWwgc29mdHdhcmUgbGljZW5zZSB3aXRoIEZvcmdlUm9jayBBUy4KICogb3Igd2l0aCBvbmUgb2YgaXRzIGFmZmlsaWF0ZXMuIEFsbCB1c2Ugc2hhbGwgYmUgZXhjbHVzaXZlbHkgc3ViamVjdAogKiB0byBzdWNoIGxpY2Vuc2UgYmV0d2VlbiB0aGUgbGljZW5zZWUgYW5kIEZvcmdlUm9jayBBUy4KICovCgovKgogKiBUaGUgc2NyaXB0IGhhcyB0aGVzZSB0b3AgbGV2ZWwgZnVuY3Rpb25zIHRoYXQgY291bGQgYmUgZXhlY3V0ZWQgZHVyaW5nIGEgU0FNTDIgZmxvdy4KICogICAgICAtIHByZVNpbmdsZVNpZ25PbgogKiAgICAgIC0gcHJlQXV0aGVudGljYXRpb24KICogICAgICAtIHByZVNlbmRSZXNwb25zZQogKiAgICAgIC0gcHJlU2lnblJlc3BvbnNlCiAqICAgICAgLSBwcmVTZW5kRmFpbHVyZVJlc3BvbnNlCiAqCiAqIFBsZWFzZSBzZWUgdGhlIGphdmFkb2MgZm9yIHRoZSBpbnRlcmZhY2UgZGVmaW5pdGlvbiBhbmQgbW9yZSBpbmZvcm1hdGlvbiBhYm91dCB0aGVzZSBtZXRob2RzLgogKiBodHRwczovL2JhY2tzdGFnZS5mb3JnZXJvY2suY29tL2RvY3MvYW0vNy4yL2FwaWRvY3MvY29tL3N1bi9pZGVudGl0eS9zYW1sMi9wbHVnaW5zL1NBTUwySWRlbnRpdHlQcm92aWRlckFkYXB0ZXIuaHRtbAogKiBOb3RlIHRoYXQgdGhlIGluaXRpYWxpemUgbWV0aG9kIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhlIHNjcmlwdHMuCiAqCiAqIERlZmluZWQgdmFyaWFibGVzLiBDaGVjayB0aGUgZG9jdW1lbnRhdGlvbiBvbiB0aGUgcmVzcGVjdGl2ZSBmdW5jdGlvbnMgZm9yIHRoZSB2YXJpYWJsZXMgYXZhaWxhYmxlIHRvIGl0LgogKgogKiBob3N0ZWRFbnRpdHlJZCAtIFN0cmluZwogKiAgICAgRW50aXR5IElEIGZvciB0aGUgaG9zdGVkIElEUAogKiByZWFsbSAtIFN0cmluZwogKiAgICAgUmVhbG0gb2YgdGhlIGhvc3RlZCBJRFAKICogaWRwQWRhcHRlclNjcmlwdEhlbHBlciAtIElkcEFkYXB0ZXJTY3JpcHRIZWxwZXIgKDEpCiAqICAgICBBbiBpbnN0YW5jZSBvZiBJZHBBZGFwdGVyU2NyaXB0SGVscGVyIGNvbnRhaW5pbmcgaGVscGVyIG1ldGhvZHMuIFNlZSBKYXZhZG9jIGZvciBtb3JlIGRldGFpbHMuCiAqIHJlcXVlc3QgLSBIdHRwU2VydmxldFJlcXVlc3QgKDIpCiAqICAgICBTZXJ2bGV0IHJlcXVlc3Qgb2JqZWN0CiAqIHJlc3BvbnNlIC0gSHR0cFNlcnZsZXRSZXNwb25zZSAoMykKICogICAgIFNlcnZsZXQgcmVzcG9uc2Ugb2JqZWN0CiAqIGF1dGhuUmVxdWVzdCAtIEF1dGhuUmVxdWVzdCAoNCkKICogICAgIFRoZSBvcmlnaW5hbCBhdXRoZW50aWNhdGlvbiByZXF1ZXN0IHNlbnQgZnJvbSBTUAogKiByZXFJZCAtIFN0cmluZwogKiAgICAgVGhlIGlkIHRvIHVzZSBmb3IgY29udGludWF0aW9uIG9mIHByb2Nlc3NpbmcgaWYgdGhlIGFkYXB0ZXIgcmVkaXJlY3RzCiAqIHJlcyAtIFJlc3BvbnNlICg1KQogKiAgICAgVGhlIFNBTUwgUmVzcG9uc2UKICogc2Vzc2lvbiAtIFNTT1Rva2VuICg2KQogKiAgICAgVGhlIHNpbmdsZSBzaWduLW9uIHNlc3Npb24uIFRoZSByZWZlcmVuY2UgdHlwZSBvZiB0aGlzIGlzIE9iamVjdCBhbmQgd291bGQgbmVlZCB0byBiZSBjYXN0ZWQgdG8gU1NPVG9rZW4uCiAqIHJlbGF5U3RhdGUgLSBTdHJpbmcKICogICAgIFRoZSByZWxheVN0YXRlIHRoYXQgd2lsbCBiZSB1c2VkIGluIHRoZSByZWRpcmVjdAogKiBmYXVsdENvZGUgLSBTdHJpbmcKICogICAgIHRoZSBmYXVsdCBjb2RlIHRoYXQgd2lsbCBiZSByZXR1cm5lZCBpbiB0aGUgU0FNTCByZXNwb25zZQogKiBmYXVsdERldGFpbCAtIFN0cmluZwogKiAgICAgdGhlIGZhdWx0IGRldGFpbCB0aGF0IHdpbGwgYmUgcmV0dXJuZWQgaW4gdGhlIFNBTUwgcmVzcG9uc2UKICogbG9nZ2VyIC0gTG9nZ2VyIGluc3RhbmNlCiAqICAgICBodHRwczovL2JhY2tzdGFnZS5mb3JnZXJvY2suY29tL2RvY3MvYW0vNy9zY3JpcHRpbmctZ3VpZGUvc2NyaXB0aW5nLWFwaS1nbG9iYWwtbG9nZ2VyLmh0bWwjc2NyaXB0aW5nLWFwaS1nbG9iYWwtbG9nZ2VyLgogKiAgICAgQ29ycmVzcG9uZGluZyBsb2cgZmlsZXMgd2lsbCBiZSBwcmVmaXhlZCB3aXRoOiBzY3JpcHRzLjxzY3JpcHQgbmFtZT4KICoKICogVGhyb3dzIFNBTUwyRXhjZXB0aW9uICg3KToKICogICAgIGZvciBhbnkgZXhjZXB0aW9ucyBvY2N1cnJpbmcgaW4gdGhlIGFkYXB0ZXIuIFRoZSBmZWRlcmF0aW9uIHByb2Nlc3Mgd2lsbCBjb250aW51ZQogKgogKiBDbGFzcyByZWZlcmVuY2U6CiAqICgxKSBpZHBBZGFwdGVyU2NyaXB0SGVscGVyIC0gaHR0cHM6Ly9iYWNrc3RhZ2UuZm9yZ2Vyb2NrLmNvbS9kb2NzL2FtLzcuMi9hcGlkb2NzL2NvbS9zdW4vaWRlbnRpdHkvc2FtbDIvcGx1Z2lucy9zY3JpcHRlZC9JZHBBZGFwdGVyU2NyaXB0SGVscGVyLmh0bWwuCiAqICgyKSBIdHRwU2VydmxldFJlcXVlc3QgLSBodHRwczovL3RvbWNhdC5hcGFjaGUub3JnL3RvbWNhdC03LjAtZG9jL3NlcnZsZXRhcGkvamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVxdWVzdC5odG1sLgogKiAoMykgSHR0cFNlcnZsZXRSZXNwb25zZSAtIGh0dHBzOi8vdG9tY2F0LmFwYWNoZS5vcmcvdG9tY2F0LTcuMC1kb2Mvc2VydmxldGFwaS9qYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXNwb25zZS5odG1sLgogKiAoNCkgQXV0aG5SZXF1ZXN0IC0gaHR0cHM6Ly9iYWNrc3RhZ2UuZm9yZ2Vyb2NrLmNvbS9kb2NzL2FtLzcuMi9hcGlkb2NzL2NvbS9zdW4vaWRlbnRpdHkvc2FtbDIvcHJvdG9jb2wvQXV0aG5SZXF1ZXN0Lmh0bWwuCiAqICg1KSBSZXNwb25zZSAtIGh0dHBzOi8vYmFja3N0YWdlLmZvcmdlcm9jay5jb20vZG9jcy9hbS83LjIvYXBpZG9jcy9jb20vc3VuL2lkZW50aXR5L3NhbWwyL3Byb3RvY29sL1Jlc3BvbnNlLmh0bWwuCiAqICg2KSBTU09Ub2tlbiAtIGh0dHBzOi8vYmFja3N0YWdlLmZvcmdlcm9jay5jb20vZG9jcy9hbS83LjIvYXBpZG9jcy9jb20vaXBsYW5ldC9zc28vU1NPVG9rZW4uaHRtbC4KICogKDcpIFNBTUwyRXhjZXB0aW9uIC0gaHR0cHM6Ly9iYWNrc3RhZ2UuZm9yZ2Vyb2NrLmNvbS9kb2NzL2FtLzcuMi9hcGlkb2NzL2NvbS9zdW4vaWRlbnRpdHkvc2FtbDIvY29tbW9uL1NBTUwyRXhjZXB0aW9uLmh0bWwuCiAqLwoKLyoKICogVGVtcGxhdGUvZGVmYXVsdCBzY3JpcHQgZm9yIFNBTUwyIElEUCBBZGFwdGVyIHNjcmlwdGVkIHBsdWdpbi4KICovCgovKgogKiBBdmFpbGFibGUgdmFyaWFibGVzIGZvciBwcmVTaW5nbGVTaWduT246CiAqICAgICBob3N0ZWRFbnRpdHlJZAogKiAgICAgcmVhbG0KICogICAgIGlkcEFkYXB0ZXJTY3JpcHRIZWxwZXIKICogICAgIHJlcXVlc3QKICogICAgIGF1dGhuUmVxdWVzdAogKiAgICAgcmVzcG9uc2UKICogICAgIHJlcUlkCiAqICAgICBsb2dnZXIKICoKICogUmV0dXJuIC0gdHJ1ZSBpZiBicm93c2VyIHJlZGlyZWN0aW9uIGlzIGhhcHBlbmluZyBhZnRlciBwcm9jZXNzaW5nLCBmYWxzZSBvdGhlcndpc2UuIERlZmF1bHQgdG8gZmFsc2UuCiAqLwpmdW5jdGlvbiBwcmVTaW5nbGVTaWduT24gKCkgewogICAgICBsb2dnZXIuZXJyb3IoIkNoaWNhZ286IHByZVNpbmdsZVNpZ25PbiIpOwogICAgcmV0dXJuIHRydWU7Cn0KCi8qCiAqIEF2YWlsYWJsZSB2YXJpYWJsZXMgZm9yIHByZUF1dGhlbnRpY2F0aW9uOgogKiAgICAgaG9zdGVkRW50aXR5SWQKICogICAgIHJlYWxtCiAqICAgICBpZHBBZGFwdGVyU2NyaXB0SGVscGVyCiAqICAgICByZXF1ZXN0CiAqICAgICBhdXRoblJlcXVlc3QKICogICAgIHJlc3BvbnNlCiAqICAgICByZXFJZAogKiAgICAgc2Vzc2lvbgogKiAgICAgcmVsYXlTdGF0ZQogKiAgICAgbG9nZ2VyCiAqCiAqIFJldHVybiAtIHRydWUgaWYgYnJvd3NlciByZWRpcmVjdGlvbiBpcyBoYXBwZW5pbmcgYWZ0ZXIgcHJvY2Vzc2luZywgZmFsc2Ugb3RoZXJ3aXNlLiBEZWZhdWx0IHRvIGZhbHNlLgogKi8KZnVuY3Rpb24gcHJlQXV0aGVudGljYXRpb24gKCkgewogICAgICBsb2dnZXIuZXJyb3IoIkNoaWNhZ286IHByZUF1dGhlbnRpY2F0aW9uIik7CiAgICByZXR1cm4gdHJ1ZTsKfQoKLyoKICogQXZhaWxhYmxlIHZhcmlhYmxlcyBmb3IgcHJlU2VuZFJlc3BvbnNlOgogKiAgICAgaG9zdGVkRW50aXR5SWQKICogICAgIHJlYWxtCiAqICAgICBpZHBBZGFwdGVyU2NyaXB0SGVscGVyCiAqICAgICByZXF1ZXN0CiAqICAgICBhdXRoblJlcXVlc3QKICogICAgIHJlc3BvbnNlCiAqICAgICByZXFJZAogKiAgICAgc2Vzc2lvbgogKiAgICAgcmVsYXlTdGF0ZQogKiAgICAgbG9nZ2VyCiAqCiAqIFJldHVybiAtIHRydWUgaWYgYnJvd3NlciByZWRpcmVjdGlvbiBoYXBwZW5lZCBhZnRlciBwcm9jZXNzaW5nLCBmYWxzZSBvdGhlcndpc2UuIERlZmF1bHQgdG8gZmFsc2UuCiAqLwpmdW5jdGlvbiBwcmVTZW5kUmVzcG9uc2UgKCkgewogICAgICBsb2dnZXIuZXJyb3IoIkNoaWNhZ286IHByZVNlbmRSZXNwb25zZSIpOwogICAgICBsb2dnZXIuZXJyb3IoIkNoaWNhZ286IGF1dGhuUmVxdWVzdDogIithdXRoblJlcXVlc3QpOwogICAgICByZXNwb25zZS5zZW5kUmVkaXJlY3QoImh0dHBzOi8vaWRjLnNjaGV1YmVyLmlvL2FtL1hVSS8/cmVhbG09YWxwaGEmYXV0aEluZGV4VHlwZT1zZXJ2aWNlJmF1dGhJbmRleFZhbHVlPURpc3BhdGNoZXImRm9yY2VBdXRoPXRydWUmZ290bz0iK3JlbGF5U3RhdGUpOwogICAgcmV0dXJuIHRydWU7Cn0KCi8qCiAqIEF2YWlsYWJsZSB2YXJpYWJsZXMgZm9yIHByZVNpZ25SZXNwb25zZToKICogICAgIGhvc3RlZEVudGl0eUlkCiAqICAgICByZWFsbQogKiAgICAgaWRwQWRhcHRlclNjcmlwdEhlbHBlcgogKiAgICAgcmVxdWVzdAogKiAgICAgYXV0aG5SZXF1ZXN0CiAqICAgICBzZXNzaW9uCiAqICAgICByZWxheVN0YXRlCiAqICAgICByZXMKICogICAgIGxvZ2dlcgogKi8KZnVuY3Rpb24gcHJlU2lnblJlc3BvbnNlICgpIHsKICAgICAgbG9nZ2VyLmVycm9yKCJDaGljYWdvOiBwcmVTaWduUmVzcG9uc2UiKTsKfQoKLyoKICogQXZhaWxhYmxlIHZhcmlhYmxlcyBmb3IgcHJlU2VuZEZhaWx1cmVSZXNwb25zZToKICogICAgIGhvc3RlZEVudGl0eUlkCiAqICAgICByZWFsbQogKiAgICAgaWRwQWRhcHRlclNjcmlwdEhlbHBlcgogKiAgICAgcmVxdWVzdAogKiAgICAgcmVzcG9uc2UKICogICAgIGZhdWx0Q29kZQogKiAgICAgZmF1bHREZXRhaWwKICogICAgIGxvZ2dlcgogKi8KZnVuY3Rpb24gcHJlU2VuZEZhaWx1cmVSZXNwb25zZSAoKSB7CiAgICAgIGxvZ2dlci5lcnJvcigiQ2hpY2FnbzogcHJlU2VuZEZhaWx1cmVSZXNwb25zZSIpOwp9",
  },
  {
    "_id": "e5c302c8-f838-4698-87cc-d7225fc82454",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "null",
    "evaluatorVersion": "1.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "EmailAsUsername",
    "script": "b2JqZWN0QXR0cmlidXRlcyA9IHNoYXJlZFN0YXRlLmdldCgib2JqZWN0QXR0cmlidXRlcyIpCnVzZXJOYW1lID0gb2JqZWN0QXR0cmlidXRlcy5nZXQoInVzZXJOYW1lIikKCmlmKHVzZXJOYW1lKXsKICAvL0Zvcm0gRmlsbAogIG9iamVjdEF0dHJpYnV0ZXMucHV0KCJtYWlsIiwgdXNlck5hbWUpCn0gZWxzZSB7CiAgLy9Tb2NpYWwKICBvYmplY3RBdHRyaWJ1dGVzLnB1dCgidXNlck5hbWUiLCBvYmplY3RBdHRyaWJ1dGVzLmdldCgibWFpbCIpKQp9CgoKc2hhcmVkU3RhdGUucHV0KCJvYmplY3RBdHRyaWJ1dGVzIiwgb2JqZWN0QXR0cmlidXRlcyk7Ci8vc2hhcmVkU3RhdGUucHV0KCJ1c2VybmFtZSIsIG1haWwpCgpvdXRjb21lID0gInRydWUiOw==",
  },
  {
    "_id": "223739f3-9c54-43b7-9572-3c5338786145",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "null",
    "evaluatorVersion": "1.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Format Username",
    "script": "dmFyIHVzZXJuYW1lID0gc2hhcmVkU3RhdGUuZ2V0KCJ1c2VybmFtZSIpOwoKc2hhcmVkU3RhdGUucHV0KCJkaXNwbGF5TmFtZSIsIHVzZXJuYW1lKTsKb3V0Y29tZSA9ICJjb250aW51ZSI7",
  },
  {
    "_id": "2c38c998-aec0-4e56-8d46-bff6e24a704e",
    "context": "LIBRARY",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "My Example Library",
    "evaluatorVersion": "2.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "My Example Library",
    "script": "dmFyIGkgPSAwOwoKZnVuY3Rpb24gYWRkKGopIHtpICs9IGp9OwpmdW5jdGlvbiBsb2dUb3RhbChsb2cpIHsgbG9nLmluZm8oIlRvdGFsOiAiICsgaSkgfTsKCi8vIGV4cG9ydCBjb25zdGFudApleHBvcnRzLk1TRyA9ICdGaW5hbCBzdW0nOwoKLy8gZXhwb3J0IGZ1bmN0aW9ucwpleHBvcnRzLmFkZCA9IGFkZDsKZXhwb3J0cy5sb2dUb3RhbCA9IGxvZ1RvdGFsOwoKLy9kaXJlY3QgZXhwb3J0IHVzaW5nIGFuIGlubGluZSBkZWNsYXJhdGlvbgpleHBvcnRzLmxvZ1RvdGFsV2l0aE1lc3NhZ2UgPSAobG9nLCBtZXNzYWdlKSA9PiBsb2cuaW5mbyhtZXNzYWdlICsgIjogIiArIGkpOw==",
  },
  {
    "_id": "d030f9fb-6d2d-4f5a-834d-b4f6304b8eb9",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "null",
    "evaluatorVersion": "1.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Impossible Traveller",
    "script": "Ly8gR2VvVmVsb2NpdHkgLyBJbXBvc3NpYmxlIEpvdXJuZXkgYXV0aGVudGljYXRpb24gc2NyaXB0Ci8vCi8vIE91dGNvbWVzIGZvciB0aGlzIHNjcmlwdCBhcmU6Ci8vICAgICAibm9Mb2NhdGlvbiIgLSB0aGUgZGV2aWNlJ3MgY3VycmVudCBsb2NhdGlvbiBpcyBub3QgYXZhaWxhYmxlIGluIHNoYXJlZFN0YXRlCi8vICAgICAibm9IaXN0b3J5IiAgLSB0aGUgdXNlcidzIHByb2ZpbGUgZG9lc24ndCB5ZXQgY29udGFpbiBwcmV2aW91cyBkZXZpY2UgaGlzdG9yeQovLyAgICAgIm9rIiAgICAgICAgIC0gdGhlIHVzZXIncyBnZW92ZWxvY2l0eSBpcyBsb3dlciB0aGFuIHRoZSBtYXggYWNjZXB0YWJsZSBzcGVlZAovLyAgICAgICAiaW1wb3NzaWJsZSIgLSB0aGUgdXNlcidzIGdlb3ZlbG9jaXR5IGV4Y2VlZHMgbWF4IGFjY2VwdGFibGUgc3BlZWQKTUFYX1ZFTE9DSVRZPTMwMApmdW5jdGlvbiBjYWxjdWxhdGVEaXN0YW5jZShmaXJzdCwgc2Vjb25kKSB7CiAgICB2YXIgZmFjdG9yID0gKE1hdGguUEkgLyAxODApLAogICAgICAgIHRoZXRhLAogICAgICAgIGRpc3Q7CiAgICBmdW5jdGlvbiBkZWdyZWVzVG9SYWRpYW5zKGRlZ3JlZXMpIHsKICAgICAgICByZXR1cm4gZGVncmVlcyAqIGZhY3RvcjsKICAgIH0KICAgIGZ1bmN0aW9uIHJhZGlhbnNUb0RlZ3JlZXMocmFkaWFucykgewogICAgICAgIHJldHVybiByYWRpYW5zIC8gZmFjdG9yOwogICAgfQogICAgdGhldGEgPSBmaXJzdC5sb25naXR1ZGUgLSBzZWNvbmQubG9uZ2l0dWRlOwogICAgZGlzdCA9IE1hdGguc2luKGRlZ3JlZXNUb1JhZGlhbnMoZmlyc3QubGF0aXR1ZGUpKSAqIE1hdGguc2luKGRlZ3JlZXNUb1JhZGlhbnMoc2Vjb25kLmxhdGl0dWRlKSkgKwogICAgICAgIE1hdGguY29zKGRlZ3JlZXNUb1JhZGlhbnMoZmlyc3QubGF0aXR1ZGUpKSAqIE1hdGguY29zKGRlZ3JlZXNUb1JhZGlhbnMoc2Vjb25kLmxhdGl0dWRlKSkgKgogICAgICAgIE1hdGguY29zKGRlZ3JlZXNUb1JhZGlhbnModGhldGEpKTsKICAgIGRpc3QgPSBNYXRoLmFjb3MoZGlzdCk7CiAgICBkaXN0ID0gcmFkaWFuc1RvRGVncmVlcyhkaXN0KTsKICAgIGRpc3QgPSBkaXN0ICogNjAgKiAxLjE1MTU7CiAgICByZXR1cm4gZGlzdDsKfTsKdmFyIHVzZXJuYW1lID0gc2hhcmVkU3RhdGUuZ2V0KCJfaWQiKTsKLy9kZXZpY2VzID0gaWRSZXBvc2l0b3J5LmdldEF0dHJpYnV0ZSh1c2VybmFtZSwgImRldmljZVByb2ZpbGVzIikudG9BcnJheSgpOwpsb2dpbkhpc3RvcnkgPSBpZFJlcG9zaXRvcnkuZ2V0QXR0cmlidXRlKHVzZXJuYW1lLCAiZnItYXR0ci1pbXVsdGkxIikudG9BcnJheSgpOwppZiAobG9naW5IaXN0b3J5Lmxlbmd0aCA9PSAwKSBvdXRjb21lID0gIm5vSGlzdG9yeSI7CmVsc2UgewogICAgICBvdXRjb21lID0gIm5vTG9jYXRpb24iOwogICAgICBpZiAoc2hhcmVkU3RhdGUuY29udGFpbnNLZXkoImZvcmdlUm9jay5kZXZpY2UucHJvZmlsZSIpICYmIHNoYXJlZFN0YXRlLmdldCgiZm9yZ2VSb2NrLmRldmljZS5wcm9maWxlIikuY29udGFpbnNLZXkoImxvY2F0aW9uIikpIHsKICAgICAgICB2YXIgdGhpc0RldmljZSA9IHNoYXJlZFN0YXRlLmdldCgiZm9yZ2VSb2NrLmRldmljZS5wcm9maWxlIik7CiAgICAgICAgICBvdXRjb21lID0gIm9rIjsKICAgICAgICAgIHZhciBub3cgPSBuZXcgRGF0ZSgpCiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxvZ2luSGlzdG9yeS5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgIHZhciBlbnRyeSA9IEpTT04ucGFyc2UobG9naW5IaXN0b3J5W2ldKTsKICAgICAgICAgICAgICB2YXIgbGFzdFNlbGVjdGVkRGF0ZSA9IGVudHJ5WyJsYXN0U2VsZWN0ZWREYXRlIl07CiAgICAgICAgICAgICAgdmFyIGxhc3RMb2NhdGlvbiA9IGVudHJ5WyJsb2NhdGlvbiJdOwogICAgICAgICAgICAgIHZhciB0aW1lRGlmZiA9IG5vdyAtIHBhcnNlSW50KGxhc3RTZWxlY3RlZERhdGUpOwogICAgICAgICAgICB2YXIgZGlzdGFuY2UgPSBjYWxjdWxhdGVEaXN0YW5jZSh7ICJsYXRpdHVkZSI6IHRoaXNEZXZpY2UuZ2V0KCJsb2NhdGlvbiIpLmdldCgibGF0aXR1ZGUiKSwgImxvbmdpdHVkZSI6IHRoaXNEZXZpY2UuZ2V0KCJsb2NhdGlvbiIpLmdldCgibG9uZ2l0dWRlIikgfSwgbGFzdExvY2F0aW9uKTsKICAgICAgICAgICAgICB2ZWxvY2l0eSA9IGRpc3RhbmNlIC8gKHRpbWVEaWZmIC8gMzYwMDAwMCk7CiAgICAgICAgICAgICAgaWYgKHZlbG9jaXR5ID4gTUFYX1ZFTE9DSVRZKSBvdXRjb21lID0gImltcG9zc2libGUiOwogICAgICAgIH0KICAgIH0KfQ==",
  },
  {
    "_id": "cf3515f0-8278-4ee3-a530-1bad7424c416",
    "context": "OIDC_CLAIMS",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Default alpha realm script for OIDC claims",
    "evaluatorVersion": "1.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Alpha OIDC Claims Script",
    "script": "",
  },
  {
    "_id": "0ca79cb0-ea11-4e87-adac-7f8aeebc8c03",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "null",
    "evaluatorVersion": "1.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Save Mobile OATH Preference",
    "script": "dmFyIGZyID0gSmF2YUltcG9ydGVyKAogIG9yZy5mb3JnZXJvY2sub3BlbmFtLmF1dGgubm9kZS5hcGkKKTsKd2l0aCAoZnIpIHsKICAKICB2YXIgdXNlcm5hbWUgPSBzaGFyZWRTdGF0ZS5nZXQoIl9pZCIpCiAgdmFyIG1mYVByZWZBdHRyaWJ1dGUgPSAiZnItYXR0ci1pbXVsdGkyIgogIHZhciBtZmFUeXBlID0gIiI7CiAgCiAgaWRSZXBvc2l0b3J5LmFkZEF0dHJpYnV0ZSh1c2VybmFtZSwgbWZhUHJlZkF0dHJpYnV0ZSwgWyJvYXRoIl0pOwogIAogIG91dGNvbWUgPSAidHJ1ZSIKfQ==",
  },
  {
    "_id": "e3b1018f-1b2e-4e96-9950-087bdfa13d6d",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "null",
    "evaluatorVersion": "1.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Set New Favourite",
    "script": "ZnVuY3Rpb24gZ2V0Q3VzdG9tQXR0clZhbHVlIChjdXN0b21BdHRyTmFtZSkgewogIHZhciBpZCA9IHNoYXJlZFN0YXRlLmdldCgnX2lkJyk7CiAgdmFyIGZySWRtQ3VzdG9tQXR0cmlidXRlcyA9IGlkUmVwb3NpdG9yeS5nZXRBdHRyaWJ1dGUoaWQsICdmci1pZG0tY3VzdG9tLWF0dHJzJyk7CiAgaWYgKGZySWRtQ3VzdG9tQXR0cmlidXRlcykgewogICAgICB2YXIgZnJJZG1DdXN0b21BdHRyaWJ1dGVzT2JqZWN0ID0gSlNPTi5wYXJzZShTdHJpbmcoZnJJZG1DdXN0b21BdHRyaWJ1dGVzLnRvQXJyYXkoKVswXSkpOwogICAgICAgIHJldHVybiBmcklkbUN1c3RvbUF0dHJpYnV0ZXNPYmplY3RbY3VzdG9tQXR0ck5hbWVdOwogIH0KfQoKZnVuY3Rpb24gc2V0Q3VzdG9tQXR0clZhbHVlIChjdXN0b21BdHRyTmFtZSxjdXN0b21BdHRyVmFsdWUpIHsKICB2YXIgaWQgPSBzaGFyZWRTdGF0ZS5nZXQoJ19pZCcpOwogIHZhciBmcklkbUN1c3RvbUF0dHJpYnV0ZXMgPSBpZFJlcG9zaXRvcnkuZ2V0QXR0cmlidXRlKGlkLCAnZnItaWRtLWN1c3RvbS1hdHRycycpOwogIGlmIChmcklkbUN1c3RvbUF0dHJpYnV0ZXMpIHsKICAgIHZhciBmcklkbUN1c3RvbUF0dHJpYnV0ZXNPYmplY3QgPSBKU09OLnBhcnNlKFN0cmluZyhmcklkbUN1c3RvbUF0dHJpYnV0ZXMudG9BcnJheSgpWzBdKSk7CiAgICBmcklkbUN1c3RvbUF0dHJpYnV0ZXNPYmplY3RbY3VzdG9tQXR0ck5hbWVdID0gY3VzdG9tQXR0clZhbHVlOwogICAgdmFyIGpzb25fc3RyaW5nID0gSlNPTi5zdHJpbmdpZnkoZnJJZG1DdXN0b21BdHRyaWJ1dGVzT2JqZWN0KTsKICAgIGlkUmVwb3NpdG9yeS5zZXRBdHRyaWJ1dGUoaWQsICJmci1pZG0tY3VzdG9tLWF0dHJzIixbanNvbl9zdHJpbmddKTsKICB9Cn0KCnZhciBhdHRyID0gZ2V0Q3VzdG9tQXR0clZhbHVlKCJjdXN0b21fZmF2b3VyaXRlRmFjdG9yIik7CmlmICghYXR0cil7CnNldEN1c3RvbUF0dHJWYWx1ZSAoImN1c3RvbV9mYXZvdXJpdGVGYWN0b3IiLCJXZWJBdXRoTiIpOwp9CgoKCm91dGNvbWUgPSAidHJ1ZSI7Cg==",
  },
  {
    "_id": "25e6c06d-cf70-473b-bd28-26931edc476b",
    "context": "OAUTH2_VALIDATE_SCOPE",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Default global script for OAuth2 Scope Validation",
    "evaluatorVersion": "1.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "OAuth2 Validate Scope Script",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjEgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKLyoKICogVGhpcyBzY3JpcHQgdmFsaWRhdGVzIHRoZSByZXF1ZXN0ZWQgc2NvcGVzIGFnYWluc3QgdGhlIGFsbG93ZWQgc2NvcGVzLgogKiBJZiBubyBzY29wZXMgYXJlIHJlcXVlc3RlZCwgZGVmYXVsdCBzY29wZXMgYXJlIGFzc3VtZWQuCiAqIFRoZSBzY3JpcHQgaGFzIGZvdXIgdG9wIGxldmVsIGZ1bmN0aW9ucyB0aGF0IGNvdWxkIGJlIGV4ZWN1dGVkIGR1cmluZyB0aGUgZGlmZmVyZW50IE9BdXRoMiBmbG93czoKICogICAgICAtIHZhbGlkYXRlQXV0aG9yaXphdGlvblNjb3BlCiAqICAgICAgLSB2YWxpZGF0ZUFjY2Vzc1Rva2VuU2NvcGUKICogICAgICAtIHZhbGlkYXRlUmVmcmVzaFRva2VuU2NvcGUKICogICAgICAtIHZhbGlkYXRlQmFja0NoYW5uZWxBdXRob3JpemF0aW9uU2NvcGUKICoKICogRGVmaW5lZCB2YXJpYWJsZXM6CiAqIHJlcXVlc3RlZFNjb3BlcyAtIFNldDxTdHJpbmc+ICgxKS4KICogICAgICAgICAgVGhlIHNldCBvZiByZXF1ZXN0ZWQgc2NvcGVzLgogKiBkZWZhdWx0U2NvcGVzIC0gU2V0PFN0cmluZz4gKDEpLgogKiAgICAgICAgICAgICAgICAgVGhlIHNldCBvZiBkZWZhdWx0IHNjb3Blcy4KICogYWxsb3dlZFNjb3BlcyAtIFNldDxTdHJpbmc+ICgxKS4KICogICAgICAgICAgICAgICAgIFRoZSBzZXQgb2YgYWxsb3dlZCBzY29wZXMuCiAqIHNjcmlwdE5hbWUgLSBTdHJpbmcgKHByaW1pdGl2ZSkuCiAqICAgICAgICAgICAgICBBbHdheXMgcHJlc2VudCwgdGhlIGRpc3BsYXkgbmFtZSBvZiB0aGUgc2NyaXB0LgogKiBsb2dnZXIgLSBBbHdheXMgcHJlc2VudCwgdGhlIGRlYnVnIGxvZ2dlciBpbnN0YW5jZToKICogICAgICAgICAgaHR0cHM6Ly9iYWNrc3RhZ2UuZm9yZ2Vyb2NrLmNvbS9kb2NzL2FtLzcvc2NyaXB0aW5nLWd1aWRlL3NjcmlwdGluZy1hcGktZ2xvYmFsLWxvZ2dlci5odG1sI3NjcmlwdGluZy1hcGktZ2xvYmFsLWxvZ2dlci4KICogICAgICAgICAgQ29ycmVzcG9uZGluZyBsb2cgZmlsZXMgd2lsbCBiZSBwcmVmaXhlZCB3aXRoOiBzY3JpcHRzLk9BVVRIMl9WQUxJREFURV9TQ09QRQogKiBodHRwQ2xpZW50IC0gSFRUUCBDbGllbnQgKDIpLgogKiAgICAgICAgICAgICAgQWx3YXlzIHByZXNlbnQsIHRoZSBIVFRQIENsaWVudCBpbnN0YW5jZToKICogICAgICAgICAgICAgIGh0dHBzOi8vYmFja3N0YWdlLmZvcmdlcm9jay5jb20vZG9jcy9hbS83L3NjcmlwdGluZy1ndWlkZS9zY3JpcHRpbmctYXBpLWdsb2JhbC1odHRwLWNsaWVudC5odG1sI3NjcmlwdGluZy1hcGktZ2xvYmFsLWh0dHAtY2xpZW50LgogKgogKiBUaHJvd3MgSW52YWxpZFNjb3BlRXhjZXB0aW9uOgogKiAgICAgIC0gaWYgdGhlcmUgYXJlIG5vIHNjb3BlcyByZXF1ZXN0ZWQgYW5kIGRlZmF1bHQgc2NvcGVzIGFyZSBlbXB0eQogKiAgICAgIC0gaWYgYSByZXF1ZXN0ZWQgc2NvcGUgaXMgbm90IGFsbG93ZWQKICoKICogUmV0dXJuIC0gYSBTZXQ8U3RyaW5nPiBvZiB2YWxpZGF0ZWQgc2NvcGVzICgxKS4KICoKICogQ2xhc3MgcmVmZXJlbmNlOgogKiAoMSkgU2V0IC0gaHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vZW4vamF2YS9qYXZhc2UvMTEvZG9jcy9hcGkvamF2YS5iYXNlL2phdmEvdXRpbC9IYXNoU2V0Lmh0bWwuCiAqICgyKSBDbGllbnQgLSBodHRwczovL2JhY2tzdGFnZS5mb3JnZXJvY2suY29tL2RvY3MvYW0vNy9hcGlkb2NzL29yZy9mb3JnZXJvY2svaHR0cC9DbGllbnQuaHRtbC4KICovCgovKioKICogRGVmYXVsdCB2YWxpZGF0ZSBzY29wZSBzY3JpcHQuCiAqLwpmdW5jdGlvbiB2YWxpZGF0ZVNjb3BlcyAoKSB7CiAgICB2YXIgZnJKYXZhID0gSmF2YUltcG9ydGVyKAogICAgICAgIG9yZy5mb3JnZXJvY2sub2F1dGgyLmNvcmUuZXhjZXB0aW9ucy5JbnZhbGlkU2NvcGVFeGNlcHRpb24KICAgICk7CgogICAgdmFyIHNjb3BlczsKICAgIGlmIChyZXF1ZXN0ZWRTY29wZXMgPT0gbnVsbCB8fCByZXF1ZXN0ZWRTY29wZXMuaXNFbXB0eSgpKSB7CiAgICAgICAgc2NvcGVzID0gZGVmYXVsdFNjb3BlczsKICAgIH0gZWxzZSB7CiAgICAgICAgc2NvcGVzID0gbmV3IGphdmEudXRpbC5IYXNoU2V0KGFsbG93ZWRTY29wZXMpOwogICAgICAgIHNjb3Blcy5yZXRhaW5BbGwocmVxdWVzdGVkU2NvcGVzKTsKICAgICAgICBpZiAocmVxdWVzdGVkU2NvcGVzLnNpemUoKSA+IHNjb3Blcy5zaXplKCkpIHsKICAgICAgICAgICAgdmFyIGludmFsaWRTY29wZXMgPSBuZXcgamF2YS51dGlsLkhhc2hTZXQocmVxdWVzdGVkU2NvcGVzKTsKICAgICAgICAgICAgaW52YWxpZFNjb3Blcy5yZW1vdmVBbGwoYWxsb3dlZFNjb3Blcyk7CiAgICAgICAgICAgIHRocm93IG5ldyBmckphdmEuSW52YWxpZFNjb3BlRXhjZXB0aW9uKCdVbmtub3duL2ludmFsaWQgc2NvcGUocyknKTsKICAgICAgICB9CiAgICB9CgogICAgaWYgKHNjb3BlcyA9PSBudWxsIHx8IHNjb3Blcy5pc0VtcHR5KCkpIHsKICAgICAgICB0aHJvdyBuZXcgZnJKYXZhLkludmFsaWRTY29wZUV4Y2VwdGlvbignTm8gc2NvcGUgcmVxdWVzdGVkIGFuZCBubyBkZWZhdWx0IHNjb3BlIGNvbmZpZ3VyZWQnKTsKICAgIH0KICAgIHJldHVybiBzY29wZXM7Cn0KCmZ1bmN0aW9uIHZhbGlkYXRlQXV0aG9yaXphdGlvblNjb3BlICgpIHsKICAgIHJldHVybiB2YWxpZGF0ZVNjb3BlcygpOwp9CgpmdW5jdGlvbiB2YWxpZGF0ZUFjY2Vzc1Rva2VuU2NvcGUgKCkgewogICAgcmV0dXJuIHZhbGlkYXRlU2NvcGVzKCk7Cn0KCmZ1bmN0aW9uIHZhbGlkYXRlUmVmcmVzaFRva2VuU2NvcGUgKCkgewogICAgcmV0dXJuIHZhbGlkYXRlU2NvcGVzKCk7Cn0KCmZ1bmN0aW9uIHZhbGlkYXRlQmFja0NoYW5uZWxBdXRob3JpemF0aW9uU2NvcGUgKCkgewogICAgcmV0dXJuIHZhbGlkYXRlU2NvcGVzKCk7Cn0=",
  },
  {
    "_id": "91d197de-5916-4dca-83b5-9a4df26e7159",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Normalizes raw profile data from WordPress",
    "evaluatorVersion": "1.0",
    "language": "GROOVY",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "WordPress Profile Normalization",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjAgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLmZpZWxkCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5qc29uCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5vYmplY3QKCnJldHVybiBqc29uKG9iamVjdCgKICAgICAgICBmaWVsZCgiaWQiLCByYXdQcm9maWxlLnVzZXJuYW1lKSwKICAgICAgICBmaWVsZCgiZGlzcGxheU5hbWUiLCByYXdQcm9maWxlLmRpc3BsYXlfbmFtZSksCiAgICAgICAgZmllbGQoInBob3RvVXJsIiwgcmF3UHJvZmlsZS5hdmF0YXJfVVJMKSwKICAgICAgICBmaWVsZCgiZW1haWwiLCByYXdQcm9maWxlLmVtYWlsKSwKICAgICAgICBmaWVsZCgidXNlcm5hbWUiLCByYXdQcm9maWxlLnVzZXJuYW1lKSkp",
  },
  {
    "_id": "1b52a7e0-4019-40fa-958a-15a49870e901",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "set the same shared state variable",
    "evaluatorVersion": "1.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "shared",
    "script": "KGZ1bmN0aW9uICgpIHsKICBvdXRjb21lID0gJ3RydWUnOwogIHZhciBsZXZlbCA9IG5vZGVTdGF0ZS5nZXQoJ2xldmVsJykuYXNJbnRlZ2VyKCk7CiAgc2hhcmVkU3RhdGUucHV0KCdzaGFyZWRWYWx1ZScsICdMZXZlbCAnICsgbGV2ZWwgKyAnOiBUaGlzIGlzIGEgbG9uZ2VyIHN0cmluZyB2YWx1ZSBzaGFyZWQgYWNyb3NzIGFsbCBuZXN0ZWQgam91cm5leXMuIEl0IGNvbnRhaW5zIGFuIGluZGljYXRvciBpbiB3aGljaCBsZXZlbCBpdCB3YXMgbGFzdCBzZXQuJyk7Cn0oKSk7",
  },
  {
    "_id": "5e854779-6ec1-4c39-aeba-0477e0986646",
    "context": "CONFIG_PROVIDER_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Script to provide values for a config provider node",
    "evaluatorVersion": "1.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Config Provider Node Script",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjEtMjAyMiBGb3JnZVJvY2sgQVMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQKICoKICogVXNlIG9mIHRoaXMgY29kZSByZXF1aXJlcyBhIGNvbW1lcmNpYWwgc29mdHdhcmUgbGljZW5zZSB3aXRoIEZvcmdlUm9jayBBUy4KICogb3Igd2l0aCBvbmUgb2YgaXRzIGFmZmlsaWF0ZXMuIEFsbCB1c2Ugc2hhbGwgYmUgZXhjbHVzaXZlbHkgc3ViamVjdAogKiB0byBzdWNoIGxpY2Vuc2UgYmV0d2VlbiB0aGUgbGljZW5zZWUgYW5kIEZvcmdlUm9jayBBUy4KICovCgovKioKICogVGhlIGZvbGxvd2luZyBzY3JpcHQgaXMgYSBzaW1wbGlmaWVkIHRlbXBsYXRlIGZvciB1bmRlcnN0YW5kaW5nIGhvdyB0byBidWlsZAogKiB1cCBhIGNvbmZpZyBNYXAgb2JqZWN0IHdpdGggY3VzdG9tIHZhbHVlcy4gVGhlIENvbmZpZyBQcm92aWRlciBOb2RlIHdpbGwgdGhlbgogKiBwcm92aWRlIHRoaXMgY29uZmlnIE1hcCB0byB0aGUgZGVzaXJlZCBub2RlIHR5cGUuIEl0IGlzIGltcG9ydGFudCB0aGF0IHRoZSBNYXAKICogeW91IGJ1aWxkIGhlcmUgaXMgbmFtZWQgJ2NvbmZpZycuCiAqCiAqIERlZmluZWQgdmFyaWFibGVzOgogKgogKiBub2RlU3RhdGUgLSBOb2RlIFN0YXRlICgxKQogKiAgICAgICAgICAgQWx3YXlzIHByZXNlbnQsIHRoaXMgcmVwcmVzZW50cyB0aGUgY3VycmVudCB2YWx1ZXMgc3RvcmVkIGluIHRoZSBub2RlIHN0YXRlLgogKgogKiBpZFJlcG9zaXRvcnkgLSBQcm9maWxlIERhdGEgKDIpCiAqICAgICAgICAgICBBbHdheXMgcHJlc2VudCwgYSByZXBvc2l0b3J5IHRvIHJldHJpZXZlIHVzZXIgaW5mb3JtYXRpb24uCiAqCiAqIHNlY3JldHMgLSBDcmVkZW50aWFscyBhbmQgU2VjcmV0cyAoMykKICogICAgICAgICAgIEFsd2F5cyBwcmVzZW50LCBhbiBpbnRlcmZhY2UgdG8gYWNjZXNzIHRoZSBTZWNyZXRzIEFQSSBmcm9tIGEgc2NyaXB0aW5nIGNvbnRleHQuCiAqCiAqIHJlcXVlc3RIZWFkZXJzICg0KSAtIE1hcCAoNSkKICogICAgICAgICAgIEFsd2F5cyBwcmVzZW50LCBhbiBvYmplY3QgdGhhdCBwcm92aWRlcyBtZXRob2RzIGZvciBhY2Nlc3NpbmcgaGVhZGVycyBpbiB0aGUgbG9naW4gcmVxdWVzdC4KICoKICogbG9nZ2VyIC0gRGVidWcgTG9nZ2luZyAoNikKICogICAgICAgICAgQWx3YXlzIHByZXNlbnQsIHRoZSBkZWJ1ZyBsb2dnZXIgaW5zdGFuY2UuCiAqCiAqIGh0dHBDbGllbnQgLSBIVFRQIENsaWVudCAoNykKICogICAgICAgICAgQWx3YXlzIHByZXNlbnQsIHRoZSBIVFRQIGNsaWVudCB0aGF0IGNhbiBiZSB1c2VkIHRvIG1ha2UgZXh0ZXJuYWwgSFRUUCByZXF1ZXN0cy4KICoKICogcmVhbG0gLSBTdHJpbmcgKHByaW1pdGl2ZSkuCiAqICAgICAgICAgIEFsd2F5cyBwcmVzZW50LCB0aGUgbmFtZSBvZiB0aGUgcmVhbG0gdGhlIHVzZXIgaXMgYXV0aGVudGljYXRpbmcgdG8uCiAqCiAqIGV4aXN0aW5nU2Vzc2lvbiAtIE1hcDxTdHJpbmcsIFN0cmluZz4gKDUpCiAqICAgICAgICAgIFByZXNlbnQgaWYgdGhlIHJlcXVlc3QgY29udGFpbnMgdGhlIHNlc3Npb24gY29va2llLCB0aGUgdXNlcidzIHNlc3Npb24gb2JqZWN0LiBUaGUgcmV0dXJuZWQgbWFwIGZyb20KICogICAgICAgICAgU1NPVG9rZW4uZ2V0UHJvcGVydGllcygpICg4KQogKgogKiByZXF1ZXN0UGFyYW1ldGVycyAtIE1hcCAoNSkKICogICAgICAgICAgQWx3YXlzIHByZXNlbnQsIHRoZSBvYmplY3QgdGhhdCBjb250YWlucyB0aGUgYXV0aGVudGljYXRpb24gcmVxdWVzdCBwYXJhbWV0ZXJzLgogKgogKgogKiBPdXRwdXRzOgogKgogKiBjb25maWcgLSBNYXAgKDUpCiAqICAgICAgICAgICBEZWZpbmUgYW5kIGZpbGwgYSBNYXAgb2JqZWN0IG5hbWVkICdjb25maWcnIHdpdGggY3VzdG9tIHZhbHVlcywgdGhpcyB3aWxsIGRlZmluZSB0aGUgY29uZmlndXJhdGlvbiBmb3IgdGhlCiAqICAgICAgICAgICBhc3NvY2lhdGVkIG5vZGUgc2VsZWN0ZWQgaW4gdGhlIENvbmZpZ1Byb3ZpZGVyTm9kZS4KICoKICogUmVmZXJlbmNlOgogKiAoMSkgTm9kZSBTdGF0ZSAtIGh0dHBzOi8vYmFja3N0YWdlLmZvcmdlcm9jay5jb20vZG9jcy9pZGNsb3VkLWFtL2xhdGVzdC9hdXRoZW50aWNhdGlvbi1ndWlkZS9zY3JpcHRpbmctYXBpLW5vZGUuaHRtbCNzY3JpcHRpbmctYXBpLW5vZGUtbm9kZVN0YXRlCiAqICgyKSBQcm9maWxlIERhdGEgLSBodHRwczovL2JhY2tzdGFnZS5mb3JnZXJvY2suY29tL2RvY3MvYW0vNy4xL2F1dGhlbnRpY2F0aW9uLWd1aWRlL3NjcmlwdGluZy1hcGktbm9kZS5odG1sI3NjcmlwdGluZy1hcGktbm9kZS1pZC1yZXBvCiAqICgzKSBDcmVkZW50aWFscyBhbmQgU2VjcmV0cyAtIGh0dHBzOi8vYmFja3N0YWdlLmZvcmdlcm9jay5jb20vZG9jcy9hbS83LjEvYXV0aGVudGljYXRpb24tZ3VpZGUvc2NyaXB0aW5nLWFwaS1ub2RlLmh0bWwjc2NyaXB0aW5nLWFwaS1hdXRobi1zZWNyZXRzCiAqICg0KSBSZXF1ZXN0IEhlYWRlcnMgLSBodHRwczovL2JhY2tzdGFnZS5mb3JnZXJvY2suY29tL2RvY3MvYW0vNy9hdXRoZW50aWNhdGlvbi1ndWlkZS9zY3JpcHRpbmctYXBpLW5vZGUuaHRtbCNzY3JpcHRpbmctYXBpLW5vZGUtcmVxdWVzdEhlYWRlcnMuCiAqICg1KSBNYXAgLSBodHRwczovL2RvY3Mub3JhY2xlLmNvbS9lbi9qYXZhL2phdmFzZS8xMS9kb2NzL2FwaS9qYXZhLmJhc2UvamF2YS91dGlsL01hcC5odG1sCiAqICg2KSBEZWJ1ZyBMb2dnaW5nIC0gaHR0cHM6Ly9iYWNrc3RhZ2UuZm9yZ2Vyb2NrLmNvbS9kb2NzL2FtLzcvc2NyaXB0aW5nLWd1aWRlL3NjcmlwdGluZy1hcGktZ2xvYmFsLWxvZ2dlci5odG1sI3NjcmlwdGluZy1hcGktZ2xvYmFsLWxvZ2dlci4KICogKDcpIEhUVFAgQ2xpZW50IC0gaHR0cHM6Ly9iYWNrc3RhZ2UuZm9yZ2Vyb2NrLmNvbS9kb2NzL2FtLzcvYXBpZG9jcy9vcmcvZm9yZ2Vyb2NrL2h0dHAvQ2xpZW50Lmh0bWwuCiAqICg4KSBTU09Ub2tlbiAtIGh0dHBzOi8vYmFja3N0YWdlLmZvcmdlcm9jay5jb20vZG9jcy9hbS83L2FwaWRvY3MvY29tL2lwbGFuZXQvc3NvL1NTT1Rva2VuLmh0bWwuCiAqLwoKY29uZmlnID0gewogICAgImtleTAiOiB7InN1YktleSI6ICJ2YWx1ZTAifSwKICAgICJrZXkxIjogInZhbHVlMSIKfTs=",
  },
  {
    "_id": "1d475815-72cb-42eb-aafd-4026989d28a7",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Default global script for Social Identity Provider Profile Transformation",
    "evaluatorVersion": "1.0",
    "language": "GROOVY",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Social Identity Provider Profile Transformation Script",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjAgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKLyogRGVmYXVsdCBTb2NpYWwgSWRlbnRpdHkgUHJvdmlkZXIgUHJvZmlsZSBUcmFuc2Zvcm1hdGlvbiBzY3JpcHQgdG8gdXNlIGFzIGEgdGVtcGxhdGUgZm9yIG5ldyBzY3JpcHRzICov",
  },
  {
    "_id": "bae1d54a-e97d-4997-aa5d-c027f21af82c",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Normalizes raw profile data from Facebook",
    "evaluatorVersion": "1.0",
    "language": "GROOVY",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Facebook Profile Normalization",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjAgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLmZpZWxkCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5qc29uCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5vYmplY3QKCnJldHVybiBqc29uKG9iamVjdCgKICAgICAgICBmaWVsZCgiaWQiLCByYXdQcm9maWxlLmlkKSwKICAgICAgICBmaWVsZCgiZGlzcGxheU5hbWUiLCByYXdQcm9maWxlLm5hbWUpLAogICAgICAgIGZpZWxkKCJnaXZlbk5hbWUiLCByYXdQcm9maWxlLmZpcnN0X25hbWUpLAogICAgICAgIGZpZWxkKCJmYW1pbHlOYW1lIiwgcmF3UHJvZmlsZS5sYXN0X25hbWUpLAogICAgICAgIGZpZWxkKCJwaG90b1VybCIsIHJhd1Byb2ZpbGUucGljdHVyZS5kYXRhLnVybCksCiAgICAgICAgZmllbGQoImVtYWlsIiwgcmF3UHJvZmlsZS5lbWFpbCksCiAgICAgICAgZmllbGQoInVzZXJuYW1lIiwgcmF3UHJvZmlsZS5lbWFpbCkpKQ==",
  },
  {
    "_id": "36863ffb-40ec-48b9-94b1-9a99f71cc3b5",
    "context": "OIDC_CLAIMS",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Default global script for OIDC claims",
    "evaluatorVersion": "1.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "OIDC Claims Script",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMTQtMjAyMyBGb3JnZVJvY2sgQVMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQKICoKICogVXNlIG9mIHRoaXMgY29kZSByZXF1aXJlcyBhIGNvbW1lcmNpYWwgc29mdHdhcmUgbGljZW5zZSB3aXRoIEZvcmdlUm9jayBBUwogKiBvciB3aXRoIG9uZSBvZiBpdHMgYWZmaWxpYXRlcy4gQWxsIHVzZSBzaGFsbCBiZSBleGNsdXNpdmVseSBzdWJqZWN0CiAqIHRvIHN1Y2ggbGljZW5zZSBiZXR3ZWVuIHRoZSBsaWNlbnNlZSBhbmQgRm9yZ2VSb2NrIEFTLgogKi8KCi8qCiAqIFRoaXMgc2NyaXB0IGNvbXB1dGVzIGNsYWltIHZhbHVlcyByZXR1cm5lZCBpbiBJRCB0b2tlbnMgYW5kL29yIGF0IHRoZSBVc2VySW5mbyBFbmRwb2ludC4KICogVGhlIGNsYWltIHZhbHVlcyBhcmUgY29tcHV0ZWQgZm9yOgogKiB0aGUgY2xhaW1zIGRlcml2ZWQgZnJvbSB0aGUgcmVxdWVzdGVkIHNjb3BlcywKICogdGhlIGNsYWltcyBwcm92aWRlZCBieSB0aGUgYXV0aG9yaXphdGlvbiBzZXJ2ZXIsCiAqIGFuZCB0aGUgY2xhaW1zIHJlcXVlc3RlZCBieSB0aGUgY2xpZW50IHZpYSB0aGUgY2xhaW1zIHBhcmFtZXRlci4KICoKICogSW4gdGhlIENPTkZJR1VSQVRJT04gQU5EIENVU1RPTUlaQVRJT04gc2VjdGlvbiwgeW91IGNhbgogKiBkZWZpbmUgdGhlIHNjb3BlLXRvLWNsYWltcyBtYXBwaW5nLCBhbmQKICogYXNzaWduIHRvIGVhY2ggY2xhaW0gYSByZXNvbHZlciBmdW5jdGlvbiB0aGF0IHdpbGwgY29tcHV0ZSB0aGUgY2xhaW0gdmFsdWUuCiAqCiAqIERlZmluZWQgdmFyaWFibGVzIChjbGFzcyByZWZlcmVuY2VzIGFyZSBwcm92aWRlZCBiZWxvdyk6CiAqIHNjb3BlcyAtIFNldDxTdHJpbmc+ICg2KS4KICogICAgICAgICAgQWx3YXlzIHByZXNlbnQsIHRoZSByZXF1ZXN0ZWQgc2NvcGVzLgogKiBjbGFpbXMgLSBNYXA8U3RyaW5nLCBPYmplY3Q+ICg1KS4KICogICAgICAgICAgQWx3YXlzIHByZXNlbnQsIGRlZmF1bHQgc2VydmVyIHByb3ZpZGVkIGNsYWltcy4KICogY2xhaW1PYmplY3RzIC0gTGlzdDxDbGFpbT4gKDcsIDIpLgogKiAgICAgICAgICAgICAgICBBbHdheXMgcHJlc2VudCwgdGhlIGRlZmF1bHQgc2VydmVyIHByb3ZpZGVkIGNsYWltcy4KICogcmVxdWVzdGVkQ2xhaW1zIC0gTWFwPFN0cmluZywgU2V0PFN0cmluZz4+ICg1KS4KICogICAgICAgICAgICAgICAgICAgQWx3YXlzIHByZXNlbnQsIG5vdCBlbXB0eSBpZiB0aGUgcmVxdWVzdCBjb250YWlucyB0aGUgY2xhaW1zIHBhcmFtZXRlciBhbmQgdGhlIHNlcnZlciBoYXMgZW5hYmxlZAogKiAgICAgICAgICAgICAgICAgICBjbGFpbXNfcGFyYW1ldGVyX3N1cHBvcnRlZC4gQSBtYXAgb2YgdGhlIHJlcXVlc3RlZCBjbGFpbXMgdG8gcG9zc2libGUgdmFsdWVzLCBvdGhlcndpc2UgZW1wdHk7CiAqICAgICAgICAgICAgICAgICAgIHJlcXVlc3RlZCBjbGFpbXMgd2l0aCBubyByZXF1ZXN0ZWQgdmFsdWVzIHdpbGwgaGF2ZSBhIGtleSBidXQgbm8gdmFsdWUgaW4gdGhlIG1hcC4gQSBrZXkgd2l0aAogKiAgICAgICAgICAgICAgICAgICBhIHNpbmdsZSB2YWx1ZSBpbiBpdHMgU2V0ICg2KSBpbmRpY2F0ZXMgdGhhdCB0aGlzIGlzIHRoZSBvbmx5IHZhbHVlIHRoYXQgc2hvdWxkIGJlIHJldHVybmVkLgogKiByZXF1ZXN0ZWRUeXBlZENsYWltcyAtIExpc3Q8Q2xhaW0+ICg3LCAyKS4KICogICAgICAgICAgICAgICAgICAgICAgICBBbHdheXMgcHJlc2VudCwgdGhlIHJlcXVlc3RlZCBjbGFpbXMuCiAqICAgICAgICAgICAgICAgICAgICAgICAgUmVxdWVzdGVkIGNsYWltcyB3aXRoIG5vIHJlcXVlc3RlZCB2YWx1ZXMgd2lsbCBoYXZlIGEgY2xhaW0gd2l0aCBubyB2YWx1ZXMuCiAqICAgICAgICAgICAgICAgICAgICAgICAgQSBjbGFpbSB3aXRoIGEgc2luZ2xlIHZhbHVlIGluZGljYXRlcyB0aGlzIGlzIHRoZSBvbmx5IHZhbHVlIHRoYXQgc2hvdWxkIGJlIHJldHVybmVkLgogKiBjbGFpbXNMb2NhbGVzIC0gTGlzdDxTdHJpbmc+ICg3KS4KICogICAgICAgICAgICAgICAgIFRoZSB2YWx1ZXMgZnJvbSB0aGUgJ2NsYWltc19sb2NhbGVzJyBwYXJhbWV0ZXIuCiAqICAgICAgICAgICAgICAgICBTZWUgaHR0cHM6Ly9vcGVuaWQubmV0L3NwZWNzL29wZW5pZC1jb25uZWN0LWNvcmUtMV8wLmh0bWwjQ2xhaW1zTGFuZ3VhZ2VzQW5kU2NyaXB0cyBmb3IgdGhlIE9JREMgc3BlY2lmaWNhdGlvbiBkZXRhaWxzLgogKiByZXF1ZXN0UHJvcGVydGllcyAtIFVubW9kaWZpYWJsZSBNYXAgKDUpLgogKiAgICAgICAgICAgICAgICAgICAgIEFsd2F5cyBwcmVzZW50LCBjb250YWlucyBhIG1hcCBvZiByZXF1ZXN0IHByb3BlcnRpZXM6CiAqICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdFVyaSAtIFRoZSByZXF1ZXN0IFVSSS4KICogICAgICAgICAgICAgICAgICAgICByZWFsbSAtIFRoZSByZWFsbSB0aGF0IHRoZSByZXF1ZXN0IHJlbGF0ZXMgdG8uCiAqICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdFBhcmFtcyAtIEEgbWFwIG9mIHRoZSByZXF1ZXN0IHBhcmFtcyBhbmQvb3IgcG9zdGVkIGRhdGEuCiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEVhY2ggdmFsdWUgaXMgYSBsaXN0IG9mIG9uZSBvciBtb3JlIHByb3BlcnRpZXMuCiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBsZWFzZSBub3RlIHRoYXQgdGhlc2Ugc2hvdWxkIGJlIGhhbmRsZWQgaW4gYWNjb3JkYW5jZSB3aXRoIE9XQVNQIGJlc3QgcHJhY3RpY2VzOgogKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBodHRwczovL293YXNwLm9yZy93d3ctY29tbXVuaXR5L3Z1bG5lcmFiaWxpdGllcy9VbnNhZmVfdXNlX29mX1JlZmxlY3Rpb24uCiAqIGNsaWVudFByb3BlcnRpZXMgLSBVbm1vZGlmaWFibGUgTWFwICg1KS4KICogICAgICAgICAgICAgICAgICAgIFByZXNlbnQgaWYgdGhlIGNsaWVudCBzcGVjaWZpZWQgaW4gdGhlIHJlcXVlc3Qgd2FzIGlkZW50aWZpZWQsIGNvbnRhaW5zIGEgbWFwIG9mIGNsaWVudCBwcm9wZXJ0aWVzOgogKiAgICAgICAgICAgICAgICAgICAgY2xpZW50SWQgLSBUaGUgY2xpZW50J3MgVVJJIGZvciB0aGUgcmVxdWVzdCBsb2NhbGUuCiAqICAgICAgICAgICAgICAgICAgICBhbGxvd2VkR3JhbnRUeXBlcyAtIExpc3Qgb2YgdGhlIGFsbG93ZWQgZ3JhbnQgdHlwZXMgKG9yZy5mb3JnZXJvY2sub2F1dGgyLmNvcmUuR3JhbnRUeXBlKSBmb3IgdGhlIGNsaWVudC4KICogICAgICAgICAgICAgICAgICAgIGFsbG93ZWRSZXNwb25zZVR5cGVzIC0gTGlzdCBvZiB0aGUgYWxsb3dlZCByZXNwb25zZSB0eXBlcyBmb3IgdGhlIGNsaWVudC4KICogICAgICAgICAgICAgICAgICAgIGFsbG93ZWRTY29wZXMgLSBMaXN0IG9mIHRoZSBhbGxvd2VkIHNjb3BlcyBmb3IgdGhlIGNsaWVudC4KICogICAgICAgICAgICAgICAgICAgIGN1c3RvbVByb3BlcnRpZXMgLSBBIG1hcCBvZiB0aGUgY3VzdG9tIHByb3BlcnRpZXMgb2YgdGhlIGNsaWVudC4KICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMaXN0cyBvciBtYXBzIHdpbGwgYmUgaW5jbHVkZWQgYXMgc3ViLW1hcHM7IGZvciBleGFtcGxlOgogKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1c3RvbU1hcFtLZXkxXT1WYWx1ZTEgd2lsbCBiZSByZXR1cm5lZCBhcyBjdXN0b21NYXAgLT4gS2V5MSAtPiBWYWx1ZTEuCiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVG8gYWRkIGN1c3RvbSBwcm9wZXJ0aWVzIHRvIGEgY2xpZW50LCB1cGRhdGUgdGhlIEN1c3RvbSBQcm9wZXJ0aWVzIGZpZWxkCiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW4gQU0gQ29uc29sZSA+IFJlYWxtIE5hbWUgPiBBcHBsaWNhdGlvbnMgPiBPQXV0aCAyLjAgPiBDbGllbnRzID4gQ2xpZW50IElEID4gQWR2YW5jZWQuCiAqIGlkZW50aXR5IC0gQU1JZGVudGl0eSAoMykuCiAqICAgICAgICAgICAgQWx3YXlzIHByZXNlbnQsIHRoZSBpZGVudGl0eSBvZiB0aGUgcmVzb3VyY2Ugb3duZXIuCiAqIHNlc3Npb24gLSBTU09Ub2tlbiAoNCkuCiAqICAgICAgICAgICBQcmVzZW50IGlmIHRoZSByZXF1ZXN0IGNvbnRhaW5zIHRoZSBzZXNzaW9uIGNvb2tpZSwgdGhlIHVzZXIncyBzZXNzaW9uIG9iamVjdC4KICogc2NyaXB0TmFtZSAtIFN0cmluZyAocHJpbWl0aXZlKS4KICogICAgICAgICAgICAgIEFsd2F5cyBwcmVzZW50LCB0aGUgZGlzcGxheSBuYW1lIG9mIHRoZSBzY3JpcHQuCiAqIGxvZ2dlciAtIEFsd2F5cyBwcmVzZW50LCB0aGUgIk9BdXRoMlByb3ZpZGVyIiBkZWJ1ZyBsb2dnZXIgaW5zdGFuY2U6CiAqICAgICAgICAgIGh0dHBzOi8vYmFja3N0YWdlLmZvcmdlcm9jay5jb20vZG9jcy9hbS83L3NjcmlwdGluZy1ndWlkZS9zY3JpcHRpbmctYXBpLWdsb2JhbC1sb2dnZXIuaHRtbCNzY3JpcHRpbmctYXBpLWdsb2JhbC1sb2dnZXIuCiAqICAgICAgICAgIENvcnJlc3BvbmRpbmcgZmlsZXMgd2lsbCBiZSBwcmVmaXhlZCB3aXRoOiBzY3JpcHRzLk9JRENfQ0xBSU1TLgogKiBodHRwQ2xpZW50IC0gSFRUUCBDbGllbnQgKDgpLgogKiAgICAgICAgICAgICAgQWx3YXlzIHByZXNlbnQsIHRoZSBIVFRQIENsaWVudCBpbnN0YW5jZToKICogICAgICAgICAgICAgIGh0dHBzOi8vYmFja3N0YWdlLmZvcmdlcm9jay5jb20vZG9jcy9hbS83L3NjcmlwdGluZy1ndWlkZS9zY3JpcHRpbmctYXBpLWdsb2JhbC1odHRwLWNsaWVudC5odG1sI3NjcmlwdGluZy1hcGktZ2xvYmFsLWh0dHAtY2xpZW50LgogKiAgICAgICAgICAgICAgSW4gb3JkZXIgdG8gdXNlIHRoZSBjbGllbnQsIHlvdSBtYXkgbmVlZCB0byBhZGQKICogICAgICAgICAgICAgIG9yZy5mb3JnZXJvY2suaHR0cC5DbGllbnQsCiAqICAgICAgICAgICAgICBvcmcuZm9yZ2Vyb2NrLmh0dHAucHJvdG9jb2wuKiwKICogICAgICAgICAgICAgIGFuZCBvcmcuZm9yZ2Vyb2NrLnV0aWwucHJvbWlzZS5Qcm9taXNlSW1wbAogKiAgICAgICAgICAgICAgdG8gdGhlIGFsbG93ZWQgSmF2YSBjbGFzc2VzIGluIHRoZSBzY3JpcHRpbmcgZW5naW5lIGNvbmZpZ3VyYXRpb24sIGFzIGRlc2NyaWJlZCBpbjoKICogICAgICAgICAgICAgIGh0dHBzOi8vYmFja3N0YWdlLmZvcmdlcm9jay5jb20vZG9jcy9hbS83L3NjcmlwdGluZy1ndWlkZS9zY3JpcHQtZW5naW5lLXNlY3VyaXR5Lmh0bWwKICoKICogUmV0dXJuIC0gYSBuZXcgVXNlckluZm9DbGFpbXMoTWFwPFN0cmluZywgT2JqZWN0PiB2YWx1ZXMsIE1hcDxTdHJpbmcsIExpc3Q8U3RyaW5nPj4gY29tcG9zaXRlU2NvcGVzKSAoMSkgb2JqZWN0LgogKiAgICAgICAgICBUaGUgcmVzdWx0IG9mIHRoZSBsYXN0IHN0YXRlbWVudCBpbiB0aGUgc2NyaXB0IGlzIHJldHVybmVkIHRvIHRoZSBzZXJ2ZXIuCiAqICAgICAgICAgIEN1cnJlbnRseSwgdGhlIEltbWVkaWF0ZWx5IEludm9rZWQgRnVuY3Rpb24gRXhwcmVzc2lvbiAoYWxzbyBrbm93biBhcyBTZWxmLUV4ZWN1dGluZyBBbm9ueW1vdXMgRnVuY3Rpb24pCiAqICAgICAgICAgIGlzIHRoZSBsYXN0IChhbmQgb25seSkgc3RhdGVtZW50IGluIHRoaXMgc2NyaXB0LCBhbmQgaXRzIHJldHVybiB2YWx1ZSB3aWxsIGJlY29tZSB0aGUgc2NyaXB0IHJlc3VsdC4KICogICAgICAgICAgRG8gbm90IHVzZSAicmV0dXJuIHZhcmlhYmxlIiBzdGF0ZW1lbnQgb3V0c2lkZSBvZiBhIGZ1bmN0aW9uIGRlZmluaXRpb24uCiAqICAgICAgICAgIFNlZSBSRVNVTFRTIHNlY3Rpb24gZm9yIGFkZGl0aW9uYWwgZGV0YWlscy4KICoKICogQ2xhc3MgcmVmZXJlbmNlOgogKiAoMSkgVXNlckluZm9DbGFpbXMgLSBodHRwczovL2JhY2tzdGFnZS5mb3JnZXJvY2suY29tL2RvY3MvYW0vNy9hcGlkb2NzL29yZy9mb3JnZXJvY2svb2F1dGgyL2NvcmUvVXNlckluZm9DbGFpbXMuaHRtbC4KICogKDIpIENsYWltIC0gaHR0cHM6Ly9iYWNrc3RhZ2UuZm9yZ2Vyb2NrLmNvbS9kb2NzL2FtLzcvYXBpZG9jcy9vcmcvZm9yZ2Vyb2NrL29wZW5pZGNvbm5lY3QvQ2xhaW0uaHRtbCkuCiAqICAgICAgICAgQW4gaW5zdGFuY2Ugb2Ygb3JnLmZvcmdlcm9jay5vcGVuaWRjb25uZWN0LkNsYWltIGhhcyBtZXRob2RzIHRvIGFjY2VzcwogKiAgICAgICAgIHRoZSBjbGFpbSBuYW1lLCByZXF1ZXN0ZWQgdmFsdWVzLCBsb2NhbGUsIGFuZCB3aGV0aGVyIHRoZSBjbGFpbSBpcyBlc3NlbnRpYWwuCiAqICgzKSBBTUlkZW50aXR5IC0gaHR0cHM6Ly9iYWNrc3RhZ2UuZm9yZ2Vyb2NrLmNvbS9kb2NzL2FtLzcvYXBpZG9jcy9jb20vc3VuL2lkZW50aXR5L2lkbS9BTUlkZW50aXR5Lmh0bWwuCiAqICg0KSBTU09Ub2tlbiAtIGh0dHBzOi8vYmFja3N0YWdlLmZvcmdlcm9jay5jb20vZG9jcy9hbS83L2FwaWRvY3MvY29tL2lwbGFuZXQvc3NvL1NTT1Rva2VuLmh0bWwuCiAqICg1KSBNYXAgLSBodHRwczovL2RvY3Mub3JhY2xlLmNvbS9lbi9qYXZhL2phdmFzZS8xMS9kb2NzL2FwaS9qYXZhLmJhc2UvamF2YS91dGlsL0hhc2hNYXAuaHRtbCwKICogICAgICAgICAgIG9yIGh0dHBzOi8vZG9jcy5vcmFjbGUuY29tL2VuL2phdmEvamF2YXNlLzExL2RvY3MvYXBpL2phdmEuYmFzZS9qYXZhL3V0aWwvTGlua2VkSGFzaE1hcC5odG1sLgogKiAoNikgU2V0IC0gaHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vZW4vamF2YS9qYXZhc2UvMTEvZG9jcy9hcGkvamF2YS5iYXNlL2phdmEvdXRpbC9IYXNoU2V0Lmh0bWwuCiAqICg3KSBMaXN0IC0gaHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vZW4vamF2YS9qYXZhc2UvMTEvZG9jcy9hcGkvamF2YS5iYXNlL2phdmEvdXRpbC9BcnJheUxpc3QuaHRtbC4KICogKDgpIENsaWVudCAtIGh0dHBzOi8vYmFja3N0YWdlLmZvcmdlcm9jay5jb20vZG9jcy9hbS83L2FwaWRvY3Mvb3JnL2Zvcmdlcm9jay9odHRwL0NsaWVudC5odG1sLgoqLwoKKGZ1bmN0aW9uICgpIHsKICAgIC8vIFNFVFVQCgogICAgLyoqCiAgICAgKiBDbGFpbSBwcm9jZXNzaW5nIHV0aWxpdGllcy4KICAgICAqIEFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIHJldXNhYmxlIGZ1bmN0aW9ucyBmb3IgcHJvY2Vzc2luZyBjbGFpbXMuCiAgICAgKiBAc2VlIENMQUlNIFBST0NFU1NJTkcgVVRJTElUSUVTIHNlY3Rpb24gZm9yIGRldGFpbHMuCiAgICAgKi8KICAgIHZhciB1dGlscyA9IGdldFV0aWxzKCk7CgogICAgLy8gQ09ORklHVVJBVElPTiBBTkQgQ1VTVE9NSVpBVElPTgoKICAgIC8qKgogICAgICogT0F1dGggMi4wIHNjb3BlIHZhbHVlcyAoc2NvcGVzKSBjYW4gYmUgdXNlZCBieSB0aGUgQ2xpZW50IHRvIHJlcXVlc3QgT0lEQyBjbGFpbXMuCiAgICAgKgogICAgICogQ2FsbCB0aGlzIGNvbmZpZ3VyYXRpb24gbWV0aG9kLCBhbmQgcGFzcyBpbiBhcyB0aGUgZmlyc3QgYXJndW1lbnQKICAgICAqIGFuIG9iamVjdCB0aGF0IG1hcHMgYSBzY29wZSB2YWx1ZSB0byBhbiBhcnJheSBvZiBjbGFpbSBuYW1lcwogICAgICogdG8gc3BlY2lmeSB3aGljaCBjbGFpbXMgbmVlZCB0byBiZSBwcm9jZXNzZWQgYW5kIHJldHVybmVkIGZvciB0aGUgcmVxdWVzdGVkIHNjb3Blcy4KICAgICAqIEBzZWUge0BsaW5rIGh0dHBzOi8vb3BlbmlkLm5ldC9zcGVjcy9vcGVuaWQtY29ubmVjdC1jb3JlLTFfMC5odG1sI1Njb3BlQ2xhaW1zfQogICAgICogZm9yIHRoZSBzY29wZSB2YWx1ZXMgdGhhdCBjb3VsZCBiZSB1c2VkIHRvIHJlcXVlc3QgY2xhaW1zIGFzIGRlZmluZWQgaW4gdGhlIE9JREMgc3BlY2lmaWNhdGlvbi4KICAgICAqCiAgICAgKiBCZWxvdywgZmluZCBhIGRlZmF1bHQgY29uZmlndXJhdGlvbiB0aGF0IGlzIGV4cGVjdGVkIHRvIHdvcmsgaW4gdGhlIGN1cnJlbnQgZW52aXJvbm1lbnQuCiAgICAgKgogICAgICogQ1VTVE9NSVpBVElPTgogICAgICogWW91IGNhbiBjaG9vc2UgdGhlIGNsYWltIG5hbWVzIHJldHVybmVkIGZvciBhIHNjb3BlLgogICAgICovCiAgICB1dGlscy5zZXRTY29wZUNsYWltc01hcCh7CiAgICAgICAgcHJvZmlsZTogWwogICAgICAgICAgICAnbmFtZScsCiAgICAgICAgICAgICdmYW1pbHlfbmFtZScsCiAgICAgICAgICAgICdnaXZlbl9uYW1lJywKICAgICAgICAgICAgJ3pvbmVpbmZvJywKICAgICAgICAgICAgJ2xvY2FsZScKICAgICAgICBdLAogICAgICAgIGVtYWlsOiBbJ2VtYWlsJ10sCiAgICAgICAgYWRkcmVzczogWydhZGRyZXNzJ10sCiAgICAgICAgcGhvbmU6IFsncGhvbmVfbnVtYmVyJ10KICAgIH0pOwoKICAgIC8qKgogICAgICogSW4gdGhpcyBzY3JpcHQsIGVhY2ggY2xhaW0KICAgICAqIGRlcml2ZWQgZnJvbSB0aGUgcmVxdWVzdGVkIHNjb3BlcywKICAgICAqIHByb3ZpZGVkIGJ5IHRoZSBhdXRob3JpemF0aW9uIHNlcnZlciwgYW5kCiAgICAgKiByZXF1ZXN0ZWQgYnkgdGhlIGNsaWVudCB2aWEgdGhlIGNsYWltcyBwYXJhbWV0ZXIKICAgICAqIHdpbGwgYmUgcHJvY2Vzc2VkIGJ5IGEgZnVuY3Rpb24gYXNzb2NpYXRlZCB3aXRoIHRoZSBjbGFpbSBuYW1lLgogICAgICoKICAgICAqIENhbGwgdGhpcyBjb25maWd1cmF0aW9uIG1ldGhvZCwgYW5kIHBhc3MgaW4gYXMgdGhlIGZpcnN0IGFyZ3VtZW50CiAgICAgKiBhbiBvYmplY3QgdGhhdCBtYXBzIGEgY2xhaW0gbmFtZSB0byBhIHJlc29sdmVyIGZ1bmN0aW9uLAogICAgICogd2hpY2ggd2lsbCBiZSBhdXRvbWF0aWNhbGx5IGV4ZWN1dGVkIGZvciBlYWNoIGNsYWltIHByb2Nlc3NlZCBieSB0aGUgc2NyaXB0LgogICAgICoKICAgICAqIFRoZSBjbGFpbSByZXNvbHZlciBmdW5jdGlvbiB3aWxsIHJlY2VpdmUgdGhlIHJlcXVlc3RlZCBjbGFpbSBpbmZvcm1hdGlvbgogICAgICogaW4gYW4gaW5zdGFuY2Ugb2Ygb3JnLmZvcmdlcm9jay5vcGVuaWRjb25uZWN0LkNsYWltIGFzIHRoZSBmaXJzdCBhcmd1bWVudC4KICAgICAqIEBzZWUge0BsaW5rIGh0dHBzOi8vYmFja3N0YWdlLmZvcmdlcm9jay5jb20vZG9jcy9hbS83L2FwaWRvY3Mvb3JnL2Zvcmdlcm9jay9vcGVuaWRjb25uZWN0L0NsYWltLmh0bWx9CiAgICAgKiBmb3IgZGV0YWlscyBvbiB0aGUgQ2xhaW0gY2xhc3MuCiAgICAgKgogICAgICogSWYgdGhlIGNsYWltIHJlc29sdmVyIGZ1bmN0aW9uIHJldHVybnMgYSB2YWx1ZSwKICAgICAqIG90aGVyIHRoYW4gdW5kZWZpbmVkIG9yIG51bGwsCiAgICAgKiB0aGUgY2xhaW0gd2lsbCBiZSBpbmNsdWRlZCBpbiB0aGUgc2NyaXB0J3MgcmVzdWx0cy4KICAgICAqCiAgICAgKiBUaGUgQ2xhaW0gaW5zdGFuY2UgcHJvdmlkZXMgbWV0aG9kcyB0byBjaGVjawogICAgICogd2hhdCB0aGUgbmFtZSBvZiB0aGUgY2xhaW0gaXMsCiAgICAgKiB3aGljaCB2YWx1ZXMgdGhlIGNsYWltIHJlcXVlc3QgY29udGFpbnMsCiAgICAgKiB3aGV0aGVyIHRoZSBjbGFpbSBpcyBlc3NlbnRpYWwsIGFuZAogICAgICogd2hpY2ggbG9jYWxlIHRoZSBjbGFpbSBpcyBhc3NvY2lhdGVkIHdpdGguCiAgICAgKiBUaGUgcmVzb2x2ZXIgZnVuY3Rpb24gY2FuIGNvbnNpZGVyIHRoaXMgaW5mb3JtYXRpb24gd2hlbiBjb21wdXRpbmcgYW5kIHJldHVybmluZyB0aGUgY2xhaW0gdmFsdWUuCiAgICAgKgogICAgICogQmVsb3csIGZpbmQgYSBkZWZhdWx0IGNvbmZpZ3VyYXRpb24gdGhhdCBpcyBleHBlY3RlZCB0byB3b3JrIGluIHRoZSBjdXJyZW50IGVudmlyb25tZW50LgogICAgICogQSByZXVzYWJsZSBmdW5jdGlvbiwgdXRpbHMuZ2V0VXNlclByb2ZpbGVDbGFpbVJlc29sdmVyKFN0cmluZyBhdHRyaWJ1dGUtbmFtZSksCiAgICAgKiBpcyBjYWxsZWQgdG8gcmV0dXJuIGEgY2xhaW0gcmVzb2x2ZXIgZnVuY3Rpb24gYmFzZWQgb24gYSB1c2VyIHByb2ZpbGUgYXR0cmlidXRlLgogICAgICogQHNlZSBDTEFJTSBSRVNPTFZFUlMgc2VjdGlvbiBmb3IgdGhlIGltcGxlbWVudGF0aW9uIGRldGFpbHMgYW5kIGV4YW1wbGVzLgogICAgICogRm9yIHRoZSBhZGRyZXNzIGNsYWltLCBhbiBleGFtcGxlIG9mIGEgY2xhaW0gcmVzb2x2ZXIgdGhhdCB1c2VzIGFub3RoZXIgY2xhaW0gcmVzb2x2ZXIgaXMgcHJvdmlkZWQuCiAgICAgKgogICAgICogQ1VTVE9NSVpBVElPTgogICAgICogWW91IGNhbiByZXVzZSB0aGUgcHJlZGVmaW5lZCB1dGlscyBtZXRob2RzIHdpdGggeW91ciBjdXN0b20gYXJndW1lbnRzLgogICAgICogWW91IGNhbiBhbHNvIHNwZWNpZnkgYSBjdXN0b20gcmVzb2x2ZXIgZnVuY3Rpb24gZm9yIGEgY2xhaW0gbmFtZSwKICAgICAqIHRoYXQgd2lsbCBjb21wdXRlIGFuZCByZXR1cm4gdGhlIGNsYWltIHZhbHVl4oCUYXMgc2hvd24gaW4gdGhlIGNvbW1lbnRlZCBvdXQgZXhhbXBsZSBiZWxvdy4KICAgICAqLwogICAgdXRpbHMuc2V0Q2xhaW1SZXNvbHZlcnMoewogICAgICAgIC8qCiAgICAgICAgLy8gQW4gZXhhbXBsZSBvZiBhIHNpbXBsZSBjbGFpbSByZXNvbHZlciBmdW5jdGlvbiB0aGF0IGlzIGRlZmluZWQgZm9yIGEgY2xhaW0KICAgICAgICAvLyBkaXJlY3RseSBpbiB0aGUgY29uZmlndXJhdGlvbiBvYmplY3Q6CiAgICAgICAgY3VzdG9tLWNsYWltLW5hbWU6IGZ1bmN0aW9uIChyZXF1ZXN0ZWRDbGFpbSkgewogICAgICAgICAgICAvLyBJbiB0aGlzIGNhc2UsIGluaXRpYWxseSwgdGhlIGNsYWltIHZhbHVlIGNvbWVzIHN0cmFpZ2h0IGZyb20gYSB1c2VyIHByb2ZpbGUgYXR0cmlidXRlIHZhbHVlOgogICAgICAgICAgICB2YXIgY2xhaW1WYWx1ZSA9IGlkZW50aXR5LmdldEF0dHJpYnV0ZSgnY3VzdG9tLWF0dHJpYnV0ZS1uYW1lJykudG9BcnJheSgpWzBdCgogICAgICAgICAgICAvLyBPcHRpb25hbGx5LCBwcm92aWRlIGFkZGl0aW9uYWwgbG9naWMgZm9yIHByb2Nlc3NpbmcgKGZpbHRlcmluZywgZm9ybWF0dGluZywgZXRjLikgdGhlIGNsYWltIHZhbHVlLgogICAgICAgICAgICAvLyBZb3UgY2FuIHVzZToKICAgICAgICAgICAgLy8gcmVxdWVzdGVkQ2xhaW0uZ2V0TmFtZSgpCiAgICAgICAgICAgIC8vIHJlcXVlc3RlZENsYWltLmdldFZhbHVlcygpCiAgICAgICAgICAgIC8vIHJlcXVlc3RlZENsYWltLmdldExvY2FsZSgpCiAgICAgICAgICAgIC8vIHJlcXVlc3RlZENsYWltLmlzRXNzZW50aWFsKCkKCiAgICAgICAgICAgIHJldHVybiBjbGFpbVZhbHVlCiAgICAgICAgfSwKICAgICAgICAqLwogICAgICAgIC8qKgogICAgICAgICAqIFRoZSB1c2Ugb2YgdXRpbHMuZ2V0VXNlclByb2ZpbGVDbGFpbVJlc29sdmVyIHNob3dzIGhvdwogICAgICAgICAqIGFuIGFyZ3VtZW50IHBhc3NlZCB0byBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIGNsYWltIHJlc29sdmVyCiAgICAgICAgICogYmVjb21lcyBhdmFpbGFibGUgdG8gdGhlIHJlc29sdmVyIGZ1bmN0aW9uICh2aWEgaXRzIGxleGljYWwgY29udGV4dCkuCiAgICAgICAgICovCiAgICAgICAgbmFtZTogdXRpbHMuZ2V0VXNlclByb2ZpbGVDbGFpbVJlc29sdmVyKCdjbicpLAogICAgICAgIGZhbWlseV9uYW1lOiB1dGlscy5nZXRVc2VyUHJvZmlsZUNsYWltUmVzb2x2ZXIoJ3NuJyksCiAgICAgICAgZ2l2ZW5fbmFtZTogdXRpbHMuZ2V0VXNlclByb2ZpbGVDbGFpbVJlc29sdmVyKCdnaXZlbm5hbWUnKSwKICAgICAgICB6b25laW5mbzogdXRpbHMuZ2V0VXNlclByb2ZpbGVDbGFpbVJlc29sdmVyKCdwcmVmZXJyZWR0aW1lem9uZScpLAogICAgICAgIGxvY2FsZTogdXRpbHMuZ2V0VXNlclByb2ZpbGVDbGFpbVJlc29sdmVyKCdwcmVmZXJyZWRsb2NhbGUnKSwKICAgICAgICBlbWFpbDogdXRpbHMuZ2V0VXNlclByb2ZpbGVDbGFpbVJlc29sdmVyKCdtYWlsJyksCiAgICAgICAgYWRkcmVzczogdXRpbHMuZ2V0QWRkcmVzc0NsYWltUmVzb2x2ZXIoCiAgICAgICAgICAgIC8qKgogICAgICAgICAgICAgKiBUaGUgcGFzc2VkIGluIHVzZXIgcHJvZmlsZSBjbGFpbSByZXNvbHZlciBmdW5jdGlvbgogICAgICAgICAgICAgKiBjYW4gYmUgdXNlZCBieSB0aGUgYWRkcmVzcyBjbGFpbSByZXNvbHZlciBmdW5jdGlvbgogICAgICAgICAgICAgKiB0byBvYnRhaW4gdGhlIGNsYWltIHZhbHVlIHRvIGJlIGZvcm1hdHRlZCBhcyBwZXIgdGhlIE9JREMgc3BlY2lmaWNhdGlvbjoKICAgICAgICAgICAgICogQHNlZSBodHRwczovL29wZW5pZC5uZXQvc3BlY3Mvb3BlbmlkLWNvbm5lY3QtY29yZS0xXzAuaHRtbCNBZGRyZXNzQ2xhaW0uCiAgICAgICAgICAgICAqLwogICAgICAgICAgICB1dGlscy5nZXRVc2VyUHJvZmlsZUNsYWltUmVzb2x2ZXIoJ3Bvc3RhbGFkZHJlc3MnKQogICAgICAgICksCiAgICAgICAgcGhvbmVfbnVtYmVyOiB1dGlscy5nZXRVc2VyUHJvZmlsZUNsYWltUmVzb2x2ZXIoJ3RlbGVwaG9uZW51bWJlcicpCiAgICB9KTsKCiAgICAvLyBDTEFJTSBQUk9DRVNTSU5HIFVUSUxJVElFUwoKICAgIC8qKgogICAgICogQHJldHVybnMge29iamVjdH0gQW4gb2JqZWN0IHRoYXQgY29udGFpbnMgcmV1c2FibGUgY2xhaW0gcHJvY2Vzc2luZyB1dGlsaXRpZXMuCiAgICAgKiBAc2VlIFBVQkxJQyBNRVRIT0RTIHNlY3Rpb24gYW5kIHRoZSByZXR1cm4gc3RhdGVtZW50IGZvciB0aGUgbGlzdCBvZiBleHBvcnRlZCBmdW5jdGlvbnMuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGdldFV0aWxzICgpIHsKICAgICAgICAvLyBJTVBPUlQgSkFWQQoKICAgICAgICAvKioKICAgICAgICAgKiBQcm92aWRlcyBKYXZhIHNjcmlwdGluZyBmdW5jdGlvbmFsaXR5LgogICAgICAgICAqIEBzZWUge0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvTW96aWxsYS9Qcm9qZWN0cy9SaGluby9TY3JpcHRpbmdfSmF2YSNqYXZhaW1wb3J0ZXJfY29uc3RydWN0b3J9LgogICAgICAgICAqLwogICAgICAgIHZhciBmckphdmEgPSBKYXZhSW1wb3J0ZXIoCiAgICAgICAgICAgIG9yZy5mb3JnZXJvY2sub2F1dGgyLmNvcmUuZXhjZXB0aW9ucy5JbnZhbGlkUmVxdWVzdEV4Y2VwdGlvbiwKICAgICAgICAgICAgb3JnLmZvcmdlcm9jay5vYXV0aDIuY29yZS5Vc2VySW5mb0NsYWltcywKICAgICAgICAgICAgb3JnLmZvcmdlcm9jay5vcGVuaWRjb25uZWN0LkNsYWltLAoKICAgICAgICAgICAgamF2YS51dGlsLkxpbmtlZEhhc2hNYXAsCiAgICAgICAgICAgIGphdmEudXRpbC5BcnJheUxpc3QKICAgICAgICApOwoKICAgICAgICAvLyBTRVQgVVAgQ09ORklHVVJBVElPTgoKICAgICAgICAvKioKICAgICAgICAgKiBQbGFjZWhvbGRlciBmb3IgYSBjb25maWd1cmF0aW9uIG9wdGlvbiB0aGF0IGNvbnRhaW5zCiAgICAgICAgICogYW4gb2JqZWN0IHRoYXQgbWFwcyB0aGUgc3VwcG9ydGVkIHNjb3BlIHZhbHVlcyAoc2NvcGVzKQogICAgICAgICAqIGFuZCB0aGUgY29ycmVzcG9uZGluZyBjbGFpbSBuYW1lcyBmb3IgZWFjaCBzY29wZSB2YWx1ZS4KICAgICAgICAgKi8KICAgICAgICB2YXIgc2NvcGVDbGFpbXNNYXA7CgogICAgICAgIC8qKgogICAgICAgICAqIFBsYWNlaG9sZGVyIGZvciBhIGNvbmZpZ3VyYXRpb24gb3B0aW9uIHRoYXQgY29udGFpbnMKICAgICAgICAgKiBhbiBvYmplY3QgdGhhdCBtYXBzIHRoZSBzdXBwb3J0ZWQgY2xhaW0gbmFtZXMKICAgICAgICAgKiBhbmQgdGhlIHJlc29sdmVyIGZ1bmN0aW9ucyByZXR1cm5pbmcgdGhlIGNsYWltIHZhbHVlLgogICAgICAgICAqLwogICAgICAgIHZhciBjbGFpbVJlc29sdmVyczsKCiAgICAgICAgLyoqCiAgICAgICAgICogQSAocHVibGljKSBtZXRob2QgdGhhdCBhY2NlcHRzIGFuIG9iamVjdCB0aGF0IG1hcHMgdGhlIHN1cHBvcnRlZCBzY29wZXMgYW5kIHRoZSBjb3JyZXNwb25kaW5nIGNsYWltIG5hbWVzLAogICAgICAgICAqIGFuZCBhc3NpZ25zIGl0IHRvIGEgKHByaXZhdGUpIHZhcmlhYmxlIHRoYXQgc2VydmVzIGFzIGEgY29uZmlndXJhdGlvbiBvcHRpb24uCiAgICAgICAgICogQHBhcmFtIHtvYmplY3R9IHBhcmFtcyAtIEFuIG9iamVjdCB0aGF0IG1hcHMgZWFjaCBzdXBwb3J0ZWQgc2NvcGUgdmFsdWUgdG8gYW4gYXJyYXkgb2YgY2xhaW0gbmFtZXMsCiAgICAgICAgICogaW4gb3JkZXIgdG8gc3BlY2lmeSB3aGljaCBjbGFpbXMgbmVlZCB0byBiZSBwcm9jZXNzZWQgZm9yIHRoZSByZXF1ZXN0ZWQgc2NvcGVzLgogICAgICAgICAqIEBzZWUge0BsaW5rIGh0dHBzOi8vb3BlbmlkLm5ldC9zcGVjcy9vcGVuaWQtY29ubmVjdC1jb3JlLTFfMC5odG1sI1Njb3BlQ2xhaW1zfSBmb3IgZGV0YWlscy4KICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBbcGFyYW1zLnByb2ZpbGVdIC0gQW4gYXJyYXkgb2YgY2xhaW0gbmFtZXMgdG8gYmUgcmV0dXJuZWQgaWYgdGhlIHByb2ZpbGUgc2NvcGUgaXMgcmVxdWVzdGVkLgogICAgICAgICAqIEBwYXJhbSB7c3RyaW5nW119IFtwYXJhbXMuZW1haWxdIC0gQW4gYXJyYXkgb2YgY2xhaW0gbmFtZXMgdG8gYmUgcmV0dXJuZWQgaWYgdGhlIGVtYWlsIHNjb3BlIGlzIHJlcXVlc3RlZC4KICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBbcGFyYW1zLmFkZHJlc3NdIC0gQW4gYXJyYXkgb2YgY2xhaW0gbmFtZXMgdG8gYmUgcmV0dXJuZWQgaWYgdGhlIGFkZHJlc3Mgc2NvcGUgaXMgcmVxdWVzdGVkLgogICAgICAgICAqIEBwYXJhbSB7c3RyaW5nW119IFtwYXJhbXMucGhvbmVdIC0gQW4gYXJyYXkgb2YgY2xhaW0gbmFtZXMgdG8gYmUgcmV0dXJuZWQgaWYgdGhlIHBob25lIHNjb3BlIGlzIHJlcXVlc3RlZC4KICAgICAgICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfQogICAgICAgICAqLwogICAgICAgIGZ1bmN0aW9uIHNldFNjb3BlQ2xhaW1zTWFwKHBhcmFtcykgewogICAgICAgICAgICBzY29wZUNsYWltc01hcCA9IHBhcmFtczsKICAgICAgICB9CgogICAgICAgIC8qKgogICAgICAgICAqIEEgKHB1YmxpYykgbWV0aG9kIHRoYXQgYWNjZXB0cyBhbiBvYmplY3QgdGhhdCBtYXBzIHRoZSBzdXBwb3J0ZWQgY2xhaW0gbmFtZXMKICAgICAgICAgKiBhbmQgdGhlIHJlc29sdmVyIGZ1bmN0aW9ucyByZXR1cm5pbmcgdGhlIGNsYWltIHZhbHVlLAogICAgICAgICAqIGFuZCBhc3NpZ25zIGl0IHRvIGEgKHByaXZhdGUpIHZhcmlhYmxlIHRoYXQgc2VydmVzIGFzIGEgY29uZmlndXJhdGlvbiBvcHRpb24uCiAgICAgICAgICogQHBhcmFtIHtvYmplY3R9IHBhcmFtcyAtIEFuIG9iamVjdCB0aGF0IG1hcHMKICAgICAgICAgKiBlYWNoIHN1cHBvcnRlZCBjbGFpbSBuYW1lIHRvIGEgZnVuY3Rpb24gdGhhdCBjb21wdXRlcyBhbmQgcmV0dXJucyB0aGUgY2xhaW0gdmFsdWUuCiAgICAgICAgICovCiAgICAgICAgZnVuY3Rpb24gc2V0Q2xhaW1SZXNvbHZlcnMocGFyYW1zKSB7CiAgICAgICAgICAgIGNsYWltUmVzb2x2ZXJzID0gcGFyYW1zOwogICAgICAgIH0KCiAgICAgICAgLy8gQ0xBSU0gUkVTT0xWRVJTCgogICAgICAgIC8qKgogICAgICAgICAqIENsYWltIHJlc29sdmVycyBhcmUgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIGEgY2xhaW0gdmFsdWUuCiAgICAgICAgICogQHBhcmFtIHsqfQogICAgICAgICAqIEByZXR1cm5zIHsqfQogICAgICAgICAqLwoKICAgICAgICAvKioKICAgICAgICAgKiBEZWZpbmVzIGEgY2xhaW0gcmVzb2x2ZXIgYmFzZWQgb24gYSB1c2VyIHByb2ZpbGUgYXR0cmlidXRlLgogICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBhdHRyaWJ1dGVOYW1lIC0gTmFtZSBvZiB0aGUgdXNlciBwcm9maWxlIGF0dHJpYnV0ZS4KICAgICAgICAgKiBAcmV0dXJucyB7ZnVuY3Rpb259IEEgZnVuY3Rpb24gdGhhdCB3aWxsIGRldGVybWluZSB0aGUgY2xhaW0gdmFsdWUKICAgICAgICAgKiBiYXNlZCBvbiB0aGUgdXNlciBwcm9maWxlIGF0dHJpYnV0ZSBhbmQgdGhlIChyZXF1ZXN0ZWQpIGNsYWltIHByb3BlcnRpZXMuCiAgICAgICAgICovCiAgICAgICAgZnVuY3Rpb24gZ2V0VXNlclByb2ZpbGVDbGFpbVJlc29sdmVyIChhdHRyaWJ1dGVOYW1lKSB7CiAgICAgICAgICAgIC8qKgogICAgICAgICAgICAgKiBSZXNvbHZlcyBhIGNsYWltIHdpdGggYSB1c2VyIHByb2ZpbGUgYXR0cmlidXRlIHZhbHVlLgogICAgICAgICAgICAgKiBSZXR1cm5zIHVuZGVmaW5lZCBpZiB0aGUgaWRlbnRpdHkgYXR0cmlidXRlIGlzIG5vdCBwb3B1bGF0ZWQsCiAgICAgICAgICAgICAqIE9SIGlmIHRoZSBjbGFpbSBoYXMgcmVxdWVzdGVkIHZhbHVlcyB0aGF0IGRvIG5vdCBjb250YWluIHRoZSBpZGVudGl0eSBhdHRyaWJ1dGUgdmFsdWUuCiAgICAgICAgICAgICAqIEFUVEVOVElPTjogdGhlIGFmb3JlbWVudGlvbmVkIGNvbXBhcmlzb24gaXMgY2FzZS1zZW5zaXRpdmUuCiAgICAgICAgICAgICAqIEBwYXJhbSB7b3JnLmZvcmdlcm9jay5vcGVuaWRjb25uZWN0LkNsYWltfSBjbGFpbQogICAgICAgICAgICAgKiBBbiBvYmplY3QgdGhhdCBwcm92aWRlcyBtZXRob2RzIHRvIG9idGFpbiBpbmZvcm1hdGlvbi9yZXF1aXJlbWVudHMgYXNzb2NpYXRlZCB3aXRoIGEgY2xhaW0uCiAgICAgICAgICAgICAqIEBzZWUge0BsaW5rIGh0dHBzOi8vYmFja3N0YWdlLmZvcmdlcm9jay5jb20vZG9jcy9hbS83L2FwaWRvY3Mvb3JnL2Zvcmdlcm9jay9vcGVuaWRjb25uZWN0L0NsYWltLmh0bWx9IGZvciBkZXRhaWxzLgogICAgICAgICAgICAgKiBAcmV0dXJucyB7c3RyaW5nfEhhc2hTZXR8dW5kZWZpbmVkfQogICAgICAgICAgICAgKi8KICAgICAgICAgICAgZnVuY3Rpb24gcmVzb2x2ZUNsYWltKGNsYWltKSB7CiAgICAgICAgICAgICAgICB2YXIgdXNlclByb2ZpbGVWYWx1ZTsKCiAgICAgICAgICAgICAgICBpZiAoaWRlbnRpdHkpIHsKICAgICAgICAgICAgICAgICAgICB1c2VyUHJvZmlsZVZhbHVlID0gZ2V0Q2xhaW1WYWx1ZUZyb21TZXQoY2xhaW0sIGlkZW50aXR5LmdldEF0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lKSk7CgogICAgICAgICAgICAgICAgICAgIGlmICh1c2VyUHJvZmlsZVZhbHVlICYmICF1c2VyUHJvZmlsZVZhbHVlLmlzRW1wdHkoKSkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWNsYWltLmdldFZhbHVlcygpIHx8IGNsYWltLmdldFZhbHVlcygpLmlzRW1wdHkoKSB8fCBjbGFpbS5nZXRWYWx1ZXMoKS5jb250YWlucyh1c2VyUHJvZmlsZVZhbHVlKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVzZXJQcm9maWxlVmFsdWU7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiByZXNvbHZlQ2xhaW07CiAgICAgICAgfQoKICAgICAgICAvKioKICAgICAgICAgKiBSZXR1cm5zIGFuIGFkZHJlc3MgY2xhaW0gcmVzb2x2ZXIgYmFzZWQgb24gYSBjbGFpbSB2YWx1ZSBvYnRhaW5lZCB3aXRoIGFub3RoZXIgY2xhaW0gcmVzb2x2ZXIuCiAgICAgICAgICogQHBhcmFtIHtmdW5jdGlvbn0gcmVzb2x2ZUNsYWltIC0gQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBjbGFpbSB2YWx1ZS4KICAgICAgICAgKiBAcmV0dXJucyB7ZnVuY3Rpb259IEEgZnVuY3Rpb24gdGhhdCB3aWxsIGFjY2VwdCBhIGNsYWltIGFzIGFuIGFyZ3VtZW50LAogICAgICAgICAqIHJ1biB0aGUgY2xhaW0gcmVzb2x2ZXIgZnVuY3Rpb24gZm9yIHRoZSBjbGFpbSBhbmQgb2J0YWluIHRoZSBjbGFpbSB2YWx1ZSwKICAgICAgICAgKiBhbmQgYXBwbHkgYWRkaXRpb25hbCBmb3JtYXR0aW5nIHRvIHRoZSB2YWx1ZSBiZWZvcmUgcmV0dXJuaW5nIGl0LgogICAgICAgICAqLwogICAgICAgIGZ1bmN0aW9uIGdldEFkZHJlc3NDbGFpbVJlc29sdmVyIChyZXNvbHZlQ2xhaW0pIHsKICAgICAgICAgICAgLyoqCiAgICAgICAgICAgICAqIENyZWF0ZXMgYW4gYWRkcmVzcyBjbGFpbSBvYmplY3QgZnJvbSBhIHZhbHVlIHJldHVybmVkIGJ5IGEgY2xhaW0gcmVzb2x2ZXIsCiAgICAgICAgICAgICAqIGFuZCByZXR1cm5zIHRoZSBhZGRyZXNzIGNsYWltIG9iamVjdCBhcyB0aGUgY2xhaW0gdmFsdWUuCiAgICAgICAgICAgICAqIEBzZWUge0BsaW5rIGh0dHBzOi8vb3BlbmlkLm5ldC9zcGVjcy9vcGVuaWQtY29ubmVjdC1jb3JlLTFfMC5odG1sI0FkZHJlc3NDbGFpbX0uCiAgICAgICAgICAgICAqIFRoZSBjbGFpbSB2YWx1ZSBpcyBvYnRhaW5lZCB3aXRoIGEgY2xhaW0gcmVzb2x2aW5nIGZ1bmN0aW9uIGF2YWlsYWJsZSBmcm9tIHRoZSBjbG9zdXJlLgogICAgICAgICAgICAgKiBAcGFyYW0ge29yZy5mb3JnZXJvY2sub3BlbmlkY29ubmVjdC5DbGFpbX0gY2xhaW0KICAgICAgICAgICAgICogQW4gb2JqZWN0IHRoYXQgcHJvdmlkZXMgbWV0aG9kcyB0byBvYnRhaW4gaW5mb3JtYXRpb24vcmVxdWlyZW1lbnRzIGFzc29jaWF0ZWQgd2l0aCBhIGNsYWltLgogICAgICAgICAgICAgKiBAc2VlIHtAbGluayBodHRwczovL2JhY2tzdGFnZS5mb3JnZXJvY2suY29tL2RvY3MvYW0vNy9hcGlkb2NzL29yZy9mb3JnZXJvY2svb3BlbmlkY29ubmVjdC9DbGFpbS5odG1sfSBmb3IgZGV0YWlscy4KICAgICAgICAgICAgICogQHJldHVybnMge2phdmEudXRpbC5MaW5rZWRIYXNoTWFwfHVuZGVmaW5lZH0gVGhlIGFkZHJlc3MgY2xhaW0gb2JqZWN0IGNyZWF0ZWQgZnJvbSBhIGNsYWltIHZhbHVlLgogICAgICAgICAgICAgKi8KICAgICAgICAgICAgZnVuY3Rpb24gcmVzb2x2ZUFkZHJlc3NDbGFpbShjbGFpbSkgewogICAgICAgICAgICAgICAgdmFyIGNsYWltVmFsdWUgPSByZXNvbHZlQ2xhaW0oY2xhaW0pOwogICAgICAgICAgICAgICAgdmFyIGFkZHJlc3NPYmplY3Q7CgogICAgICAgICAgICAgICAgaWYgKGlzQ2xhaW1WYWx1ZVZhbGlkKGNsYWltVmFsdWUpKSB7CiAgICAgICAgICAgICAgICAgICAgYWRkcmVzc09iamVjdCA9IG5ldyBmckphdmEuTGlua2VkSGFzaE1hcCgpOwoKICAgICAgICAgICAgICAgICAgICBhZGRyZXNzT2JqZWN0LnB1dCgnZm9ybWF0dGVkJywgY2xhaW1WYWx1ZSk7CgogICAgICAgICAgICAgICAgICAgIHJldHVybiBhZGRyZXNzT2JqZWN0OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gcmVzb2x2ZUFkZHJlc3NDbGFpbTsKICAgICAgICB9CgogICAgICAgIC8qKgogICAgICAgICAqIFJldHVybnMgYW4gZXNzZW50aWFsIGNsYWltIHJlc29sdmVyIGJhc2VkIG9uIGEgY2xhaW0gdmFsdWUgb2J0YWluZWQgd2l0aCBhbm90aGVyIGNsYWltIHJlc29sdmVyLgogICAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IHJlc29sdmVDbGFpbSAtIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgY2xhaW0gdmFsdWUuCiAgICAgICAgICogQHJldHVybnMge2Z1bmN0aW9ufSBBIGZ1bmN0aW9uIHRoYXQgd2lsbCBhY2NlcHQgYSBjbGFpbSBhcyBhbiBhcmd1bWVudCwKICAgICAgICAgKiBydW4gdGhlIGNsYWltIHJlc29sdmVyIGZ1bmN0aW9uIGZvciB0aGUgY2xhaW0gYW5kIG9idGFpbiB0aGUgY2xhaW0gdmFsdWUsCiAgICAgICAgICogYW5kIGFwcGx5IGFkZGl0aW9uYWwgbG9naWMgZm9yIGVzc2VudGlhbCBjbGFpbXMuCiAgICAgICAgICovCiAgICAgICAgZnVuY3Rpb24gZ2V0RXNzZW50aWFsQ2xhaW1SZXNvbHZlciAocmVzb2x2ZUNsYWltKSB7CiAgICAgICAgICAgIC8qKgogICAgICAgICAgICAgKiBSZXR1cm5zIGEgY2xhaW0gdmFsdWUgb3IgdGhyb3dzIGFuIGVycm9yLgogICAgICAgICAgICAgKiBUaGUgY2xhaW0gdmFsdWUgaXMgb2J0YWluZWQgd2l0aCBhIGNsYWltIHJlc29sdmluZyBmdW5jdGlvbiBhdmFpbGFibGUgZnJvbSB0aGUgY2xvc3VyZS4KICAgICAgICAgICAgICogVGhyb3dzIGFuIGV4Y2VwdGlvbiBpZiB0aGUgY2xhaW0gaXMgZXNzZW50aWFsIGFuZCBubyB2YWx1ZSBpcyByZXR1cm5lZCBmb3IgdGhlIGNsYWltLgogICAgICAgICAgICAgKgogICAgICAgICAgICAgKiBVc2Ugb2YgdGhpcyByZXNvbHZlciBpcyBvcHRpb25hbC4KICAgICAgICAgICAgICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9vcGVuaWQubmV0L3NwZWNzL29wZW5pZC1jb25uZWN0LWNvcmUtMV8wLmh0bWwjSW5kaXZpZHVhbENsYWltc1JlcXVlc3RzfSBzdGF0aW5nOgogICAgICAgICAgICAgKiAiTm90ZSB0aGF0IGV2ZW4gaWYgdGhlIENsYWltcyBhcmUgbm90IGF2YWlsYWJsZSBiZWNhdXNlIHRoZSBFbmQtVXNlciBkaWQgbm90IGF1dGhvcml6ZSB0aGVpciByZWxlYXNlIG9yIHRoZXkgYXJlIG5vdCBwcmVzZW50LAogICAgICAgICAgICAgKiB0aGUgQXV0aG9yaXphdGlvbiBTZXJ2ZXIgTVVTVCBOT1QgZ2VuZXJhdGUgYW4gZXJyb3Igd2hlbiBDbGFpbXMgYXJlIG5vdCByZXR1cm5lZCwgd2hldGhlciB0aGV5IGFyZSBFc3NlbnRpYWwgb3IgVm9sdW50YXJ5LAogICAgICAgICAgICAgKiB1bmxlc3Mgb3RoZXJ3aXNlIHNwZWNpZmllZCBpbiB0aGUgZGVzY3JpcHRpb24gb2YgdGhlIHNwZWNpZmljIGNsYWltLiIKICAgICAgICAgICAgICoKICAgICAgICAgICAgICogQHBhcmFtIHtvcmcuZm9yZ2Vyb2NrLm9wZW5pZGNvbm5lY3QuQ2xhaW19IGNsYWltCiAgICAgICAgICAgICAqIEFuIG9iamVjdCB0aGF0IHByb3ZpZGVzIG1ldGhvZHMgdG8gb2J0YWluIGluZm9ybWF0aW9uL3JlcXVpcmVtZW50cyBhc3NvY2lhdGVkIHdpdGggYSBjbGFpbS4KICAgICAgICAgICAgICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9iYWNrc3RhZ2UuZm9yZ2Vyb2NrLmNvbS9kb2NzL2FtLzcvYXBpZG9jcy9vcmcvZm9yZ2Vyb2NrL29wZW5pZGNvbm5lY3QvQ2xhaW0uaHRtbH0gZm9yIGRldGFpbHMuCiAgICAgICAgICAgICAqIEByZXR1cm5zIHsqfQogICAgICAgICAgICAgKiBAdGhyb3dzIHtvcmcuZm9yZ2Vyb2NrLm9hdXRoMi5jb3JlLmV4Y2VwdGlvbnMuSW52YWxpZFJlcXVlc3RFeGNlcHRpb259CiAgICAgICAgICAgICAqLwogICAgICAgICAgICBmdW5jdGlvbiByZXNvbHZlRXNzZW50aWFsQ2xhaW0oY2xhaW0pIHsKICAgICAgICAgICAgICAgIHZhciBjbGFpbVZhbHVlID0gcmVzb2x2ZUNsYWltKGNsYWltKTsKCiAgICAgICAgICAgICAgICBpZiAoY2xhaW0uaXNFc3NlbnRpYWwoKSAmJiAhaXNDbGFpbVZhbHVlVmFsaWQoY2xhaW1WYWx1ZSkpIHsKICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZnJKYXZhLkludmFsaWRSZXF1ZXN0RXhjZXB0aW9uKCdDb3VsZCBub3QgcHJvdmlkZSB2YWx1ZSBmb3IgZXNzZW50aWFsIGNsYWltOiAnICsgY2xhaW0uZ2V0TmFtZSgpKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gY2xhaW1WYWx1ZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIHJlc29sdmVFc3NlbnRpYWxDbGFpbTsKICAgICAgICB9CgogICAgICAgIC8qKgogICAgICAgICAqIFByb3ZpZGVzIGRlZmF1bHQgcmVzb2x1dGlvbiBmb3IgYSBjbGFpbS4KICAgICAgICAgKiBVc2UgaXQgaWYgYSBjbGFpbS1zcGVjaWZpYyByZXNvbHZlciBpcyBub3QgZGVmaW5lZCBpbiB0aGUgY29uZmlndXJhdGlvbi4KICAgICAgICAgKiBAcGFyYW0ge29yZy5mb3JnZXJvY2sub3BlbmlkY29ubmVjdC5DbGFpbX0gY2xhaW0KICAgICAgICAgKiBBbiBvYmplY3QgdGhhdCBwcm92aWRlcyBtZXRob2RzIHRvIG9idGFpbiBpbmZvcm1hdGlvbi9yZXF1aXJlbWVudHMgYXNzb2NpYXRlZCB3aXRoIGEgY2xhaW0uCiAgICAgICAgICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9iYWNrc3RhZ2UuZm9yZ2Vyb2NrLmNvbS9kb2NzL2FtLzcvYXBpZG9jcy9vcmcvZm9yZ2Vyb2NrL29wZW5pZGNvbm5lY3QvQ2xhaW0uaHRtbH0gZm9yIGRldGFpbHMuCiAgICAgICAgICogQHJldHVybnMgeyp9IEEgc2luZ2xlIHZhbHVlIGFzc29jaWF0ZWQgd2l0aCB0aGlzIGNsYWltLgogICAgICAgICAqLwogICAgICAgIGZ1bmN0aW9uIHJlc29sdmVBbnlDbGFpbSAoY2xhaW0pIHsKICAgICAgICAgICAgaWYgKGNsYWltLmdldFZhbHVlcygpLnNpemUoKSA9PT0gMSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGNsYWltLmdldFZhbHVlcygpLnRvQXJyYXkoKVswXTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLy8gVVRJTElUSUVTCgogICAgICAgIC8qKgogICAgICAgICAqIFJldHVybnMgY2xhaW0gdmFsdWUgZnJvbSBhIHNldC4KICAgICAgICAgKiBJZiB0aGUgc2V0IGNvbnRhaW5zIGEgc2luZ2xlIHZhbHVlLCByZXR1cm5zIHRoZSB2YWx1ZS4KICAgICAgICAgKiBJZiB0aGUgc2V0IGNvbnRhaW5zIG11bHRpcGxlIHZhbHVlcywgcmV0dXJucyB0aGUgc2V0LgogICAgICAgICAqIE90aGVyd2lzZSwgcmV0dXJucyB1bmRlZmluZWQuCiAgICAgICAgICoKICAgICAgICAgKiBAcGFyYW0ge29yZy5mb3JnZXJvY2sub3BlbmlkY29ubmVjdC5DbGFpbX0gY2xhaW0KICAgICAgICAgKiBBbiBvYmplY3QgdGhhdCBwcm92aWRlcyBtZXRob2RzIHRvIG9idGFpbiBpbmZvcm1hdGlvbi9yZXF1aXJlbWVudHMgYXNzb2NpYXRlZCB3aXRoIGEgY2xhaW0uCiAgICAgICAgICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9iYWNrc3RhZ2UuZm9yZ2Vyb2NrLmNvbS9kb2NzL2FtLzcvYXBpZG9jcy9vcmcvZm9yZ2Vyb2NrL29wZW5pZGNvbm5lY3QvQ2xhaW0uaHRtbH0gZm9yIGRldGFpbHMuCiAgICAgICAgICogQHBhcmFtIHtqYXZhLnV0aWwuSGFzaFNldH0gc2V0IFRoZSBzZXTigJRmb3IgZXhhbXBsZSwgYSB1c2VyIHByb2ZpbGUgYXR0cmlidXRlIHZhbHVlLgogICAgICAgICAqIEByZXR1cm5zIHtzdHJpbmd8amF2YS51dGlsLkhhc2hTZXR8dW5kZWZpbmVkfQogICAgICAgICAqLwogICAgICAgIGZ1bmN0aW9uIGdldENsYWltVmFsdWVGcm9tU2V0IChjbGFpbSwgc2V0KSB7CiAgICAgICAgICAgIGlmIChzZXQgJiYgc2V0LnNpemUoKSkgewogICAgICAgICAgICAgICAgaWYgKHNldC5zaXplKCkgPT09IDEpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2V0LnRvQXJyYXkoKVswXTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNldDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIGlmIChsb2dnZXIud2FybmluZ0VuYWJsZWQoKSkgewogICAgICAgICAgICAgICAgbG9nZ2VyLndhcm5pbmcoJ09JREMgQ2xhaW1zIHNjcmlwdC4gR290IGFuIGVtcHR5IHNldCBmb3IgY2xhaW06ICcgKyBjbGFpbS5nZXROYW1lKCkpOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBpc0NsYWltVmFsdWVWYWxpZCAoY2xhaW1WYWx1ZSkgewogICAgICAgICAgICBpZiAodHlwZW9mIGNsYWltVmFsdWUgPT09ICd1bmRlZmluZWQnIHx8IGNsYWltVmFsdWUgPT09IG51bGwpIHsKICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQoKICAgICAgICAvLyBDTEFJTSBQUk9DRVNTSU5HCgogICAgICAgIC8qKgogICAgICAgICAqIENvbnN0cnVjdHMgYW5kIHJldHVybnMgYW4gb2JqZWN0IHBvcHVsYXRlZCB3aXRoIHRoZSBjb21wdXRlZCBjbGFpbSB2YWx1ZXMKICAgICAgICAgKiBhbmQgdGhlIHJlcXVlc3RlZCBzY29wZXMgbWFwcGVkIHRvIHRoZSBjbGFpbSBuYW1lcy4KICAgICAgICAgKiBAcmV0dXJucyB7b3JnLmZvcmdlcm9jay5vYXV0aDIuY29yZS5Vc2VySW5mb0NsYWltc30gVGhlIG9iamVjdCB0byBiZSByZXR1cm5lZCB0byB0aGUgYXV0aG9yaXphdGlvbiBzZXJ2ZXIuCiAgICAgICAgICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9iYWNrc3RhZ2UuZm9yZ2Vyb2NrLmNvbS9kb2NzL2FtLzcvYXBpZG9jcy9vcmcvZm9yZ2Vyb2NrL29hdXRoMi9jb3JlL1VzZXJJbmZvQ2xhaW1zLmh0bWx9LgogICAgICAgICAqIEBzZWUgUkVTVUxUUyBzZWN0aW9uIGZvciB0aGUgdXNlIG9mIHRoaXMgZnVuY3Rpb24uCiAgICAgICAgICovCiAgICAgICAgZnVuY3Rpb24gZ2V0VXNlckluZm9DbGFpbXMgKCkgewogICAgICAgICAgICByZXR1cm4gbmV3IGZySmF2YS5Vc2VySW5mb0NsYWltcyhnZXRDb21wdXRlZENsYWltcygpLCBnZXRDb21wb3NpdGVTY29wZXMoKSk7CiAgICAgICAgfQoKICAgICAgICAvKioKICAgICAgICAgKiBDcmVhdGVzIGEgbWFwIG9mIChyZXF1ZXN0ZWQpIGNsYWltIG5hbWVzIHBvcHVsYXRlZCB3aXRoIHRoZSBjb21wdXRlZCBjbGFpbSB2YWx1ZXMuCiAgICAgICAgICogQHJldHVybnMge2phdmEudXRpbC5MaW5rZWRIYXNoTWFwfQogICAgICAgICAqIEEgbWFwIG9mIHRoZSByZXF1ZXN0ZWQgY2xhaW0gbmFtZXMgYW5kIHRoZSBjb3JyZXNwb25kaW5nIGNsYWltIHZhbHVlcy4KICAgICAgICAgKi8KICAgICAgICBmdW5jdGlvbiBnZXRDb21wdXRlZENsYWltcyAoKSB7CiAgICAgICAgICAgIC8qKgogICAgICAgICAgICAgKiBDcmVhdGVzIGEgY29tcGxldGUgbGlzdCBvZiBjbGFpbSBvYmplY3RzIGZyb206CiAgICAgICAgICAgICAqIHRoZSBjbGFpbXMgZGVyaXZlZCBmcm9tIHRoZSBzY29wZXMsCiAgICAgICAgICAgICAqIHRoZSBjbGFpbXMgcHJvdmlkZWQgYnkgdGhlIGF1dGhvcml6YXRpb24gc2VydmVyLAogICAgICAgICAgICAgKiBhbmQgdGhlIGNsYWltcyByZXF1ZXN0ZWQgYnkgdGhlIGNsaWVudC4KICAgICAgICAgICAgICogQHJldHVybnMge2phdmEudXRpbC5BcnJheUxpc3R9CiAgICAgICAgICAgICAqIFJldHVybnMgYSBjb21wbGV0ZSBsaXN0IG9mIG9yZy5mb3JnZXJvY2sub3BlbmlkY29ubmVjdC5DbGFpbSBvYmplY3RzIGF2YWlsYWJsZSB0byB0aGUgc2NyaXB0LgogICAgICAgICAgICAgKiBAc2VlIHtAbGluayBodHRwczovL2JhY2tzdGFnZS5mb3JnZXJvY2suY29tL2RvY3MvYW0vNy9hcGlkb2NzL29yZy9mb3JnZXJvY2svb3BlbmlkY29ubmVjdC9DbGFpbS5odG1sfSBmb3IgdGhlIGNsYWltIG9iamVjdCBkZXRhaWxzLgogICAgICAgICAgICAgKi8KICAgICAgICAgICAgZnVuY3Rpb24gZ2V0Q2xhaW1zKCkgewogICAgICAgICAgICAgICAgLyoqCiAgICAgICAgICAgICAgICAgKiBSZXR1cm5zIGEgbGlzdCBvZiBjbGFpbSBvYmplY3RzIGZvciB0aGUgcmVxdWVzdGVkIHNjb3Blcy4KICAgICAgICAgICAgICAgICAqIFVzZXMgdGhlIHNjb3BlQ2xhaW1zTWFwIGNvbmZpZ3VyYXRpb24gb3B0aW9uIHRvIGRlcml2ZSB0aGUgY2xhaW0gbmFtZXM7CiAgICAgICAgICAgICAgICAgKiBubyBvdGhlciBwcm9wZXJ0aWVzIG9mIGEgY2xhaW0gZGVyaXZlZCBmcm9tIGEgc2NvcGUgYXJlIHBvcHVsYXRlZC4KICAgICAgICAgICAgICAgICAqIEByZXR1cm5zIHtqYXZhLnV0aWwuQXJyYXlMaXN0fQogICAgICAgICAgICAgICAgICogQSBsaXN0IG9mIG9yZy5mb3JnZXJvY2sub3BlbmlkY29ubmVjdC5DbGFpbSBvYmplY3RzIGRlcml2ZWQgZnJvbSB0aGUgcmVxdWVzdGVkIHNjb3Blcy4KICAgICAgICAgICAgICAgICAqIEBzZWUge0BsaW5rIGh0dHBzOi8vYmFja3N0YWdlLmZvcmdlcm9jay5jb20vZG9jcy9hbS83L2FwaWRvY3Mvb3JnL2Zvcmdlcm9jay9vcGVuaWRjb25uZWN0L0NsYWltLmh0bWx9IGZvciB0aGUgY2xhaW0gb2JqZWN0IGRldGFpbHMuCiAgICAgICAgICAgICAgICAgKi8KICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNvbnZlcnRTY29wZVRvQ2xhaW1zKCkgewogICAgICAgICAgICAgICAgICAgIHZhciBjbGFpbXMgPSBuZXcgZnJKYXZhLkFycmF5TGlzdCgpOwoKICAgICAgICAgICAgICAgICAgICBzY29wZXMudG9BcnJheSgpLmZvckVhY2goZnVuY3Rpb24gKHNjb3BlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChTdHJpbmcoc2NvcGUpICE9PSAnb3BlbmlkJyAmJiBzY29wZUNsYWltc01hcFtzY29wZV0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlQ2xhaW1zTWFwW3Njb3BlXS5mb3JFYWNoKGZ1bmN0aW9uIChjbGFpbU5hbWUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFpbXMuYWRkKG5ldyBmckphdmEuQ2xhaW0oY2xhaW1OYW1lKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2xhaW1zOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHZhciBjbGFpbXMgPSBuZXcgZnJKYXZhLkFycmF5TGlzdCgpOwoKICAgICAgICAgICAgICAgIGNsYWltcy5hZGRBbGwoY29udmVydFNjb3BlVG9DbGFpbXMoKSk7CiAgICAgICAgICAgICAgICBjbGFpbXMuYWRkQWxsKGNsYWltT2JqZWN0cyk7CiAgICAgICAgICAgICAgICBjbGFpbXMuYWRkQWxsKHJlcXVlc3RlZFR5cGVkQ2xhaW1zKTsKCiAgICAgICAgICAgICAgICByZXR1cm4gY2xhaW1zOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvKioKICAgICAgICAgICAgICogQ29tcHV0ZXMgYW5kIHJldHVybnMgYSBjbGFpbSB2YWx1ZS4KICAgICAgICAgICAgICogVG8gb2J0YWluIHRoZSBjbGFpbSB2YWx1ZSwgdXNlcyB0aGUgcmVzb2x2ZXIgZnVuY3Rpb24gc3BlY2lmaWVkIGZvciB0aGUgY2xhaW0gaW4gdGhlIGNsYWltUmVzb2x2ZXJzIGNvbmZpZ3VyYXRpb24gb2JqZWN0LgogICAgICAgICAgICAgKiBAc2VlIGNsYWltUmVzb2x2ZXJzCiAgICAgICAgICAgICAqIElmIG5vIHJlc29sdmVyIGZ1bmN0aW9uIGlzIGZvdW5kLCB1c2VzIHRoZSBkZWZhdWx0IGNsYWltIHJlc29sdmVyIGZ1bmN0aW9uLgogICAgICAgICAgICAgKgogICAgICAgICAgICAgKiBAcGFyYW0ge29yZy5mb3JnZXJvY2sub3BlbmlkY29ubmVjdC5DbGFpbX0gY2xhaW0KICAgICAgICAgICAgICogQW4gb2JqZWN0IHRoYXQgcHJvdmlkZXMgbWV0aG9kcyB0byBvYnRhaW4gaW5mb3JtYXRpb24vcmVxdWlyZW1lbnRzIGFzc29jaWF0ZWQgd2l0aCBhIGNsYWltLgogICAgICAgICAgICAgKiBAc2VlIHtAbGluayBodHRwczovL2JhY2tzdGFnZS5mb3JnZXJvY2suY29tL2RvY3MvYW0vNy9hcGlkb2NzL29yZy9mb3JnZXJvY2svb3BlbmlkY29ubmVjdC9DbGFpbS5odG1sfSBmb3IgZGV0YWlscy4KICAgICAgICAgICAgICogQHJldHVybnMgeyp9IENsYWltIHZhbHVlLgogICAgICAgICAgICAgKiBAdGhyb3dzIHtvcmcuZm9yZ2Vyb2NrLm9hdXRoMi5jb3JlLmV4Y2VwdGlvbnMuSW52YWxpZFJlcXVlc3RFeGNlcHRpb259CiAgICAgICAgICAgICAqIFJldGhyb3dzIHRoaXMgZXhjZXB0aW9uIGlmIGEgY2xhaW0gcmVzb2x2ZXIgdGhyb3dzIGl0LgogICAgICAgICAgICAgKiBZb3UgY2FuIHRocm93IG9yZy5mb3JnZXJvY2sub2F1dGgyLmNvcmUuZXhjZXB0aW9ucy5JbnZhbGlkUmVxdWVzdEV4Y2VwdGlvbiBmcm9tIHlvdXIgY3VzdG9tIGNsYWltIHJlc29sdmVyCiAgICAgICAgICAgICAqIGlmIHlvdSB3YW50IHRvIHRlcm1pbmF0ZSB0aGUgY2xhaW0gcHJvY2Vzc2luZy4KICAgICAgICAgICAgICovCiAgICAgICAgICAgIGZ1bmN0aW9uIGNvbXB1dGVDbGFpbShjbGFpbSkgewogICAgICAgICAgICAgICAgdmFyIHJlc29sdmVDbGFpbTsKICAgICAgICAgICAgICAgIHZhciBtZXNzYWdlOwoKICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZUNsYWltID0gY2xhaW1SZXNvbHZlcnNbY2xhaW0uZ2V0TmFtZSgpXSB8fCByZXNvbHZlQW55Q2xhaW07CgogICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlQ2xhaW0oY2xhaW0pOwogICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSAnT0lEQyBDbGFpbXMgc2NyaXB0IGV4Y2VwdGlvbi4gVW5hYmxlIHRvIHJlc29sdmUgT0lEQyBDbGFpbS4gJyArIGU7CgogICAgICAgICAgICAgICAgICAgIGlmIChTdHJpbmcoZSkuaW5kZXhPZignb3JnLmZvcmdlcm9jay5vYXV0aDIuY29yZS5leGNlcHRpb25zLkludmFsaWRSZXF1ZXN0RXhjZXB0aW9uJykgIT09IC0xKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IGU7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBpZiAobG9nZ2VyLndhcm5pbmdFbmFibGVkKCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLndhcm5pbmcobWVzc2FnZSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICB2YXIgY29tcHV0ZWRDbGFpbXMgPSBuZXcgZnJKYXZhLkxpbmtlZEhhc2hNYXAoKTsKCiAgICAgICAgICAgIGdldENsYWltcygpLnRvQXJyYXkoKS5mb3JFYWNoKGZ1bmN0aW9uIChjbGFpbSkgewogICAgICAgICAgICAgICAgdmFyIGNsYWltVmFsdWUgPSBjb21wdXRlQ2xhaW0oY2xhaW0pOwoKICAgICAgICAgICAgICAgIGlmIChpc0NsYWltVmFsdWVWYWxpZChjbGFpbVZhbHVlKSkgewogICAgICAgICAgICAgICAgICAgIGNvbXB1dGVkQ2xhaW1zLnB1dChjbGFpbS5nZXROYW1lKCksIGNsYWltVmFsdWUpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAvKioKICAgICAgICAgICAgICAgICAgICAgKiBJZiBhIGNsYWltIGhhcyBiZWVuIHByb2Nlc3NlZCwgYnV0IGFwcGVhcnMgaW4gdGhlIGxpc3QgYWdhaW4sCiAgICAgICAgICAgICAgICAgICAgICogYW5kIGl0cyB2YWx1ZSBjYW5ub3QgYmUgY29tcHV0ZWQgdW5kZXIgdGhlIG5ldyBjb25kaXRpb25zLAogICAgICAgICAgICAgICAgICAgICAqIHRoZSBjbGFpbSBpcyByZW1vdmVkIGZyb20gdGhlIGZpbmFsIHJlc3VsdC4KICAgICAgICAgICAgICAgICAgICAgKgogICAgICAgICAgICAgICAgICAgICAqIEZvciBleGFtcGxlLCBhIGNsYWltIGNvdWxkIGJlIG1hcHBlZCB0byBhIHNjb3BlIGFuZCBmb3VuZCBpbiB0aGUgdXNlciBwcm9maWxlLAogICAgICAgICAgICAgICAgICAgICAqIGJ1dCBhbHNvIHJlcXVlc3RlZCBieSB0aGUgY2xpZW50IHdpdGggcmVxdWlyZWQgdmFsdWVzIHRoYXQgZG9uJ3QgbWF0Y2ggdGhlIGNvbXB1dGVkIG9uZS4KICAgICAgICAgICAgICAgICAgICAgKiBAc2VlIHtsaW5rIGh0dHBzOi8vb3BlbmlkLm5ldC9zcGVjcy9vcGVuaWQtY29ubmVjdC1jb3JlLTFfMC5odG1sI0luZGl2aWR1YWxDbGFpbXNSZXF1ZXN0c30uCiAgICAgICAgICAgICAgICAgICAgICogZm9yIHRoZSByZWxldmFudCBPSURDIHNwZWNpZmljYXRpb24gZGV0YWlscy4KICAgICAgICAgICAgICAgICAgICAgKi8KICAgICAgICAgICAgICAgICAgICBjb21wdXRlZENsYWltcy5yZW1vdmUoY2xhaW0uZ2V0TmFtZSgpKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CgogICAgICAgICAgICByZXR1cm4gY29tcHV0ZWRDbGFpbXM7CiAgICAgICAgfQoKICAgICAgICAvKioKICAgICAgICAgKiBDcmVhdGVzIGEgbWFwIG9mIHJlcXVlc3RlZCBzY29wZXMgYW5kIHRoZSBjb3JyZXNwb25kaW5nIGNsYWltIG5hbWVzLgogICAgICAgICAqIEByZXR1cm5zIHtqYXZhLnV0aWwuTGlua2VkSGFzaE1hcH0KICAgICAgICAgKi8KICAgICAgICBmdW5jdGlvbiBnZXRDb21wb3NpdGVTY29wZXMgKCkgewogICAgICAgICAgICB2YXIgY29tcG9zaXRlU2NvcGVzID0gbmV3IGZySmF2YS5MaW5rZWRIYXNoTWFwKCk7CgogICAgICAgICAgICBzY29wZXMudG9BcnJheSgpLmZvckVhY2goZnVuY3Rpb24gKHNjb3BlKSB7CiAgICAgICAgICAgICAgICB2YXIgc2NvcGVDbGFpbXMgPSBuZXcgZnJKYXZhLkFycmF5TGlzdCgpOwoKICAgICAgICAgICAgICAgIGlmIChzY29wZUNsYWltc01hcFtzY29wZV0pIHsKICAgICAgICAgICAgICAgICAgICBzY29wZUNsYWltc01hcFtzY29wZV0uZm9yRWFjaChmdW5jdGlvbiAoY2xhaW1OYW1lKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlQ2xhaW1zLmFkZChjbGFpbU5hbWUpOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmIChzY29wZUNsYWltcy5zaXplKCkpIHsKICAgICAgICAgICAgICAgICAgICBjb21wb3NpdGVTY29wZXMucHV0KHNjb3BlLCBzY29wZUNsYWltcyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgcmV0dXJuIGNvbXBvc2l0ZVNjb3BlczsKICAgICAgICB9CgogICAgICAgIC8vIFBVQkxJQyBNRVRIT0RTCgogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIHNldFNjb3BlQ2xhaW1zTWFwOiBzZXRTY29wZUNsYWltc01hcCwKICAgICAgICAgICAgc2V0Q2xhaW1SZXNvbHZlcnM6IHNldENsYWltUmVzb2x2ZXJzLAogICAgICAgICAgICBnZXRVc2VyUHJvZmlsZUNsYWltUmVzb2x2ZXI6IGdldFVzZXJQcm9maWxlQ2xhaW1SZXNvbHZlciwKICAgICAgICAgICAgZ2V0QWRkcmVzc0NsYWltUmVzb2x2ZXI6IGdldEFkZHJlc3NDbGFpbVJlc29sdmVyLAogICAgICAgICAgICBnZXRFc3NlbnRpYWxDbGFpbVJlc29sdmVyOiBnZXRFc3NlbnRpYWxDbGFpbVJlc29sdmVyLAogICAgICAgICAgICBnZXRVc2VySW5mb0NsYWltczogZ2V0VXNlckluZm9DbGFpbXMKICAgICAgICB9OwogICAgfQoKICAgIC8vIFJFU1VMVFMKCiAgICAvKioKICAgICAqIFRoaXMgc2NyaXB0IHJldHVybnMgYW4gaW5zdGFuY2Ugb2YgdGhlIG9yZy5mb3JnZXJvY2sub2F1dGgyLmNvcmUuVXNlckluZm9DbGFpbXMgY2xhc3MKICAgICAqIHBvcHVsYXRlZCB3aXRoIHRoZSBjb21wdXRlZCBjbGFpbSB2YWx1ZXMgYW5kCiAgICAgKiB0aGUgcmVxdWVzdGVkIHNjb3BlcyBtYXBwZWQgdG8gdGhlIGNsYWltIG5hbWVzLgogICAgICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9iYWNrc3RhZ2UuZm9yZ2Vyb2NrLmNvbS9kb2NzL2FtLzcvYXBpZG9jcy9vcmcvZm9yZ2Vyb2NrL29hdXRoMi9jb3JlL1VzZXJJbmZvQ2xhaW1zLmh0bWx9LgogICAgICoKICAgICAqIEFzc2lnbmluZyBpdCB0byBhIHZhcmlhYmxlIGdpdmVzIHlvdSBhbiBvcHBvcnR1bml0eQogICAgICogdG8gbG9nIHRoZSBjb250ZW50IG9mIHRoZSByZXR1cm5lZCB2YWx1ZSBkdXJpbmcgZGV2ZWxvcG1lbnQuCiAgICAgKi8KICAgIHZhciB1c2VySW5mb0NsYWltcyA9IHV0aWxzLmdldFVzZXJJbmZvQ2xhaW1zKCk7CgogICAgLyoKICAgIGxvZ2dlci5lcnJvcihzY3JpcHROYW1lICsgJyByZXN1bHRzOicpCiAgICBsb2dnZXIuZXJyb3IoJ1ZhbHVlczogJyArIHVzZXJJbmZvQ2xhaW1zLmdldFZhbHVlcygpKQogICAgbG9nZ2VyLmVycm9yKCdTY29wZXM6ICcgKyB1c2VySW5mb0NsYWltcy5nZXRDb21wb3NpdGVTY29wZXMoKSkKICAgICovCgogICAgcmV0dXJuIHVzZXJJbmZvQ2xhaW1zOwp9KCkpOwo=",
  },
  {
    "_id": "c827d2b4-3608-4693-868e-bbcf86bd87c7",
    "context": "AUTHENTICATION_CLIENT_SIDE",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Default global script for client side Scripted Authentication Module",
    "evaluatorVersion": "1.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Scripted Module - Client Side",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMTYtMjAyMyBGb3JnZVJvY2sgQVMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQKICoKICogVXNlIG9mIHRoaXMgY29kZSByZXF1aXJlcyBhIGNvbW1lcmNpYWwgc29mdHdhcmUgbGljZW5zZSB3aXRoIEZvcmdlUm9jayBBUy4KICogb3Igd2l0aCBvbmUgb2YgaXRzIGFmZmlsaWF0ZXMuIEFsbCB1c2Ugc2hhbGwgYmUgZXhjbHVzaXZlbHkgc3ViamVjdAogKiB0byBzdWNoIGxpY2Vuc2UgYmV0d2VlbiB0aGUgbGljZW5zZWUgYW5kIEZvcmdlUm9jayBBUy4KICovCi8qIERlZmF1bHQgQXV0aGVudGljYXRpb24gY2xpZW50IHNpZGUgc2NyaXB0IHRvIHVzZSBhcyBhIHRlbXBsYXRlIGZvciBuZXcgc2NyaXB0cyAqLwo=",
  },
  {
    "_id": "4c963bb3-7084-43d0-bcdc-a47482cf1825",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Dummy",
    "evaluatorVersion": "2.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Dummy",
    "script": "Cm91dGNvbWUgPSAidHJ1ZSI7Cg==",
  },
  {
    "_id": "8e298710-b55e-4085-a464-88a375a4004b",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Normalizes raw profile data from Twitter",
    "evaluatorVersion": "1.0",
    "language": "GROOVY",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Twitter Profile Normalization",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjAgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLmZpZWxkCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5qc29uCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5vYmplY3QKCnJldHVybiBqc29uKG9iamVjdCgKICAgICAgICBmaWVsZCgiaWQiLCByYXdQcm9maWxlLmlkX3N0ciksCiAgICAgICAgZmllbGQoImRpc3BsYXlOYW1lIiwgcmF3UHJvZmlsZS5uYW1lKSwKICAgICAgICBmaWVsZCgicGhvdG9VcmwiLCByYXdQcm9maWxlLnByb2ZpbGVfaW1hZ2VfdXJsKSwKICAgICAgICBmaWVsZCgiZW1haWwiLCByYXdQcm9maWxlLmVtYWlsKSwKICAgICAgICBmaWVsZCgidXNlcm5hbWUiLCByYXdQcm9maWxlLnNjcmVlbl9uYW1lKSkp",
  },
  {
    "_id": "634fb0b2-8873-4e78-8913-9a669e4f3816",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "null",
    "evaluatorVersion": "1.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Debug Shared State",
    "script": "dmFyIGZyID0gSmF2YUltcG9ydGVyKAogIG9yZy5mb3JnZXJvY2sub3BlbmFtLmF1dGgubm9kZS5hcGksCiAgY29tLnN1bi5pZGVudGl0eS5hdXRoZW50aWNhdGlvbi5jYWxsYmFja3MuU2NyaXB0VGV4dE91dHB1dENhbGxiYWNrCik7CndpdGggKGZyKSB7CiAgaWYgKGNhbGxiYWNrcy5pc0VtcHR5KCkpIHsKICAgICAgZGVidWcgPSBTdHJpbmcoIlNoYXJlZCBzdGF0ZTogIiArIHNoYXJlZFN0YXRlLnRvU3RyaW5nKCkgKyAiXFxuIik7CiAgICAgIGRlYnVnID0gU3RyaW5nKGRlYnVnICsgIlJlcXVlc3QgaGVhZGVyczogIiArIHJlcXVlc3RIZWFkZXJzLnRvU3RyaW5nKCkgKyAiXFxuIik7CiAgICAgIGlmICh0eXBlb2YgZXhpc3RpbmdTZXNzaW9uICE9PSAndW5kZWZpbmVkJykgewogICAgICAgICAgZGVidWcgPSBTdHJpbmcoZGVidWcgKyAiRXhpc3Rpbmcgc2Vzc2lvbjogIiArICJcXG4iKTsKICAgICAgfSAgCiAgICAgICAgIGxvZ2dlci5lcnJvcigiSk9OSzogIiArIGRlYnVnKTsKICAgICAgc2NyaXB0ID0gU3RyaW5nKCdhbGVydCgiJytkZWJ1ZysnIik7Jyk7CiAgICAgIGFjdGlvbiA9IEFjdGlvbi5zZW5kKG5ldyBTY3JpcHRUZXh0T3V0cHV0Q2FsbGJhY2soc2NyaXB0KSkuYnVpbGQoKTsKICB9CiAgb3V0Y29tZSA9ICJ0cnVlIjsKfQ==",
  },
  {
    "_id": "1244e639-4a31-401d-ab61-d75133d8dc9e",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Normalizes raw profile data from Instagram",
    "evaluatorVersion": "1.0",
    "language": "GROOVY",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Instagram Profile Normalization",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjAgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLmZpZWxkCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5qc29uCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5vYmplY3QKCnJldHVybiBqc29uKG9iamVjdCgKICAgICAgICBmaWVsZCgiaWQiLCByYXdQcm9maWxlLmlkKSwKICAgICAgICBmaWVsZCgidXNlcm5hbWUiLCByYXdQcm9maWxlLnVzZXJuYW1lKSkp",
  },
  {
    "_id": "ed685f9f-5909-4726-86e8-22bd38b47663",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Converts a normalized social profile into an Identity",
    "evaluatorVersion": "1.0",
    "language": "GROOVY",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Normalized Profile to Identity",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjEgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLmZpZWxkCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5qc29uCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5vYmplY3QKCmltcG9ydCBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlCgpKc29uVmFsdWUgaWRlbnRpdHkgPSBqc29uKG9iamVjdCgKICAgICAgICBmaWVsZCgiZ2l2ZW5OYW1lIiwgbm9ybWFsaXplZFByb2ZpbGUuZ2l2ZW5OYW1lKSwKICAgICAgICBmaWVsZCgic24iLCBub3JtYWxpemVkUHJvZmlsZS5mYW1pbHlOYW1lKSwKICAgICAgICBmaWVsZCgibWFpbCIsIG5vcm1hbGl6ZWRQcm9maWxlLmVtYWlsKSwKICAgICAgICBmaWVsZCgiY24iLCBub3JtYWxpemVkUHJvZmlsZS5kaXNwbGF5TmFtZSksCiAgICAgICAgZmllbGQoInVzZXJOYW1lIiwgbm9ybWFsaXplZFByb2ZpbGUudXNlcm5hbWUpLAogICAgICAgIGZpZWxkKCJpcGxhbmV0LWFtLXVzZXItYWxpYXMtbGlzdCIsIHNlbGVjdGVkSWRwICsgJy0nICsgbm9ybWFsaXplZFByb2ZpbGUuaWQuYXNTdHJpbmcoKSkpKQoKcmV0dXJuIGlkZW50aXR5",
  },
  {
    "_id": "40a38167-2371-4d49-bbf1-e0e97ace3132",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "null",
    "evaluatorVersion": "1.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "pwdlessCheck.js",
    "script": "b3V0Y29tZSA9ICJsZWdhY3kiOwp2YXIgaWQgPSBzaGFyZWRTdGF0ZS5nZXQoIl9pZCIpOwppZihnZXRDdXN0b21BdHRyVmFsdWUoImN1c3RvbV9wYXNzd29yZGxlc3MiKT09dHJ1ZSkgewogIG91dGNvbWUgPSAicHdkbGVzcyI7Cn0KCmZ1bmN0aW9uIGdldEN1c3RvbUF0dHJWYWx1ZSAoY3VzdG9tQXR0ck5hbWUpCnsKICB2YXIgaWQgPSBzaGFyZWRTdGF0ZS5nZXQoJ19pZCcpOwogIHZhciBmcklkbUN1c3RvbUF0dHJpYnV0ZXMgPSBpZFJlcG9zaXRvcnkuZ2V0QXR0cmlidXRlKGlkLCAnZnItaWRtLWN1c3RvbS1hdHRycycpOwogIGlmIChmcklkbUN1c3RvbUF0dHJpYnV0ZXMpCiAgewogICAgICB2YXIgZnJJZG1DdXN0b21BdHRyaWJ1dGVzT2JqZWN0ID0gSlNPTi5wYXJzZShTdHJpbmcoZnJJZG1DdXN0b21BdHRyaWJ1dGVzLnRvQXJyYXkoKVswXSkpOwogICAgICAgIHJldHVybiBmcklkbUN1c3RvbUF0dHJpYnV0ZXNPYmplY3RbY3VzdG9tQXR0ck5hbWVdOwogIH0KfQo=",
  },
  {
    "_id": "9de3eb62-f131-4fac-a294-7bd170fd4acb",
    "context": "POLICY_CONDITION",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Default global script for Scripted Policy Conditions",
    "evaluatorVersion": "1.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Scripted Policy Condition",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMTUtMjAyMyBGb3JnZVJvY2sgQVMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQKICoKICogVXNlIG9mIHRoaXMgY29kZSByZXF1aXJlcyBhIGNvbW1lcmNpYWwgc29mdHdhcmUgbGljZW5zZSB3aXRoIEZvcmdlUm9jayBBUy4KICogb3Igd2l0aCBvbmUgb2YgaXRzIGFmZmlsaWF0ZXMuIEFsbCB1c2Ugc2hhbGwgYmUgZXhjbHVzaXZlbHkgc3ViamVjdAogKiB0byBzdWNoIGxpY2Vuc2UgYmV0d2VlbiB0aGUgbGljZW5zZWUgYW5kIEZvcmdlUm9jayBBUy4KICovCi8qKgogKiBUaGlzIGlzIGEgUG9saWN5IENvbmRpdGlvbiBleGFtcGxlIHNjcmlwdC4gSXQgZGVtb25zdHJhdGVzIGhvdyB0byBhY2Nlc3MgYSB1c2VyJ3MgaW5mb3JtYXRpb24sCiAqIHVzZSB0aGF0IGluZm9ybWF0aW9uIGluIGV4dGVybmFsIEhUVFAgY2FsbHMgYW5kIG1ha2UgYSBwb2xpY3kgZGVjaXNpb24gYmFzZWQgb24gdGhlIG91dGNvbWUuCiAqLwoKdmFyIHVzZXJBZGRyZXNzLCB1c2VySVAsIHJlc291cmNlSG9zdDsKCmlmICh2YWxpZGF0ZUFuZEluaXRpYWxpemVQYXJhbWV0ZXJzKCkpIHsKCiAgICB2YXIgY291bnRyeUZyb21Vc2VyQWRkcmVzcyA9IGdldENvdW50cnlGcm9tVXNlckFkZHJlc3MoKTsKICAgIGxvZ2dlci5tZXNzYWdlKCJDb3VudHJ5IHJldHJpZXZlZCBmcm9tIHVzZXIncyBhZGRyZXNzOiAiICsgY291bnRyeUZyb21Vc2VyQWRkcmVzcyk7CiAgICB2YXIgY291bnRyeUZyb21Vc2VySVAgPSBnZXRDb3VudHJ5RnJvbVVzZXJJUCgpOwogICAgbG9nZ2VyLm1lc3NhZ2UoIkNvdW50cnkgcmV0cmlldmVkIGZyb20gdXNlcidzIElQOiAiICsgY291bnRyeUZyb21Vc2VySVApOwogICAgdmFyIGNvdW50cnlGcm9tUmVzb3VyY2VVUkkgPSBnZXRDb3VudHJ5RnJvbVJlc291cmNlVVJJKCk7CiAgICBsb2dnZXIubWVzc2FnZSgiQ291bnRyeSByZXRyaWV2ZWQgZnJvbSByZXNvdXJjZSBVUkk6ICIgKyBjb3VudHJ5RnJvbVJlc291cmNlVVJJKTsKCiAgICBpZiAoY291bnRyeUZyb21Vc2VyQWRkcmVzcyA9PT0gY291bnRyeUZyb21Vc2VySVAgJiYgY291bnRyeUZyb21Vc2VyQWRkcmVzcyA9PT0gY291bnRyeUZyb21SZXNvdXJjZVVSSSkgewogICAgICAgIGxvZ2dlci5tZXNzYWdlKCJBdXRob3JpemF0aW9uIFN1Y2NlZWRlZCIpOwogICAgICAgIHJlc3BvbnNlQXR0cmlidXRlcy5wdXQoImNvdW50cnlPZk9yaWdpbiIsIFtjb3VudHJ5RnJvbVVzZXJBZGRyZXNzXSk7CiAgICAgICAgYXV0aG9yaXplZCA9IHRydWU7CiAgICB9IGVsc2UgewogICAgICAgIGxvZ2dlci5tZXNzYWdlKCJBdXRob3JpemF0aW9uIEZhaWxlZCIpOwogICAgICAgIGF1dGhvcml6ZWQgPSBmYWxzZTsKICAgIH0KCn0gZWxzZSB7CiAgICBsb2dnZXIubWVzc2FnZSgiUmVxdWlyZWQgcGFyYW1ldGVycyBub3QgZm91bmQuIEF1dGhvcml6YXRpb24gRmFpbGVkLiIpOwogICAgYXV0aG9yaXplZCA9IGZhbHNlOwp9CgovKioKICogVXNlIHRoZSB1c2VyJ3MgYWRkcmVzcyB0byBsb29rdXAgdGhlaXIgY291bnRyeSBvZiByZXNpZGVuY2UuCiAqCiAqIEByZXR1cm5zIHsqfSBUaGUgdXNlcidzIGNvdW50cnkgb2YgcmVzaWRlbmNlLgogKi8KZnVuY3Rpb24gZ2V0Q291bnRyeUZyb21Vc2VyQWRkcmVzcygpIHsKCiAgICB2YXIgcmVxdWVzdCA9IG5ldyBvcmcuZm9yZ2Vyb2NrLmh0dHAucHJvdG9jb2wuUmVxdWVzdCgpOwogICAgcmVxdWVzdC5zZXRVcmkoImh0dHA6Ly9tYXBzLmdvb2dsZWFwaXMuY29tL21hcHMvYXBpL2dlb2NvZGUvanNvbj9hZGRyZXNzPSIgKyBlbmNvZGVVUklDb21wb25lbnQodXNlckFkZHJlc3MpKTsKICAgICAgcmVxdWVzdC5zZXRNZXRob2QoIkdFVCIpOwoKICAgIHZhciByZXNwb25zZSA9IGh0dHBDbGllbnQuc2VuZChyZXF1ZXN0KS5nZXQoKTsKICAgIGxvZ1Jlc3BvbnNlKHJlc3BvbnNlKTsKCiAgICB2YXIgZ2VvY29kZSA9IEpTT04ucGFyc2UocmVzcG9uc2UuZ2V0RW50aXR5KCkuZ2V0U3RyaW5nKCkpOwogICAgdmFyIGk7CiAgICBmb3IgKGkgPSAwOyBpIDwgZ2VvY29kZS5yZXN1bHRzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgdmFyIHJlc3VsdCA9IGdlb2NvZGUucmVzdWx0c1tpXTsKICAgICAgICB2YXIgajsKICAgICAgICBmb3IgKGogPSAwOyBqIDwgcmVzdWx0LmFkZHJlc3NfY29tcG9uZW50cy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICBpZiAocmVzdWx0LmFkZHJlc3NfY29tcG9uZW50c1tpXS50eXBlc1swXSA9PSAiY291bnRyeSIpIHsKICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQuYWRkcmVzc19jb21wb25lbnRzW2ldLmxvbmdfbmFtZTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQoKLyoqCiAqIFVzZSB0aGUgdXNlcidzIElQIHRvIGxvb2t1cCB0aGUgY291bnRyeSBmcm9tIHdoaWNoIHRoZSByZXF1ZXN0IG9yaWdpbmF0ZWQuCiAqCiAqIEByZXR1cm5zIHsqfSBUaGUgY291bnRyeSBmcm9tIHdoaWNoIHRoZSByZXF1ZXN0IG9yaWdpbmF0ZWQuCiAqLwpmdW5jdGlvbiBnZXRDb3VudHJ5RnJvbVVzZXJJUCgpIHsKICAgIHZhciByZXF1ZXN0ID0gbmV3IG9yZy5mb3JnZXJvY2suaHR0cC5wcm90b2NvbC5SZXF1ZXN0KCk7CiAgICByZXF1ZXN0LnNldFVyaSgiaHR0cDovL2lwLWFwaS5jb20vanNvbi8iICsgdXNlcklQKTsKICAgICAgcmVxdWVzdC5zZXRNZXRob2QoIkdFVCIpOwoKICAgIHZhciByZXNwb25zZSA9IGh0dHBDbGllbnQuc2VuZChyZXF1ZXN0KS5nZXQoKTsKICAgIGxvZ1Jlc3BvbnNlKHJlc3BvbnNlKTsKCiAgICB2YXIgcmVzdWx0ID0gSlNPTi5wYXJzZShyZXNwb25zZS5nZXRFbnRpdHkoKS5nZXRTdHJpbmcoKSk7CiAgICBpZiAocmVzdWx0KSB7CiAgICAgICAgcmV0dXJuIHJlc3VsdC5jb3VudHJ5OwogICAgfQp9CgovKioKICogVXNlIHRoZSByZXF1ZXN0ZWQgcmVzb3VyY2UncyBob3N0IG5hbWUgdG8gbG9va3VwIHRoZSBjb3VudHJ5IHdoZXJlIHRoZSByZXNvdXJjZSBpcyBob3N0ZWQuCiAqCiAqIEByZXR1cm5zIHsqfSBUaGUgY291bnRyeSBpbiB3aGljaCB0aGUgcmVzb3VyY2UgaXMgaG9zdGVkLgogKi8KZnVuY3Rpb24gZ2V0Q291bnRyeUZyb21SZXNvdXJjZVVSSSgpIHsKICAgIHZhciByZXF1ZXN0ID0gbmV3IG9yZy5mb3JnZXJvY2suaHR0cC5wcm90b2NvbC5SZXF1ZXN0KCk7CiAgICByZXF1ZXN0LnNldFVyaSgiaHR0cDovL2lwLWFwaS5jb20vanNvbi8iICsgZW5jb2RlVVJJQ29tcG9uZW50KHJlc291cmNlSG9zdCkpOwogICAgICByZXF1ZXN0LnNldE1ldGhvZCgiR0VUIik7CgogICAgdmFyIHJlc3BvbnNlID0gaHR0cENsaWVudC5zZW5kKHJlcXVlc3QpLmdldCgpOwogICAgbG9nUmVzcG9uc2UocmVzcG9uc2UpOwoKICAgIHZhciByZXN1bHQgPSBKU09OLnBhcnNlKHJlc3BvbnNlLmdldEVudGl0eSgpLmdldFN0cmluZygpKTsKICAgIGlmIChyZXN1bHQpIHsKICAgICAgICByZXR1cm4gcmVzdWx0LmNvdW50cnk7CiAgICB9Cn0KCi8qKgogKiBSZXRyaWV2ZSBhbmQgdmFsaWRhdGUgdGhlIHZhcmlhYmxlcyByZXF1aXJlZCB0byBtYWtlIHRoZSBleHRlcm5hbCBIVFRQIGNhbGxzLgogKgogKiBAcmV0dXJucyB7Ym9vbGVhbn0gV2lsbCBiZSB0cnVlIGlmIHZhbGlkYXRpb24gd2FzIHN1Y2Nlc3NmdWwuCiAqLwpmdW5jdGlvbiB2YWxpZGF0ZUFuZEluaXRpYWxpemVQYXJhbWV0ZXJzKCkgewogICAgdmFyIHVzZXJBZGRyZXNzU2V0ID0gaWRlbnRpdHkuZ2V0QXR0cmlidXRlKCJwb3N0YWxBZGRyZXNzIik7CiAgICBpZiAodXNlckFkZHJlc3NTZXQgPT0gbnVsbCB8fCB1c2VyQWRkcmVzc1NldC5pc0VtcHR5KCkpIHsKICAgICAgICBsb2dnZXIud2FybmluZygiTm8gYWRkcmVzcyBzcGVjaWZpZWQgZm9yIHVzZXI6ICIgKyB1c2VybmFtZSk7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogICAgdXNlckFkZHJlc3MgPSB1c2VyQWRkcmVzc1NldC5pdGVyYXRvcigpLm5leHQoKTsKICAgIGxvZ2dlci5tZXNzYWdlKCJVc2VyIGFkZHJlc3M6ICIgKyB1c2VyQWRkcmVzcyk7CgogICAgaWYgKCFlbnZpcm9ubWVudCkgewogICAgICAgIGxvZ2dlci53YXJuaW5nKCJObyBlbnZpcm9ubWVudCBwYXJhbWV0ZXJzIHNwZWNpZmllZCBpbiB0aGUgZXZhbHVhdGlvbiByZXF1ZXN0LiIpOwogICAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICB2YXIgaXBTZXQgPSBlbnZpcm9ubWVudC5nZXQoIklQIik7CiAgICBpZiAoaXBTZXQgPT0gbnVsbCB8fCBpcFNldC5pc0VtcHR5KCkpIHsKICAgICAgICBsb2dnZXIud2FybmluZygiTm8gSVAgc3BlY2lmaWVkIGluIHRoZSBldmFsdWF0aW9uIHJlcXVlc3QgZW52aXJvbm1lbnQgcGFyYW1ldGVycy4iKTsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgICB1c2VySVAgPSBpcFNldC5pdGVyYXRvcigpLm5leHQoKTsKICAgIGxvZ2dlci5tZXNzYWdlKCJVc2VyIElQOiAiICsgdXNlcklQKTsKCiAgICBpZiAoIXJlc291cmNlVVJJKSB7CiAgICAgICAgbG9nZ2VyLndhcm5pbmcoIk5vIHJlc291cmNlIFVSSSBzcGVjaWZpZWQuIik7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogICAgcmVzb3VyY2VIb3N0ID0gcmVzb3VyY2VVUkkubWF0Y2goL14oLio6XC9cLykod3d3XC4pPyhbQS1aYS16MC05XC1cLl0rKSg6WzAtOV0rKT8oLiopJC8pWzNdOwogICAgbG9nZ2VyLm1lc3NhZ2UoIlJlc291cmNlIGhvc3Q6ICIgKyByZXNvdXJjZUhvc3QpOwoKICAgIHJldHVybiB0cnVlOwp9CgpmdW5jdGlvbiBsb2dSZXNwb25zZShyZXNwb25zZSkgewogICAgbG9nZ2VyLm1lc3NhZ2UoIlVzZXIgUkVTVCBDYWxsLiBTdGF0dXM6ICIgKyByZXNwb25zZS5nZXRTdGF0dXMoKSArICIsIEJvZHk6ICIgKyByZXNwb25zZS5nZXRFbnRpdHkoKS5nZXRTdHJpbmcoKSk7Cn0K",
  },
  {
    "_id": "01bec3a8-105d-45dc-9f80-d003e1b33fa2",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "null",
    "evaluatorVersion": "1.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "updateWebAuthNProfileNickname.js",
    "script": "dmFyIGlkID0gc2hhcmVkU3RhdGUuZ2V0KCJfaWQiKTsKdmFyIHByb2ZpbGVzID0gaWRSZXBvc2l0b3J5LmdldEF0dHJpYnV0ZShpZCwid2ViYXV0aG5EZXZpY2VQcm9maWxlcyIpOwp2YXIgb2JqZWN0QXR0cmlidXRlcyA9IHNoYXJlZFN0YXRlLmdldCgib2JqZWN0QXR0cmlidXRlcyIpOwp2YXIgbmV3Tmlja05hbWUgPSBvYmplY3RBdHRyaWJ1dGVzLmdldCgiY3VzdG9tX25pY2tuYW1lIik7Cgp2YXIgcHJvZmlsZXNBcnJheSA9IHByb2ZpbGVzLnRvQXJyYXkoKTsKCmZvciAodmFyIGk9MDsgaTxwcm9maWxlc0FycmF5Lmxlbmd0aDsgaSsrKQp7CiAgcHJvZmlsZXNBcnJheVtpXT1wcm9maWxlc0FycmF5W2ldLnJlcGxhY2UoIk5ldyBTZWN1cml0eSBLZXkiLG5ld05pY2tOYW1lKTsKfQppZFJlcG9zaXRvcnkuc2V0QXR0cmlidXRlKGlkLCJ3ZWJhdXRobkRldmljZVByb2ZpbGVzIixbXSk7CmZvciAodmFyIGk9MDsgaTxwcm9maWxlc0FycmF5Lmxlbmd0aDsgaSsrKQp7CiAgaWRSZXBvc2l0b3J5LmFkZEF0dHJpYnV0ZShpZCwid2ViYXV0aG5EZXZpY2VQcm9maWxlcyIscHJvZmlsZXNBcnJheVtpXSk7Cn0Kb3V0Y29tZSA9ICJzdWNjZXNzIjs=",
  },
  {
    "_id": "d58977ed-0542-4147-8197-973ef7300191",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Custom Device Match Script",
    "evaluatorVersion": "1.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Custom Device Match Script",
    "script": "LyoKICogQ3VzdG9tIERldmljZSBNYXRjaCBTY3JpcHQKICovCgpvdXRjb21lID0gInRydWUiOw==",
  },
  {
    "_id": "3d97c436-42c0-4dd0-a571-ea6f34f752b3",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Normalizes raw profile data from Itsme",
    "evaluatorVersion": "1.0",
    "language": "GROOVY",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Itsme Profile Normalization",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjAtMjAyMSBGb3JnZVJvY2sgQVMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQKICoKICogVXNlIG9mIHRoaXMgY29kZSByZXF1aXJlcyBhIGNvbW1lcmNpYWwgc29mdHdhcmUgbGljZW5zZSB3aXRoIEZvcmdlUm9jayBBUy4KICogb3Igd2l0aCBvbmUgb2YgaXRzIGFmZmlsaWF0ZXMuIEFsbCB1c2Ugc2hhbGwgYmUgZXhjbHVzaXZlbHkgc3ViamVjdAogKiB0byBzdWNoIGxpY2Vuc2UgYmV0d2VlbiB0aGUgbGljZW5zZWUgYW5kIEZvcmdlUm9jayBBUy4KICovCgppbXBvcnQgc3RhdGljIG9yZy5mb3JnZXJvY2suanNvbi5Kc29uVmFsdWUuZmllbGQKaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLmpzb24KaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLm9iamVjdAoKaW1wb3J0IG9yZy5mb3JnZXJvY2suanNvbi5Kc29uVmFsdWUKCkpzb25WYWx1ZSBtYW5hZ2VkVXNlciA9IGpzb24ob2JqZWN0KAogICAgICAgIGZpZWxkKCJpZCIsIHJhd1Byb2ZpbGUuc3ViKSwKICAgICAgICBmaWVsZCgiZGlzcGxheU5hbWUiLCByYXdQcm9maWxlLm5hbWUpLAogICAgICAgIGZpZWxkKCJnaXZlbk5hbWUiLCByYXdQcm9maWxlLmdpdmVuX25hbWUpLAogICAgICAgIGZpZWxkKCJmYW1pbHlOYW1lIiwgcmF3UHJvZmlsZS5mYW1pbHlfbmFtZSksCiAgICAgICAgZmllbGQoInVzZXJuYW1lIiwgcmF3UHJvZmlsZS5lbWFpbCksCiAgICAgICAgZmllbGQoImVtYWlsIiwgcmF3UHJvZmlsZS5lbWFpbCkpKQpyZXR1cm4gbWFuYWdlZFVzZXI=",
  },
  {
    "_id": "18940a0d-2997-49af-8cb9-9d8da38b4145",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "null",
    "evaluatorVersion": "1.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "resetPush.js",
    "script": "aWQgPSBzaGFyZWRTdGF0ZS5nZXQoIl9pZCIpOwppZFJlcG9zaXRvcnkuc2V0QXR0cmlidXRlKGlkLCAicHVzaERldmljZVByb2ZpbGVzIixbXSk7CgoKICAgIApvdXRjb21lID0gInRydWUiOwo=",
  },
  {
    "_id": "c735de08-f8f2-4e69-aa4a-2d8d3d438323",
    "context": "OAUTH2_MAY_ACT",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Default global script for OAuth2 May Act",
    "evaluatorVersion": "1.0",
    "language": "GROOVY",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "OAuth2 May Act Script",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjAgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKLyoqCiAqIERlZmluZWQgdmFyaWFibGVzOgogKiB0b2tlbiAtIFRoZSBhY2Nlc3MgdG9rZW4gdG8gYmUgdXBkYXRlZC4gTXV0YWJsZSBvYmplY3QsIGFsbCBjaGFuZ2VzIHRvIHRoZSBhY2Nlc3MgdG9rZW4gd2lsbCBiZSByZWZsZWN0ZWQuCiAqIGxvZ2dlciAtIGFsd2F5cyBwcmVzZW50LCBjb3JyZXNwb25kaW5nIGxvZyBmaWxlcyB3aWxsIGJlIHByZWZpeGVkIHdpdGg6IHNjcmlwdHMuT0FVVEgyX0FDQ0VTU19UT0tFTl9NT0RJRklDQVRJT04uCiAqIHNjcmlwdE5hbWUgLSBhbHdheXMgcHJlc2VudCwgdGhlIGRpc3BsYXkgbmFtZSBvZiB0aGUgc2NyaXB0CiAqIHNlc3Npb24gLSBwcmVzZW50IGlmIHRoZSByZXF1ZXN0IGNvbnRhaW5zIHRoZSBzZXNzaW9uIGNvb2tpZSwgdGhlIHVzZXIncyBzZXNzaW9uIG9iamVjdAogKiByZXF1ZXN0UHJvcGVydGllcyAtIGFsd2F5cyBwcmVzZW50LCBjb250YWlucyBhIG1hcCBvZiByZXF1ZXN0IHByb3BlcnRpZXM6CiAqICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdFVyaSAtIHRoZSByZXF1ZXN0IFVSSQogKiAgICAgICAgICAgICAgICAgICAgIHJlYWxtIC0gdGhlIHJlYWxtIHRoYXQgdGhlIHJlcXVlc3QgcmVsYXRlcyB0bwogKiAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RQYXJhbXMgLSBhIG1hcCBvZiB0aGUgcmVxdWVzdCBwYXJhbXMgYW5kL29yIHBvc3RlZCBkYXRhLiBFYWNoIHZhbHVlIGlzIGEgbGlzdCBvZiBvbmUgb3IKICogICAgICAgICAgICAgICAgICAgICBtb3JlIHByb3BlcnRpZXMuIFBsZWFzZSBub3RlIHRoYXQgdGhlc2Ugc2hvdWxkIGJlIGhhbmRsZWQgaW4gYWNjb3JkYW5jZSB3aXRoIE9XQVNQIGJlc3QKICogICAgICAgICAgICAgICAgICAgICBwcmFjdGljZXMuCiAqIGNsaWVudFByb3BlcnRpZXMgLSBwcmVzZW50IGlmIHRoZSBjbGllbnQgc3BlY2lmaWVkIGluIHRoZSByZXF1ZXN0IHdhcyBpZGVudGlmaWVkLCBjb250YWlucyBhIG1hcCBvZiBjbGllbnQKICogICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAqICAgICAgICAgICAgICAgICAgICBjbGllbnRJZCAtIHRoZSBjbGllbnQncyBVcmkgZm9yIHRoZSByZXF1ZXN0IGxvY2FsZQogKiAgICAgICAgICAgICAgICAgICAgYWxsb3dlZEdyYW50VHlwZXMgLSBsaXN0IG9mIHRoZSBhbGxvd2VkIGdyYW50IHR5cGVzIChvcmcuZm9yZ2Vyb2NrLm9hdXRoMi5jb3JlLkdyYW50VHlwZSkKICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIHRoZSBjbGllbnQKICogICAgICAgICAgICAgICAgICAgIGFsbG93ZWRSZXNwb25zZVR5cGVzIC0gbGlzdCBvZiB0aGUgYWxsb3dlZCByZXNwb25zZSB0eXBlcyBmb3IgdGhlIGNsaWVudAogKiAgICAgICAgICAgICAgICAgICAgYWxsb3dlZFNjb3BlcyAtIGxpc3Qgb2YgdGhlIGFsbG93ZWQgc2NvcGVzIGZvciB0aGUgY2xpZW50CiAqICAgICAgICAgICAgICAgICAgICBjdXN0b21Qcm9wZXJ0aWVzIC0gQSBtYXAgb2YgdGhlIGN1c3RvbSBwcm9wZXJ0aWVzIG9mIHRoZSBjbGllbnQuCiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTGlzdHMgb3IgbWFwcyB3aWxsIGJlIGluY2x1ZGVkIGFzIHN1Yi1tYXBzLCBlLmc6CiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVzdE1hcFtLZXkxXT1WYWx1ZTEgd2lsbCBiZSByZXR1cm5lZCBhcyB0ZXN0bWFwIC0+IEtleTEgLT4gVmFsdWUxCiAqCiAqIGlkZW50aXR5IC0gYWx3YXlzIHByZXNlbnQsIHRoZSBpZGVudGl0eSBvZiB0aGUgcmVzb3VyY2Ugb3duZXIKICogc2NvcGVzIC0gYWx3YXlzIHByZXNlbnQsIHRoZSByZXF1ZXN0ZWQgc2NvcGVzCiAqLwovKgppbXBvcnQgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZQoKdG9rZW4uc2V0TWF5QWN0KAogICAgSnNvblZhbHVlLmpzb24oSnNvblZhbHVlLm9iamVjdCgKICAgICAgICBKc29uVmFsdWUuZmllbGQoImNsaWVudF9pZCIsICJteUNsaWVudCIpLCAKICAgICAgICBKc29uVmFsdWUuZmllbGQoInN1YiIsICIodXNyIW15QWN0b3IpIikpKSkKKi8=",
  },
  {
    "_id": "c234ba0b-58a1-4cfd-9567-09edde980745",
    "context": "OAUTH2_ACCESS_TOKEN_MODIFICATION",
    "createdBy": "null",
    "creationDate": 1433147666269,
    "default": true,
    "description": "Internal token modification script",
    "evaluatorVersion": "1.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "ForgeRock Internal: OAuth2 Access Token Modification Script",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjMgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwovLyBTY3JpcHQgaXMgaW50ZW50aW9uYWxseSBlbXB0eQo=",
  },
  {
    "_id": "58d29080-4563-480b-89bb-1e7719776a21",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Normalizes raw profile data from Google",
    "evaluatorVersion": "1.0",
    "language": "GROOVY",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Google Profile Normalization",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjAgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLmZpZWxkCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5qc29uCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5vYmplY3QKCnJldHVybiBqc29uKG9iamVjdCgKICAgICAgICBmaWVsZCgiaWQiLCByYXdQcm9maWxlLnN1YiksCiAgICAgICAgZmllbGQoImRpc3BsYXlOYW1lIiwgcmF3UHJvZmlsZS5uYW1lKSwKICAgICAgICBmaWVsZCgiZ2l2ZW5OYW1lIiwgcmF3UHJvZmlsZS5naXZlbl9uYW1lKSwKICAgICAgICBmaWVsZCgiZmFtaWx5TmFtZSIsIHJhd1Byb2ZpbGUuZmFtaWx5X25hbWUpLAogICAgICAgIGZpZWxkKCJwaG90b1VybCIsIHJhd1Byb2ZpbGUucGljdHVyZSksCiAgICAgICAgZmllbGQoImVtYWlsIiwgcmF3UHJvZmlsZS5lbWFpbCksCiAgICAgICAgZmllbGQoInVzZXJuYW1lIiwgcmF3UHJvZmlsZS5lbWFpbCksCiAgICAgICAgZmllbGQoImxvY2FsZSIsIHJhd1Byb2ZpbGUubG9jYWxlKSkp",
  },
  {
    "_id": "3bd13a46-61c4-4974-8efb-1700c80c64e3",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Inactive Device Match Script",
    "evaluatorVersion": "1.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Inactive Device Match Script",
    "script": "LyoKICogSW5hY3RpdmUgRGV2aWNlIE1hdGNoIFNjcmlwdAogKi8KCm91dGNvbWUgPSAidHJ1ZSI7",
  },
  {
    "_id": "343b3cc5-38f4-4e37-9d92-8ba0830936da",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "RemoveButton",
    "evaluatorVersion": "1.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "wks-RemoveButton",
    "script": "LyogUmVtb3ZlIEJ1dHRvbgogKgogKiBBdXRob3I6IHZvbGtlci5zY2hldWJlckBmb3JnZXJvY2suY29tCiAqIAogKiBIaWRlIGJ1dHRvbnMgb24gdGhlIGpvdXJuZXkgcGFnZS4KICogCiAqIFRoaXMgc2NyaXB0IGRvZXMgbm90IG5lZWQgdG8gYmUgcGFyYW1ldHJpemVkLiBJdCB3aWxsIHdvcmsgcHJvcGVybHkgYXMgaXMuCiAqIAogKiBUaGUgU2NyaXB0ZWQgRGVjaXNpb24gTm9kZSBuZWVkcyB0aGUgZm9sbG93aW5nIG91dGNvbWVzIGRlZmluZWQ6CiAqIC0gdHJ1ZQogKi8KKGZ1bmN0aW9uICgpIHsKICAgIHZhciBzY3JpcHQgPSAiQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2J1dHRvbicpKS5mb3JFYWNoKGZ1bmN0aW9uIChlKSB7ZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnfSkiCiAgICB2YXIgZnIgPSBKYXZhSW1wb3J0ZXIoCiAgICAgICAgb3JnLmZvcmdlcm9jay5vcGVuYW0uYXV0aC5ub2RlLmFwaS5BY3Rpb24sCiAgICAgICAgamF2YXguc2VjdXJpdHkuYXV0aC5jYWxsYmFjay5UZXh0T3V0cHV0Q2FsbGJhY2ssCiAgICAgICAgY29tLnN1bi5pZGVudGl0eS5hdXRoZW50aWNhdGlvbi5jYWxsYmFja3MuU2NyaXB0VGV4dE91dHB1dENhbGxiYWNrCiAgICApCiAgICB2YXIgbWVzc2FnZSA9ICIgIgogICAgaWYgKGNhbGxiYWNrcy5pc0VtcHR5KCkpIHsKICAgICAgICBhY3Rpb24gPSBmci5BY3Rpb24uc2VuZCgKICAgICAgICAgICAgbmV3IGZyLlRleHRPdXRwdXRDYWxsYmFjaygKICAgICAgICAgICAgICAgIGZyLlRleHRPdXRwdXRDYWxsYmFjay5JTkZPUk1BVElPTiwKICAgICAgICAgICAgICAgIG1lc3NhZ2UKICAgICAgICAgICAgKSwKICAgICAgICAgICAgbmV3IGZyLlNjcmlwdFRleHRPdXRwdXRDYWxsYmFjayhzY3JpcHQpCiAgICAgICAgKS5idWlsZCgpCiAgICB9Cn0oKSk7",
  },
  {
    "_id": "13e3f263-9cd3-4844-8d1c-040fd0dd02eb",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Default global script template for Device Profile Match decision node script for Authentication Tree",
    "evaluatorVersion": "1.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Device Profile Match Template - Decision Node Script",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjAtMjAyMiBGb3JnZVJvY2sgQVMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQKICoKICogVXNlIG9mIHRoaXMgY29kZSByZXF1aXJlcyBhIGNvbW1lcmNpYWwgc29mdHdhcmUgbGljZW5zZSB3aXRoIEZvcmdlUm9jayBBUy4KICogb3Igd2l0aCBvbmUgb2YgaXRzIGFmZmlsaWF0ZXMuIEFsbCB1c2Ugc2hhbGwgYmUgZXhjbHVzaXZlbHkgc3ViamVjdAogKiB0byBzdWNoIGxpY2Vuc2UgYmV0d2VlbiB0aGUgbGljZW5zZWUgYW5kIEZvcmdlUm9jayBBUy4KICovCgovKiogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCiAqCiAqIFRoZSBmb2xsb3dpbmcgc2NyaXB0IGlzIGEgc2ltcGxpZmllZCB0ZW1wbGF0ZSBmb3IgdW5kZXJzdGFuZGluZwogKiB0aGUgYmFzaWNzIG9mIGRldmljZSBtYXRjaGluZy4gX1RoaXMgaXMgbm90IGZ1bmN0aW9uYWxseSBjb21wbGV0ZS5fCiAqIEZvciBhIGZ1bmN0aW9uYWxseSBjb21wbGV0ZSBzY3JpcHQgYXMgd2VsbCBhcyBhIGRldmVsb3BtZW50IHRvb2xraXQsCiAqIHZpc2l0IGh0dHBzOi8vZ2l0aHViLmNvbS9Gb3JnZVJvY2svZm9yZ2Vyb2NrLWRldmljZS1tYXRjaC1zY3JpcHQuCiAqCiAqIEdsb2JhbCBub2RlIHZhcmlhYmxlcyBhY2Nlc3NpYmxlIHdpdGhpbiB0aGlzIHNjb3BlOgogKiAxLiBgc2hhcmVkU3RhdGVgIHByb3ZpZGVzIGFjY2VzcyB0byBpbmNvbWluZyByZXF1ZXN0CiAqIDIuIGBkZXZpY2VQcm9maWxlc0Rhb2AgcHJvdmlkZXMgYWNjZXNzIHRvIHN0b3JlZCBwcm9maWxlcwogKiAzLiBgb3V0Y29tZWAgdmFyaWFibGUgbWFwcyB0byBhdXRoIHRyZWUgbm9kZSBvdXRjb21lczsgdmFsdWVzIGFyZQogKiAgICAndHJ1ZScsICdmYWxzZScsIG9yICd1bmtub3duRGV2aWNlJyAobm90aWNlIF9hbGxfIGFyZSBzdHJpbmdzKS4KICogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwoKLyoqCiAqIEdldCB0aGUgaW5jb21pbmcgcmVxdWVzdCdzIGRldmljZSBwcm9maWxlLgogKiBSZXR1cm5zIHNlcmlhbGl6ZWQgSlNPTiAodHlwZSBzdHJpbmcpOyBwYXJzaW5nIHRoaXMgd2lsbCByZXN1bHQgYQogKiBuYXRpdmUgSlMgb2JqZWN0LgogKi8KdmFyIGluY29taW5nSnNvbiA9IHNoYXJlZFN0YXRlLmdldCgnZm9yZ2VSb2NrLmRldmljZS5wcm9maWxlJykudG9TdHJpbmcoKTsKdmFyIGluY29taW5nID0gSlNPTi5wYXJzZShpbmNvbWluZ0pzb24pOwoKLyoqCiAqIEdldCB0aGUgaW5jb21pbmcgdXNlcidzIHVzZXJuYW1lIGFuZCByZWFsbS4KICogTm90aWNlIHRoZSB1c2Ugb2YgYC5hc1N0cmluZygpYC4KICovCnZhciB1c2VybmFtZSA9IHNoYXJlZFN0YXRlLmdldCgidXNlcm5hbWUiKS5hc1N0cmluZygpOwp2YXIgcmVhbG0gPSBzaGFyZWRTdGF0ZS5nZXQoInJlYWxtIikuYXNTdHJpbmcoKTsKCi8qKgogKiBHZXQgdGhlIHVzZXIncyBzdG9yZWQgcHJvZmlsZXMgZm9yIGFwcHJvcHJpYXRlIHJlYWxtLgogKiBSZXR1cm5zIGEgX3NwZWNpYWxfIG9iamVjdCB3aXRoIG1ldGhvZHMgZm9yIHByb2ZpbGUgZGF0YQogKi8KdmFyIHN0b3JlZFByb2ZpbGVzID0gZGV2aWNlUHJvZmlsZXNEYW8uZ2V0RGV2aWNlUHJvZmlsZXModXNlcm5hbWUsIHJlYWxtKTsKCi8vIERlZmF1bHQgdG8gYG91dGNvbWVgIG9mICd1bmtub3duRGV2aWNlJwpvdXRjb21lID0gJ3Vua25vd25EZXZpY2UnOwoKaWYgKHN0b3JlZFByb2ZpbGVzKSB7CiAgICB2YXIgaSA9IDA7CiAgICAvLyBOT1RFOiBgLnNpemUoKWAgbWV0aG9kIHJldHVybnMgdGhlIG51bWJlciBvZiBzdG9yZWQgcHJvZmlsZXMKICAgIHZhciBsZW4gPSBzdG9yZWRQcm9maWxlcy5zaXplKCk7CgogICAgZm9yIChpOyBpIDwgbGVuOyBpKyspIHsKICAgICAgICAvKioKICAgICAgICAgKiBHZXQgdGhlIHN0b3JlZCBwcm9maWxlLgogICAgICAgICAqIFJldHVybnMgc2VyaWFsaXplZCBKU09OICh0eXBlIHN0cmluZyk7IHBhcnNpbmcgdGhpcyB3aWxsIHJlc3VsdAogICAgICAgICAqIGEgbmF0aXZlIEpTIG9iamVjdC4KICAgICAgICAgKi8KICAgICAgICB2YXIgc3RvcmVkSnNvbiA9IHN0b3JlZFByb2ZpbGVzLmdldChpKTsKICAgICAgICB2YXIgc3RvcmVkID0gSlNPTi5wYXJzZShzdG9yZWRKc29uKTsKCiAgICAgICAgLyoqCiAgICAgICAgICogRmluZCBhIHN0b3JlZCBwcm9maWxlIHdpdGggdGhlIHNhbWUgaWRlbnRpZmllci4KICAgICAgICAgKi8KICAgICAgICBpZiAoaW5jb21pbmcuaWRlbnRpZmllciA9PT0gc3RvcmVkLmlkZW50aWZpZXIpIHsKCiAgICAgICAgICAgIC8qKgogICAgICAgICAgICAgKiBOb3cgdGhhdCB5b3UndmUgZm91bmQgdGhlIGFwcHJvcHJpYXRlIHByb2ZpbGUsIHlvdSB3aWxsIHBlcmZvcm0KICAgICAgICAgICAgICogdGhlIGxvZ2ljIGhlcmUgdG8gbWF0Y2ggdGhlIHZhbHVlcyBvZiB0aGUgYGluY29taW5nYCBwcm9maWxlCiAgICAgICAgICAgICAqIHdpdGggdGhhdCBvZiB0aGUgYHN0b3JlZGAgcHJvZmlsZS4KICAgICAgICAgICAgICoKICAgICAgICAgICAgICogVGhlIHJlc3VsdCBvZiB0aGUgbWF0Y2hpbmcgbG9naWMgaXMgYXNzaWduZWQgdG8gYG91dGNvbWVgLiBTaW5jZQogICAgICAgICAgICAgKiB3ZSBoYXZlIHByb2ZpbGVzIG9mIHRoZSBzYW1lIGlkZW50aWZpZXIsIHRoZSB2YWx1ZSAodHlwZSBzdHJpbmcpCiAgICAgICAgICAgICAqIHNob3VsZCBub3cgYmUgZWl0aGVyICd0cnVlJyBvciAnZmFsc2UnIChwcm9wZXJ0aWVzIG1hdGNoZWQgb3Igbm90KS4KICAgICAgICAgICAgICoKICAgICAgICAgICAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24gYWJvdXQgdGhpcyB0b3BpYywgdmlzaXQgdGhpcyBHaXRodWIgcmVwbzoKICAgICAgICAgICAgICogaHR0cHM6Ly9naXRodWIuY29tL0ZvcmdlUm9jay9mb3JnZXJvY2stZGV2aWNlLW1hdGNoLXNjcmlwdAogICAgICAgICAgICAgKi8KICAgICAgICAgICAgb3V0Y29tZSA9ICdmYWxzZSc7CiAgICAgICAgfQogICAgfQp9",
  },
  {
    "_id": "9535446c-0ff6-4a76-8576-616599119d64",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Remove button from page.",
    "evaluatorVersion": "1.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Remove Button",
    "script": "LyogUmVtb3ZlIEJ1dHRvbgogKgogKiBBdXRob3I6IHZvbGtlci5zY2hldWJlckBmb3JnZXJvY2suY29tCiAqIAogKiBIaWRlIGJ1dHRvbnMgb24gdGhlIGpvdXJuZXkgcGFnZS4KICogCiAqIFRoaXMgc2NyaXB0IGRvZXMgbm90IG5lZWQgdG8gYmUgcGFyYW1ldHJpemVkLiBJdCB3aWxsIHdvcmsgcHJvcGVybHkgYXMgaXMuCiAqIAogKiBUaGUgU2NyaXB0ZWQgRGVjaXNpb24gTm9kZSBuZWVkcyB0aGUgZm9sbG93aW5nIG91dGNvbWVzIGRlZmluZWQ6CiAqIC0gdHJ1ZQogKi8KKGZ1bmN0aW9uICgpIHsKICAgIHZhciBzY3JpcHQgPSAiQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2J1dHRvbicpKS5mb3JFYWNoKGZ1bmN0aW9uIChlKSB7ZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnfSkiCiAgICB2YXIgZnIgPSBKYXZhSW1wb3J0ZXIoCiAgICAgICAgb3JnLmZvcmdlcm9jay5vcGVuYW0uYXV0aC5ub2RlLmFwaS5BY3Rpb24sCiAgICAgICAgamF2YXguc2VjdXJpdHkuYXV0aC5jYWxsYmFjay5UZXh0T3V0cHV0Q2FsbGJhY2ssCiAgICAgICAgY29tLnN1bi5pZGVudGl0eS5hdXRoZW50aWNhdGlvbi5jYWxsYmFja3MuU2NyaXB0VGV4dE91dHB1dENhbGxiYWNrCiAgICApCiAgICB2YXIgbWVzc2FnZSA9ICIgIgogICAgaWYgKGNhbGxiYWNrcy5pc0VtcHR5KCkpIHsKICAgICAgICBhY3Rpb24gPSBmci5BY3Rpb24uc2VuZCgKICAgICAgICAgICAgbmV3IGZyLlRleHRPdXRwdXRDYWxsYmFjaygKICAgICAgICAgICAgICAgIGZyLlRleHRPdXRwdXRDYWxsYmFjay5JTkZPUk1BVElPTiwKICAgICAgICAgICAgICAgIG1lc3NhZ2UKICAgICAgICAgICAgKSwKICAgICAgICAgICAgbmV3IGZyLlNjcmlwdFRleHRPdXRwdXRDYWxsYmFjayhzY3JpcHQpCiAgICAgICAgKS5idWlsZCgpCiAgICB9Cn0oKSk7",
  },
  {
    "_id": "472534ec-a25f-468d-a606-3fb1935190df",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Normalizes raw profile data from WeChat",
    "evaluatorVersion": "1.0",
    "language": "GROOVY",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "WeChat Profile Normalization",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjAgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLmZpZWxkCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5qc29uCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5vYmplY3QKCnJldHVybiBqc29uKG9iamVjdCgKICAgICAgICBmaWVsZCgiaWQiLCByYXdQcm9maWxlLm9wZW5pZCksCiAgICAgICAgZmllbGQoImRpc3BsYXlOYW1lIiwgcmF3UHJvZmlsZS5uaWNrbmFtZSksCiAgICAgICAgZmllbGQoInBob3RvVXJsIiwgcmF3UHJvZmlsZS5oZWFkaW1ndXJsKSwKICAgICAgICBmaWVsZCgidXNlcm5hbWUiLCByYXdQcm9maWxlLm5pY2tuYW1lKSkp",
  },
  {
    "_id": "6325cf19-a49b-471e-8d26-7e4df76df0e2",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Normalizes raw profile data from GitHub",
    "evaluatorVersion": "1.0",
    "language": "GROOVY",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Okta Profile Normalization",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjIgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLmZpZWxkCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5qc29uCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5vYmplY3QKCmxvZ2dlci53YXJuaW5nKCJPa3RhIHJhd1Byb2ZpbGU6ICIrcmF3UHJvZmlsZSkKCnJldHVybiBqc29uKG9iamVjdCgKICAgICAgICBmaWVsZCgiaWQiLCByYXdQcm9maWxlLmlkKSwKICAgICAgICBmaWVsZCgiZGlzcGxheU5hbWUiLCByYXdQcm9maWxlLm5hbWUpLAogICAgICAgIGZpZWxkKCJnaXZlbk5hbWUiLCByYXdQcm9maWxlLmZpcnN0X25hbWUpLAogICAgICAgIGZpZWxkKCJmYW1pbHlOYW1lIiwgcmF3UHJvZmlsZS5sYXN0X25hbWUpLAogICAgICAgIGZpZWxkKCJwaG90b1VybCIsIHJhd1Byb2ZpbGUucGljdHVyZS5kYXRhLnVybCksCiAgICAgICAgZmllbGQoImVtYWlsIiwgcmF3UHJvZmlsZS5lbWFpbCksCiAgICAgICAgZmllbGQoInVzZXJuYW1lIiwgcmF3UHJvZmlsZS5wcmVmZXJyZWRfdXNlcm5hbWUpKSk=",
  },
  {
    "_id": "7b88752e-5529-459c-a970-1fb78ff0d87f",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "null",
    "evaluatorVersion": "1.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Set Email Verified",
    "script": "dmFyIGZyID0gSmF2YUltcG9ydGVyKAogIG9yZy5mb3JnZXJvY2sub3BlbmFtLmF1dGgubm9kZS5hcGkKKTsKd2l0aCAoZnIpIHsKICAKICB2YXIgdXNlcm5hbWUgPSBzaGFyZWRTdGF0ZS5nZXQoIl9pZCIpCiAgdmFyIGF0dHJpYnV0ZSA9ICJmci1hdHRyLXN0cjEiCiAKICBpZFJlcG9zaXRvcnkuc2V0QXR0cmlidXRlKHVzZXJuYW1lLCBhdHRyaWJ1dGUsIFsidmVyaWZpZWQiXSk7CiAgCiAgb3V0Y29tZSA9ICJ0cnVlIgp9",
  },
  {
    "_id": "1f389a3d-21cf-417c-a6d3-42ea620071f0",
    "context": "OIDC_CLAIMS",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Internal OIDC Claims script",
    "evaluatorVersion": "1.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "ForgeRock Internal: OIDC Claims Script",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMTQtMjAyMyBGb3JnZVJvY2sgQVMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQKICoKICogVXNlIG9mIHRoaXMgY29kZSByZXF1aXJlcyBhIGNvbW1lcmNpYWwgc29mdHdhcmUgbGljZW5zZSB3aXRoIEZvcmdlUm9jayBBUwogKiBvciB3aXRoIG9uZSBvZiBpdHMgYWZmaWxpYXRlcy4gQWxsIHVzZSBzaGFsbCBiZSBleGNsdXNpdmVseSBzdWJqZWN0CiAqIHRvIHN1Y2ggbGljZW5zZSBiZXR3ZWVuIHRoZSBsaWNlbnNlZSBhbmQgRm9yZ2VSb2NrIEFTLgogKi8KCi8qCiAqIFRoaXMgc2NyaXB0IGNvbXB1dGVzIGNsYWltIHZhbHVlcyByZXR1cm5lZCBpbiBJRCB0b2tlbnMgYW5kL29yIGF0IHRoZSBVc2VySW5mbyBFbmRwb2ludC4KICogVGhlIGNsYWltIHZhbHVlcyBhcmUgY29tcHV0ZWQgZm9yOgogKiB0aGUgY2xhaW1zIGRlcml2ZWQgZnJvbSB0aGUgcmVxdWVzdGVkIHNjb3BlcywKICogdGhlIGNsYWltcyBwcm92aWRlZCBieSB0aGUgYXV0aG9yaXphdGlvbiBzZXJ2ZXIsCiAqIGFuZCB0aGUgY2xhaW1zIHJlcXVlc3RlZCBieSB0aGUgY2xpZW50IHZpYSB0aGUgY2xhaW1zIHBhcmFtZXRlci4KICoKICogSW4gdGhlIENPTkZJR1VSQVRJT04gQU5EIENVU1RPTUlaQVRJT04gc2VjdGlvbiwgeW91IGNhbgogKiBkZWZpbmUgdGhlIHNjb3BlLXRvLWNsYWltcyBtYXBwaW5nLCBhbmQKICogYXNzaWduIHRvIGVhY2ggY2xhaW0gYSByZXNvbHZlciBmdW5jdGlvbiB0aGF0IHdpbGwgY29tcHV0ZSB0aGUgY2xhaW0gdmFsdWUuCiAqCiAqIERlZmluZWQgdmFyaWFibGVzIChjbGFzcyByZWZlcmVuY2VzIGFyZSBwcm92aWRlZCBiZWxvdyk6CiAqIHNjb3BlcyAtIFNldDxTdHJpbmc+ICg2KS4KICogICAgICAgICAgQWx3YXlzIHByZXNlbnQsIHRoZSByZXF1ZXN0ZWQgc2NvcGVzLgogKiBjbGFpbXMgLSBNYXA8U3RyaW5nLCBPYmplY3Q+ICg1KS4KICogICAgICAgICAgQWx3YXlzIHByZXNlbnQsIGRlZmF1bHQgc2VydmVyIHByb3ZpZGVkIGNsYWltcy4KICogY2xhaW1PYmplY3RzIC0gTGlzdDxDbGFpbT4gKDcsIDIpLgogKiAgICAgICAgICAgICAgICBBbHdheXMgcHJlc2VudCwgdGhlIGRlZmF1bHQgc2VydmVyIHByb3ZpZGVkIGNsYWltcy4KICogcmVxdWVzdGVkQ2xhaW1zIC0gTWFwPFN0cmluZywgU2V0PFN0cmluZz4+ICg1KS4KICogICAgICAgICAgICAgICAgICAgQWx3YXlzIHByZXNlbnQsIG5vdCBlbXB0eSBpZiB0aGUgcmVxdWVzdCBjb250YWlucyB0aGUgY2xhaW1zIHBhcmFtZXRlciBhbmQgdGhlIHNlcnZlciBoYXMgZW5hYmxlZAogKiAgICAgICAgICAgICAgICAgICBjbGFpbXNfcGFyYW1ldGVyX3N1cHBvcnRlZC4gQSBtYXAgb2YgdGhlIHJlcXVlc3RlZCBjbGFpbXMgdG8gcG9zc2libGUgdmFsdWVzLCBvdGhlcndpc2UgZW1wdHk7CiAqICAgICAgICAgICAgICAgICAgIHJlcXVlc3RlZCBjbGFpbXMgd2l0aCBubyByZXF1ZXN0ZWQgdmFsdWVzIHdpbGwgaGF2ZSBhIGtleSBidXQgbm8gdmFsdWUgaW4gdGhlIG1hcC4gQSBrZXkgd2l0aAogKiAgICAgICAgICAgICAgICAgICBhIHNpbmdsZSB2YWx1ZSBpbiBpdHMgU2V0ICg2KSBpbmRpY2F0ZXMgdGhhdCB0aGlzIGlzIHRoZSBvbmx5IHZhbHVlIHRoYXQgc2hvdWxkIGJlIHJldHVybmVkLgogKiByZXF1ZXN0ZWRUeXBlZENsYWltcyAtIExpc3Q8Q2xhaW0+ICg3LCAyKS4KICogICAgICAgICAgICAgICAgICAgICAgICBBbHdheXMgcHJlc2VudCwgdGhlIHJlcXVlc3RlZCBjbGFpbXMuCiAqICAgICAgICAgICAgICAgICAgICAgICAgUmVxdWVzdGVkIGNsYWltcyB3aXRoIG5vIHJlcXVlc3RlZCB2YWx1ZXMgd2lsbCBoYXZlIGEgY2xhaW0gd2l0aCBubyB2YWx1ZXMuCiAqICAgICAgICAgICAgICAgICAgICAgICAgQSBjbGFpbSB3aXRoIGEgc2luZ2xlIHZhbHVlIGluZGljYXRlcyB0aGlzIGlzIHRoZSBvbmx5IHZhbHVlIHRoYXQgc2hvdWxkIGJlIHJldHVybmVkLgogKiBjbGFpbXNMb2NhbGVzIC0gTGlzdDxTdHJpbmc+ICg3KS4KICogICAgICAgICAgICAgICAgIFRoZSB2YWx1ZXMgZnJvbSB0aGUgJ2NsYWltc19sb2NhbGVzJyBwYXJhbWV0ZXIuCiAqICAgICAgICAgICAgICAgICBTZWUgaHR0cHM6Ly9vcGVuaWQubmV0L3NwZWNzL29wZW5pZC1jb25uZWN0LWNvcmUtMV8wLmh0bWwjQ2xhaW1zTGFuZ3VhZ2VzQW5kU2NyaXB0cyBmb3IgdGhlIE9JREMgc3BlY2lmaWNhdGlvbiBkZXRhaWxzLgogKiByZXF1ZXN0UHJvcGVydGllcyAtIFVubW9kaWZpYWJsZSBNYXAgKDUpLgogKiAgICAgICAgICAgICAgICAgICAgIEFsd2F5cyBwcmVzZW50LCBjb250YWlucyBhIG1hcCBvZiByZXF1ZXN0IHByb3BlcnRpZXM6CiAqICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdFVyaSAtIFRoZSByZXF1ZXN0IFVSSS4KICogICAgICAgICAgICAgICAgICAgICByZWFsbSAtIFRoZSByZWFsbSB0aGF0IHRoZSByZXF1ZXN0IHJlbGF0ZXMgdG8uCiAqICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdFBhcmFtcyAtIEEgbWFwIG9mIHRoZSByZXF1ZXN0IHBhcmFtcyBhbmQvb3IgcG9zdGVkIGRhdGEuCiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEVhY2ggdmFsdWUgaXMgYSBsaXN0IG9mIG9uZSBvciBtb3JlIHByb3BlcnRpZXMuCiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBsZWFzZSBub3RlIHRoYXQgdGhlc2Ugc2hvdWxkIGJlIGhhbmRsZWQgaW4gYWNjb3JkYW5jZSB3aXRoIE9XQVNQIGJlc3QgcHJhY3RpY2VzOgogKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBodHRwczovL293YXNwLm9yZy93d3ctY29tbXVuaXR5L3Z1bG5lcmFiaWxpdGllcy9VbnNhZmVfdXNlX29mX1JlZmxlY3Rpb24uCiAqIGNsaWVudFByb3BlcnRpZXMgLSBVbm1vZGlmaWFibGUgTWFwICg1KS4KICogICAgICAgICAgICAgICAgICAgIFByZXNlbnQgaWYgdGhlIGNsaWVudCBzcGVjaWZpZWQgaW4gdGhlIHJlcXVlc3Qgd2FzIGlkZW50aWZpZWQsIGNvbnRhaW5zIGEgbWFwIG9mIGNsaWVudCBwcm9wZXJ0aWVzOgogKiAgICAgICAgICAgICAgICAgICAgY2xpZW50SWQgLSBUaGUgY2xpZW50J3MgVVJJIGZvciB0aGUgcmVxdWVzdCBsb2NhbGUuCiAqICAgICAgICAgICAgICAgICAgICBhbGxvd2VkR3JhbnRUeXBlcyAtIExpc3Qgb2YgdGhlIGFsbG93ZWQgZ3JhbnQgdHlwZXMgKG9yZy5mb3JnZXJvY2sub2F1dGgyLmNvcmUuR3JhbnRUeXBlKSBmb3IgdGhlIGNsaWVudC4KICogICAgICAgICAgICAgICAgICAgIGFsbG93ZWRSZXNwb25zZVR5cGVzIC0gTGlzdCBvZiB0aGUgYWxsb3dlZCByZXNwb25zZSB0eXBlcyBmb3IgdGhlIGNsaWVudC4KICogICAgICAgICAgICAgICAgICAgIGFsbG93ZWRTY29wZXMgLSBMaXN0IG9mIHRoZSBhbGxvd2VkIHNjb3BlcyBmb3IgdGhlIGNsaWVudC4KICogICAgICAgICAgICAgICAgICAgIGN1c3RvbVByb3BlcnRpZXMgLSBBIG1hcCBvZiB0aGUgY3VzdG9tIHByb3BlcnRpZXMgb2YgdGhlIGNsaWVudC4KICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMaXN0cyBvciBtYXBzIHdpbGwgYmUgaW5jbHVkZWQgYXMgc3ViLW1hcHM7IGZvciBleGFtcGxlOgogKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1c3RvbU1hcFtLZXkxXT1WYWx1ZTEgd2lsbCBiZSByZXR1cm5lZCBhcyBjdXN0b21NYXAgLT4gS2V5MSAtPiBWYWx1ZTEuCiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVG8gYWRkIGN1c3RvbSBwcm9wZXJ0aWVzIHRvIGEgY2xpZW50LCB1cGRhdGUgdGhlIEN1c3RvbSBQcm9wZXJ0aWVzIGZpZWxkCiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW4gQU0gQ29uc29sZSA+IFJlYWxtIE5hbWUgPiBBcHBsaWNhdGlvbnMgPiBPQXV0aCAyLjAgPiBDbGllbnRzID4gQ2xpZW50IElEID4gQWR2YW5jZWQuCiAqIGlkZW50aXR5IC0gQU1JZGVudGl0eSAoMykuCiAqICAgICAgICAgICAgQWx3YXlzIHByZXNlbnQsIHRoZSBpZGVudGl0eSBvZiB0aGUgcmVzb3VyY2Ugb3duZXIuCiAqIHNlc3Npb24gLSBTU09Ub2tlbiAoNCkuCiAqICAgICAgICAgICBQcmVzZW50IGlmIHRoZSByZXF1ZXN0IGNvbnRhaW5zIHRoZSBzZXNzaW9uIGNvb2tpZSwgdGhlIHVzZXIncyBzZXNzaW9uIG9iamVjdC4KICogc2NyaXB0TmFtZSAtIFN0cmluZyAocHJpbWl0aXZlKS4KICogICAgICAgICAgICAgIEFsd2F5cyBwcmVzZW50LCB0aGUgZGlzcGxheSBuYW1lIG9mIHRoZSBzY3JpcHQuCiAqIGxvZ2dlciAtIEFsd2F5cyBwcmVzZW50LCB0aGUgIk9BdXRoMlByb3ZpZGVyIiBkZWJ1ZyBsb2dnZXIgaW5zdGFuY2U6CiAqICAgICAgICAgIGh0dHBzOi8vYmFja3N0YWdlLmZvcmdlcm9jay5jb20vZG9jcy9hbS83L3NjcmlwdGluZy1ndWlkZS9zY3JpcHRpbmctYXBpLWdsb2JhbC1sb2dnZXIuaHRtbCNzY3JpcHRpbmctYXBpLWdsb2JhbC1sb2dnZXIuCiAqICAgICAgICAgIENvcnJlc3BvbmRpbmcgZmlsZXMgd2lsbCBiZSBwcmVmaXhlZCB3aXRoOiBzY3JpcHRzLk9JRENfQ0xBSU1TLgogKiBodHRwQ2xpZW50IC0gSFRUUCBDbGllbnQgKDgpLgogKiAgICAgICAgICAgICAgQWx3YXlzIHByZXNlbnQsIHRoZSBIVFRQIENsaWVudCBpbnN0YW5jZToKICogICAgICAgICAgICAgIGh0dHBzOi8vYmFja3N0YWdlLmZvcmdlcm9jay5jb20vZG9jcy9hbS83L3NjcmlwdGluZy1ndWlkZS9zY3JpcHRpbmctYXBpLWdsb2JhbC1odHRwLWNsaWVudC5odG1sI3NjcmlwdGluZy1hcGktZ2xvYmFsLWh0dHAtY2xpZW50LgogKiAgICAgICAgICAgICAgSW4gb3JkZXIgdG8gdXNlIHRoZSBjbGllbnQsIHlvdSBtYXkgbmVlZCB0byBhZGQKICogICAgICAgICAgICAgIG9yZy5mb3JnZXJvY2suaHR0cC5DbGllbnQsCiAqICAgICAgICAgICAgICBvcmcuZm9yZ2Vyb2NrLmh0dHAucHJvdG9jb2wuKiwKICogICAgICAgICAgICAgIGFuZCBvcmcuZm9yZ2Vyb2NrLnV0aWwucHJvbWlzZS5Qcm9taXNlSW1wbAogKiAgICAgICAgICAgICAgdG8gdGhlIGFsbG93ZWQgSmF2YSBjbGFzc2VzIGluIHRoZSBzY3JpcHRpbmcgZW5naW5lIGNvbmZpZ3VyYXRpb24sIGFzIGRlc2NyaWJlZCBpbjoKICogICAgICAgICAgICAgIGh0dHBzOi8vYmFja3N0YWdlLmZvcmdlcm9jay5jb20vZG9jcy9hbS83L3NjcmlwdGluZy1ndWlkZS9zY3JpcHQtZW5naW5lLXNlY3VyaXR5Lmh0bWwKICoKICogUmV0dXJuIC0gYSBuZXcgVXNlckluZm9DbGFpbXMoTWFwPFN0cmluZywgT2JqZWN0PiB2YWx1ZXMsIE1hcDxTdHJpbmcsIExpc3Q8U3RyaW5nPj4gY29tcG9zaXRlU2NvcGVzKSAoMSkgb2JqZWN0LgogKiAgICAgICAgICBUaGUgcmVzdWx0IG9mIHRoZSBsYXN0IHN0YXRlbWVudCBpbiB0aGUgc2NyaXB0IGlzIHJldHVybmVkIHRvIHRoZSBzZXJ2ZXIuCiAqICAgICAgICAgIEN1cnJlbnRseSwgdGhlIEltbWVkaWF0ZWx5IEludm9rZWQgRnVuY3Rpb24gRXhwcmVzc2lvbiAoYWxzbyBrbm93biBhcyBTZWxmLUV4ZWN1dGluZyBBbm9ueW1vdXMgRnVuY3Rpb24pCiAqICAgICAgICAgIGlzIHRoZSBsYXN0IChhbmQgb25seSkgc3RhdGVtZW50IGluIHRoaXMgc2NyaXB0LCBhbmQgaXRzIHJldHVybiB2YWx1ZSB3aWxsIGJlY29tZSB0aGUgc2NyaXB0IHJlc3VsdC4KICogICAgICAgICAgRG8gbm90IHVzZSAicmV0dXJuIHZhcmlhYmxlIiBzdGF0ZW1lbnQgb3V0c2lkZSBvZiBhIGZ1bmN0aW9uIGRlZmluaXRpb24uCiAqICAgICAgICAgIFNlZSBSRVNVTFRTIHNlY3Rpb24gZm9yIGFkZGl0aW9uYWwgZGV0YWlscy4KICoKICogQ2xhc3MgcmVmZXJlbmNlOgogKiAoMSkgVXNlckluZm9DbGFpbXMgLSBodHRwczovL2JhY2tzdGFnZS5mb3JnZXJvY2suY29tL2RvY3MvYW0vNy9hcGlkb2NzL29yZy9mb3JnZXJvY2svb2F1dGgyL2NvcmUvVXNlckluZm9DbGFpbXMuaHRtbC4KICogKDIpIENsYWltIC0gaHR0cHM6Ly9iYWNrc3RhZ2UuZm9yZ2Vyb2NrLmNvbS9kb2NzL2FtLzcvYXBpZG9jcy9vcmcvZm9yZ2Vyb2NrL29wZW5pZGNvbm5lY3QvQ2xhaW0uaHRtbCkuCiAqICAgICAgICAgQW4gaW5zdGFuY2Ugb2Ygb3JnLmZvcmdlcm9jay5vcGVuaWRjb25uZWN0LkNsYWltIGhhcyBtZXRob2RzIHRvIGFjY2VzcwogKiAgICAgICAgIHRoZSBjbGFpbSBuYW1lLCByZXF1ZXN0ZWQgdmFsdWVzLCBsb2NhbGUsIGFuZCB3aGV0aGVyIHRoZSBjbGFpbSBpcyBlc3NlbnRpYWwuCiAqICgzKSBBTUlkZW50aXR5IC0gaHR0cHM6Ly9iYWNrc3RhZ2UuZm9yZ2Vyb2NrLmNvbS9kb2NzL2FtLzcvYXBpZG9jcy9jb20vc3VuL2lkZW50aXR5L2lkbS9BTUlkZW50aXR5Lmh0bWwuCiAqICg0KSBTU09Ub2tlbiAtIGh0dHBzOi8vYmFja3N0YWdlLmZvcmdlcm9jay5jb20vZG9jcy9hbS83L2FwaWRvY3MvY29tL2lwbGFuZXQvc3NvL1NTT1Rva2VuLmh0bWwuCiAqICg1KSBNYXAgLSBodHRwczovL2RvY3Mub3JhY2xlLmNvbS9lbi9qYXZhL2phdmFzZS8xMS9kb2NzL2FwaS9qYXZhLmJhc2UvamF2YS91dGlsL0hhc2hNYXAuaHRtbCwKICogICAgICAgICAgIG9yIGh0dHBzOi8vZG9jcy5vcmFjbGUuY29tL2VuL2phdmEvamF2YXNlLzExL2RvY3MvYXBpL2phdmEuYmFzZS9qYXZhL3V0aWwvTGlua2VkSGFzaE1hcC5odG1sLgogKiAoNikgU2V0IC0gaHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vZW4vamF2YS9qYXZhc2UvMTEvZG9jcy9hcGkvamF2YS5iYXNlL2phdmEvdXRpbC9IYXNoU2V0Lmh0bWwuCiAqICg3KSBMaXN0IC0gaHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vZW4vamF2YS9qYXZhc2UvMTEvZG9jcy9hcGkvamF2YS5iYXNlL2phdmEvdXRpbC9BcnJheUxpc3QuaHRtbC4KICogKDgpIENsaWVudCAtIGh0dHBzOi8vYmFja3N0YWdlLmZvcmdlcm9jay5jb20vZG9jcy9hbS83L2FwaWRvY3Mvb3JnL2Zvcmdlcm9jay9odHRwL0NsaWVudC5odG1sLgoqLwoKKGZ1bmN0aW9uICgpIHsKICAgIC8vIFNFVFVQCgogICAgLyoqCiAgICAgKiBDbGFpbSBwcm9jZXNzaW5nIHV0aWxpdGllcy4KICAgICAqIEFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIHJldXNhYmxlIGZ1bmN0aW9ucyBmb3IgcHJvY2Vzc2luZyBjbGFpbXMuCiAgICAgKiBAc2VlIENMQUlNIFBST0NFU1NJTkcgVVRJTElUSUVTIHNlY3Rpb24gZm9yIGRldGFpbHMuCiAgICAgKi8KICAgIHZhciB1dGlscyA9IGdldFV0aWxzKCk7CgogICAgLy8gQ09ORklHVVJBVElPTiBBTkQgQ1VTVE9NSVpBVElPTgoKICAgIC8qKgogICAgICogT0F1dGggMi4wIHNjb3BlIHZhbHVlcyAoc2NvcGVzKSBjYW4gYmUgdXNlZCBieSB0aGUgQ2xpZW50IHRvIHJlcXVlc3QgT0lEQyBjbGFpbXMuCiAgICAgKgogICAgICogQ2FsbCB0aGlzIGNvbmZpZ3VyYXRpb24gbWV0aG9kLCBhbmQgcGFzcyBpbiBhcyB0aGUgZmlyc3QgYXJndW1lbnQKICAgICAqIGFuIG9iamVjdCB0aGF0IG1hcHMgYSBzY29wZSB2YWx1ZSB0byBhbiBhcnJheSBvZiBjbGFpbSBuYW1lcwogICAgICogdG8gc3BlY2lmeSB3aGljaCBjbGFpbXMgbmVlZCB0byBiZSBwcm9jZXNzZWQgYW5kIHJldHVybmVkIGZvciB0aGUgcmVxdWVzdGVkIHNjb3Blcy4KICAgICAqIEBzZWUge0BsaW5rIGh0dHBzOi8vb3BlbmlkLm5ldC9zcGVjcy9vcGVuaWQtY29ubmVjdC1jb3JlLTFfMC5odG1sI1Njb3BlQ2xhaW1zfQogICAgICogZm9yIHRoZSBzY29wZSB2YWx1ZXMgdGhhdCBjb3VsZCBiZSB1c2VkIHRvIHJlcXVlc3QgY2xhaW1zIGFzIGRlZmluZWQgaW4gdGhlIE9JREMgc3BlY2lmaWNhdGlvbi4KICAgICAqCiAgICAgKiBCZWxvdywgZmluZCBhIGRlZmF1bHQgY29uZmlndXJhdGlvbiB0aGF0IGlzIGV4cGVjdGVkIHRvIHdvcmsgaW4gdGhlIGN1cnJlbnQgZW52aXJvbm1lbnQuCiAgICAgKgogICAgICogQ1VTVE9NSVpBVElPTgogICAgICogWW91IGNhbiBjaG9vc2UgdGhlIGNsYWltIG5hbWVzIHJldHVybmVkIGZvciBhIHNjb3BlLgogICAgICovCiAgICB1dGlscy5zZXRTY29wZUNsYWltc01hcCh7CiAgICAgICAgcHJvZmlsZTogWwogICAgICAgICAgICAnbmFtZScsCiAgICAgICAgICAgICdmYW1pbHlfbmFtZScsCiAgICAgICAgICAgICdnaXZlbl9uYW1lJywKICAgICAgICAgICAgJ3pvbmVpbmZvJywKICAgICAgICAgICAgJ2xvY2FsZScKICAgICAgICBdLAogICAgICAgIGVtYWlsOiBbJ2VtYWlsJ10sCiAgICAgICAgYWRkcmVzczogWydhZGRyZXNzJ10sCiAgICAgICAgcGhvbmU6IFsncGhvbmVfbnVtYmVyJ10KICAgIH0pOwoKICAgIC8qKgogICAgICogSW4gdGhpcyBzY3JpcHQsIGVhY2ggY2xhaW0KICAgICAqIGRlcml2ZWQgZnJvbSB0aGUgcmVxdWVzdGVkIHNjb3BlcywKICAgICAqIHByb3ZpZGVkIGJ5IHRoZSBhdXRob3JpemF0aW9uIHNlcnZlciwgYW5kCiAgICAgKiByZXF1ZXN0ZWQgYnkgdGhlIGNsaWVudCB2aWEgdGhlIGNsYWltcyBwYXJhbWV0ZXIKICAgICAqIHdpbGwgYmUgcHJvY2Vzc2VkIGJ5IGEgZnVuY3Rpb24gYXNzb2NpYXRlZCB3aXRoIHRoZSBjbGFpbSBuYW1lLgogICAgICoKICAgICAqIENhbGwgdGhpcyBjb25maWd1cmF0aW9uIG1ldGhvZCwgYW5kIHBhc3MgaW4gYXMgdGhlIGZpcnN0IGFyZ3VtZW50CiAgICAgKiBhbiBvYmplY3QgdGhhdCBtYXBzIGEgY2xhaW0gbmFtZSB0byBhIHJlc29sdmVyIGZ1bmN0aW9uLAogICAgICogd2hpY2ggd2lsbCBiZSBhdXRvbWF0aWNhbGx5IGV4ZWN1dGVkIGZvciBlYWNoIGNsYWltIHByb2Nlc3NlZCBieSB0aGUgc2NyaXB0LgogICAgICoKICAgICAqIFRoZSBjbGFpbSByZXNvbHZlciBmdW5jdGlvbiB3aWxsIHJlY2VpdmUgdGhlIHJlcXVlc3RlZCBjbGFpbSBpbmZvcm1hdGlvbgogICAgICogaW4gYW4gaW5zdGFuY2Ugb2Ygb3JnLmZvcmdlcm9jay5vcGVuaWRjb25uZWN0LkNsYWltIGFzIHRoZSBmaXJzdCBhcmd1bWVudC4KICAgICAqIEBzZWUge0BsaW5rIGh0dHBzOi8vYmFja3N0YWdlLmZvcmdlcm9jay5jb20vZG9jcy9hbS83L2FwaWRvY3Mvb3JnL2Zvcmdlcm9jay9vcGVuaWRjb25uZWN0L0NsYWltLmh0bWx9CiAgICAgKiBmb3IgZGV0YWlscyBvbiB0aGUgQ2xhaW0gY2xhc3MuCiAgICAgKgogICAgICogSWYgdGhlIGNsYWltIHJlc29sdmVyIGZ1bmN0aW9uIHJldHVybnMgYSB2YWx1ZSwKICAgICAqIG90aGVyIHRoYW4gdW5kZWZpbmVkIG9yIG51bGwsCiAgICAgKiB0aGUgY2xhaW0gd2lsbCBiZSBpbmNsdWRlZCBpbiB0aGUgc2NyaXB0J3MgcmVzdWx0cy4KICAgICAqCiAgICAgKiBUaGUgQ2xhaW0gaW5zdGFuY2UgcHJvdmlkZXMgbWV0aG9kcyB0byBjaGVjawogICAgICogd2hhdCB0aGUgbmFtZSBvZiB0aGUgY2xhaW0gaXMsCiAgICAgKiB3aGljaCB2YWx1ZXMgdGhlIGNsYWltIHJlcXVlc3QgY29udGFpbnMsCiAgICAgKiB3aGV0aGVyIHRoZSBjbGFpbSBpcyBlc3NlbnRpYWwsIGFuZAogICAgICogd2hpY2ggbG9jYWxlIHRoZSBjbGFpbSBpcyBhc3NvY2lhdGVkIHdpdGguCiAgICAgKiBUaGUgcmVzb2x2ZXIgZnVuY3Rpb24gY2FuIGNvbnNpZGVyIHRoaXMgaW5mb3JtYXRpb24gd2hlbiBjb21wdXRpbmcgYW5kIHJldHVybmluZyB0aGUgY2xhaW0gdmFsdWUuCiAgICAgKgogICAgICogQmVsb3csIGZpbmQgYSBkZWZhdWx0IGNvbmZpZ3VyYXRpb24gdGhhdCBpcyBleHBlY3RlZCB0byB3b3JrIGluIHRoZSBjdXJyZW50IGVudmlyb25tZW50LgogICAgICogQSByZXVzYWJsZSBmdW5jdGlvbiwgdXRpbHMuZ2V0VXNlclByb2ZpbGVDbGFpbVJlc29sdmVyKFN0cmluZyBhdHRyaWJ1dGUtbmFtZSksCiAgICAgKiBpcyBjYWxsZWQgdG8gcmV0dXJuIGEgY2xhaW0gcmVzb2x2ZXIgZnVuY3Rpb24gYmFzZWQgb24gYSB1c2VyIHByb2ZpbGUgYXR0cmlidXRlLgogICAgICogQHNlZSBDTEFJTSBSRVNPTFZFUlMgc2VjdGlvbiBmb3IgdGhlIGltcGxlbWVudGF0aW9uIGRldGFpbHMgYW5kIGV4YW1wbGVzLgogICAgICogRm9yIHRoZSBhZGRyZXNzIGNsYWltLCBhbiBleGFtcGxlIG9mIGEgY2xhaW0gcmVzb2x2ZXIgdGhhdCB1c2VzIGFub3RoZXIgY2xhaW0gcmVzb2x2ZXIgaXMgcHJvdmlkZWQuCiAgICAgKgogICAgICogQ1VTVE9NSVpBVElPTgogICAgICogWW91IGNhbiByZXVzZSB0aGUgcHJlZGVmaW5lZCB1dGlscyBtZXRob2RzIHdpdGggeW91ciBjdXN0b20gYXJndW1lbnRzLgogICAgICogWW91IGNhbiBhbHNvIHNwZWNpZnkgYSBjdXN0b20gcmVzb2x2ZXIgZnVuY3Rpb24gZm9yIGEgY2xhaW0gbmFtZSwKICAgICAqIHRoYXQgd2lsbCBjb21wdXRlIGFuZCByZXR1cm4gdGhlIGNsYWltIHZhbHVl4oCUYXMgc2hvd24gaW4gdGhlIGNvbW1lbnRlZCBvdXQgZXhhbXBsZSBiZWxvdy4KICAgICAqLwogICAgdXRpbHMuc2V0Q2xhaW1SZXNvbHZlcnMoewogICAgICAgIC8qCiAgICAgICAgLy8gQW4gZXhhbXBsZSBvZiBhIHNpbXBsZSBjbGFpbSByZXNvbHZlciBmdW5jdGlvbiB0aGF0IGlzIGRlZmluZWQgZm9yIGEgY2xhaW0KICAgICAgICAvLyBkaXJlY3RseSBpbiB0aGUgY29uZmlndXJhdGlvbiBvYmplY3Q6CiAgICAgICAgY3VzdG9tLWNsYWltLW5hbWU6IGZ1bmN0aW9uIChyZXF1ZXN0ZWRDbGFpbSkgewogICAgICAgICAgICAvLyBJbiB0aGlzIGNhc2UsIGluaXRpYWxseSwgdGhlIGNsYWltIHZhbHVlIGNvbWVzIHN0cmFpZ2h0IGZyb20gYSB1c2VyIHByb2ZpbGUgYXR0cmlidXRlIHZhbHVlOgogICAgICAgICAgICB2YXIgY2xhaW1WYWx1ZSA9IGlkZW50aXR5LmdldEF0dHJpYnV0ZSgnY3VzdG9tLWF0dHJpYnV0ZS1uYW1lJykudG9BcnJheSgpWzBdCgogICAgICAgICAgICAvLyBPcHRpb25hbGx5LCBwcm92aWRlIGFkZGl0aW9uYWwgbG9naWMgZm9yIHByb2Nlc3NpbmcgKGZpbHRlcmluZywgZm9ybWF0dGluZywgZXRjLikgdGhlIGNsYWltIHZhbHVlLgogICAgICAgICAgICAvLyBZb3UgY2FuIHVzZToKICAgICAgICAgICAgLy8gcmVxdWVzdGVkQ2xhaW0uZ2V0TmFtZSgpCiAgICAgICAgICAgIC8vIHJlcXVlc3RlZENsYWltLmdldFZhbHVlcygpCiAgICAgICAgICAgIC8vIHJlcXVlc3RlZENsYWltLmdldExvY2FsZSgpCiAgICAgICAgICAgIC8vIHJlcXVlc3RlZENsYWltLmlzRXNzZW50aWFsKCkKCiAgICAgICAgICAgIHJldHVybiBjbGFpbVZhbHVlCiAgICAgICAgfSwKICAgICAgICAqLwogICAgICAgIC8qKgogICAgICAgICAqIFRoZSB1c2Ugb2YgdXRpbHMuZ2V0VXNlclByb2ZpbGVDbGFpbVJlc29sdmVyIHNob3dzIGhvdwogICAgICAgICAqIGFuIGFyZ3VtZW50IHBhc3NlZCB0byBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIGNsYWltIHJlc29sdmVyCiAgICAgICAgICogYmVjb21lcyBhdmFpbGFibGUgdG8gdGhlIHJlc29sdmVyIGZ1bmN0aW9uICh2aWEgaXRzIGxleGljYWwgY29udGV4dCkuCiAgICAgICAgICovCiAgICAgICAgbmFtZTogdXRpbHMuZ2V0VXNlclByb2ZpbGVDbGFpbVJlc29sdmVyKCdjbicpLAogICAgICAgIGZhbWlseV9uYW1lOiB1dGlscy5nZXRVc2VyUHJvZmlsZUNsYWltUmVzb2x2ZXIoJ3NuJyksCiAgICAgICAgZ2l2ZW5fbmFtZTogdXRpbHMuZ2V0VXNlclByb2ZpbGVDbGFpbVJlc29sdmVyKCdnaXZlbm5hbWUnKSwKICAgICAgICB6b25laW5mbzogdXRpbHMuZ2V0VXNlclByb2ZpbGVDbGFpbVJlc29sdmVyKCdwcmVmZXJyZWR0aW1lem9uZScpLAogICAgICAgIGxvY2FsZTogdXRpbHMuZ2V0VXNlclByb2ZpbGVDbGFpbVJlc29sdmVyKCdwcmVmZXJyZWRsb2NhbGUnKSwKICAgICAgICBlbWFpbDogdXRpbHMuZ2V0VXNlclByb2ZpbGVDbGFpbVJlc29sdmVyKCdtYWlsJyksCiAgICAgICAgYWRkcmVzczogdXRpbHMuZ2V0QWRkcmVzc0NsYWltUmVzb2x2ZXIoCiAgICAgICAgICAgIC8qKgogICAgICAgICAgICAgKiBUaGUgcGFzc2VkIGluIHVzZXIgcHJvZmlsZSBjbGFpbSByZXNvbHZlciBmdW5jdGlvbgogICAgICAgICAgICAgKiBjYW4gYmUgdXNlZCBieSB0aGUgYWRkcmVzcyBjbGFpbSByZXNvbHZlciBmdW5jdGlvbgogICAgICAgICAgICAgKiB0byBvYnRhaW4gdGhlIGNsYWltIHZhbHVlIHRvIGJlIGZvcm1hdHRlZCBhcyBwZXIgdGhlIE9JREMgc3BlY2lmaWNhdGlvbjoKICAgICAgICAgICAgICogQHNlZSBodHRwczovL29wZW5pZC5uZXQvc3BlY3Mvb3BlbmlkLWNvbm5lY3QtY29yZS0xXzAuaHRtbCNBZGRyZXNzQ2xhaW0uCiAgICAgICAgICAgICAqLwogICAgICAgICAgICB1dGlscy5nZXRVc2VyUHJvZmlsZUNsYWltUmVzb2x2ZXIoJ3Bvc3RhbGFkZHJlc3MnKQogICAgICAgICksCiAgICAgICAgcGhvbmVfbnVtYmVyOiB1dGlscy5nZXRVc2VyUHJvZmlsZUNsYWltUmVzb2x2ZXIoJ3RlbGVwaG9uZW51bWJlcicpCiAgICB9KTsKCiAgICAvLyBDTEFJTSBQUk9DRVNTSU5HIFVUSUxJVElFUwoKICAgIC8qKgogICAgICogQHJldHVybnMge29iamVjdH0gQW4gb2JqZWN0IHRoYXQgY29udGFpbnMgcmV1c2FibGUgY2xhaW0gcHJvY2Vzc2luZyB1dGlsaXRpZXMuCiAgICAgKiBAc2VlIFBVQkxJQyBNRVRIT0RTIHNlY3Rpb24gYW5kIHRoZSByZXR1cm4gc3RhdGVtZW50IGZvciB0aGUgbGlzdCBvZiBleHBvcnRlZCBmdW5jdGlvbnMuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGdldFV0aWxzICgpIHsKICAgICAgICAvLyBJTVBPUlQgSkFWQQoKICAgICAgICAvKioKICAgICAgICAgKiBQcm92aWRlcyBKYXZhIHNjcmlwdGluZyBmdW5jdGlvbmFsaXR5LgogICAgICAgICAqIEBzZWUge0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvTW96aWxsYS9Qcm9qZWN0cy9SaGluby9TY3JpcHRpbmdfSmF2YSNqYXZhaW1wb3J0ZXJfY29uc3RydWN0b3J9LgogICAgICAgICAqLwogICAgICAgIHZhciBmckphdmEgPSBKYXZhSW1wb3J0ZXIoCiAgICAgICAgICAgIG9yZy5mb3JnZXJvY2sub2F1dGgyLmNvcmUuZXhjZXB0aW9ucy5JbnZhbGlkUmVxdWVzdEV4Y2VwdGlvbiwKICAgICAgICAgICAgb3JnLmZvcmdlcm9jay5vYXV0aDIuY29yZS5Vc2VySW5mb0NsYWltcywKICAgICAgICAgICAgb3JnLmZvcmdlcm9jay5vcGVuaWRjb25uZWN0LkNsYWltLAoKICAgICAgICAgICAgamF2YS51dGlsLkxpbmtlZEhhc2hNYXAsCiAgICAgICAgICAgIGphdmEudXRpbC5BcnJheUxpc3QKICAgICAgICApOwoKICAgICAgICAvLyBTRVQgVVAgQ09ORklHVVJBVElPTgoKICAgICAgICAvKioKICAgICAgICAgKiBQbGFjZWhvbGRlciBmb3IgYSBjb25maWd1cmF0aW9uIG9wdGlvbiB0aGF0IGNvbnRhaW5zCiAgICAgICAgICogYW4gb2JqZWN0IHRoYXQgbWFwcyB0aGUgc3VwcG9ydGVkIHNjb3BlIHZhbHVlcyAoc2NvcGVzKQogICAgICAgICAqIGFuZCB0aGUgY29ycmVzcG9uZGluZyBjbGFpbSBuYW1lcyBmb3IgZWFjaCBzY29wZSB2YWx1ZS4KICAgICAgICAgKi8KICAgICAgICB2YXIgc2NvcGVDbGFpbXNNYXA7CgogICAgICAgIC8qKgogICAgICAgICAqIFBsYWNlaG9sZGVyIGZvciBhIGNvbmZpZ3VyYXRpb24gb3B0aW9uIHRoYXQgY29udGFpbnMKICAgICAgICAgKiBhbiBvYmplY3QgdGhhdCBtYXBzIHRoZSBzdXBwb3J0ZWQgY2xhaW0gbmFtZXMKICAgICAgICAgKiBhbmQgdGhlIHJlc29sdmVyIGZ1bmN0aW9ucyByZXR1cm5pbmcgdGhlIGNsYWltIHZhbHVlLgogICAgICAgICAqLwogICAgICAgIHZhciBjbGFpbVJlc29sdmVyczsKCiAgICAgICAgLyoqCiAgICAgICAgICogQSAocHVibGljKSBtZXRob2QgdGhhdCBhY2NlcHRzIGFuIG9iamVjdCB0aGF0IG1hcHMgdGhlIHN1cHBvcnRlZCBzY29wZXMgYW5kIHRoZSBjb3JyZXNwb25kaW5nIGNsYWltIG5hbWVzLAogICAgICAgICAqIGFuZCBhc3NpZ25zIGl0IHRvIGEgKHByaXZhdGUpIHZhcmlhYmxlIHRoYXQgc2VydmVzIGFzIGEgY29uZmlndXJhdGlvbiBvcHRpb24uCiAgICAgICAgICogQHBhcmFtIHtvYmplY3R9IHBhcmFtcyAtIEFuIG9iamVjdCB0aGF0IG1hcHMgZWFjaCBzdXBwb3J0ZWQgc2NvcGUgdmFsdWUgdG8gYW4gYXJyYXkgb2YgY2xhaW0gbmFtZXMsCiAgICAgICAgICogaW4gb3JkZXIgdG8gc3BlY2lmeSB3aGljaCBjbGFpbXMgbmVlZCB0byBiZSBwcm9jZXNzZWQgZm9yIHRoZSByZXF1ZXN0ZWQgc2NvcGVzLgogICAgICAgICAqIEBzZWUge0BsaW5rIGh0dHBzOi8vb3BlbmlkLm5ldC9zcGVjcy9vcGVuaWQtY29ubmVjdC1jb3JlLTFfMC5odG1sI1Njb3BlQ2xhaW1zfSBmb3IgZGV0YWlscy4KICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBbcGFyYW1zLnByb2ZpbGVdIC0gQW4gYXJyYXkgb2YgY2xhaW0gbmFtZXMgdG8gYmUgcmV0dXJuZWQgaWYgdGhlIHByb2ZpbGUgc2NvcGUgaXMgcmVxdWVzdGVkLgogICAgICAgICAqIEBwYXJhbSB7c3RyaW5nW119IFtwYXJhbXMuZW1haWxdIC0gQW4gYXJyYXkgb2YgY2xhaW0gbmFtZXMgdG8gYmUgcmV0dXJuZWQgaWYgdGhlIGVtYWlsIHNjb3BlIGlzIHJlcXVlc3RlZC4KICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBbcGFyYW1zLmFkZHJlc3NdIC0gQW4gYXJyYXkgb2YgY2xhaW0gbmFtZXMgdG8gYmUgcmV0dXJuZWQgaWYgdGhlIGFkZHJlc3Mgc2NvcGUgaXMgcmVxdWVzdGVkLgogICAgICAgICAqIEBwYXJhbSB7c3RyaW5nW119IFtwYXJhbXMucGhvbmVdIC0gQW4gYXJyYXkgb2YgY2xhaW0gbmFtZXMgdG8gYmUgcmV0dXJuZWQgaWYgdGhlIHBob25lIHNjb3BlIGlzIHJlcXVlc3RlZC4KICAgICAgICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfQogICAgICAgICAqLwogICAgICAgIGZ1bmN0aW9uIHNldFNjb3BlQ2xhaW1zTWFwKHBhcmFtcykgewogICAgICAgICAgICBzY29wZUNsYWltc01hcCA9IHBhcmFtczsKICAgICAgICB9CgogICAgICAgIC8qKgogICAgICAgICAqIEEgKHB1YmxpYykgbWV0aG9kIHRoYXQgYWNjZXB0cyBhbiBvYmplY3QgdGhhdCBtYXBzIHRoZSBzdXBwb3J0ZWQgY2xhaW0gbmFtZXMKICAgICAgICAgKiBhbmQgdGhlIHJlc29sdmVyIGZ1bmN0aW9ucyByZXR1cm5pbmcgdGhlIGNsYWltIHZhbHVlLAogICAgICAgICAqIGFuZCBhc3NpZ25zIGl0IHRvIGEgKHByaXZhdGUpIHZhcmlhYmxlIHRoYXQgc2VydmVzIGFzIGEgY29uZmlndXJhdGlvbiBvcHRpb24uCiAgICAgICAgICogQHBhcmFtIHtvYmplY3R9IHBhcmFtcyAtIEFuIG9iamVjdCB0aGF0IG1hcHMKICAgICAgICAgKiBlYWNoIHN1cHBvcnRlZCBjbGFpbSBuYW1lIHRvIGEgZnVuY3Rpb24gdGhhdCBjb21wdXRlcyBhbmQgcmV0dXJucyB0aGUgY2xhaW0gdmFsdWUuCiAgICAgICAgICovCiAgICAgICAgZnVuY3Rpb24gc2V0Q2xhaW1SZXNvbHZlcnMocGFyYW1zKSB7CiAgICAgICAgICAgIGNsYWltUmVzb2x2ZXJzID0gcGFyYW1zOwogICAgICAgIH0KCiAgICAgICAgLy8gQ0xBSU0gUkVTT0xWRVJTCgogICAgICAgIC8qKgogICAgICAgICAqIENsYWltIHJlc29sdmVycyBhcmUgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIGEgY2xhaW0gdmFsdWUuCiAgICAgICAgICogQHBhcmFtIHsqfQogICAgICAgICAqIEByZXR1cm5zIHsqfQogICAgICAgICAqLwoKICAgICAgICAvKioKICAgICAgICAgKiBEZWZpbmVzIGEgY2xhaW0gcmVzb2x2ZXIgYmFzZWQgb24gYSB1c2VyIHByb2ZpbGUgYXR0cmlidXRlLgogICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBhdHRyaWJ1dGVOYW1lIC0gTmFtZSBvZiB0aGUgdXNlciBwcm9maWxlIGF0dHJpYnV0ZS4KICAgICAgICAgKiBAcmV0dXJucyB7ZnVuY3Rpb259IEEgZnVuY3Rpb24gdGhhdCB3aWxsIGRldGVybWluZSB0aGUgY2xhaW0gdmFsdWUKICAgICAgICAgKiBiYXNlZCBvbiB0aGUgdXNlciBwcm9maWxlIGF0dHJpYnV0ZSBhbmQgdGhlIChyZXF1ZXN0ZWQpIGNsYWltIHByb3BlcnRpZXMuCiAgICAgICAgICovCiAgICAgICAgZnVuY3Rpb24gZ2V0VXNlclByb2ZpbGVDbGFpbVJlc29sdmVyIChhdHRyaWJ1dGVOYW1lKSB7CiAgICAgICAgICAgIC8qKgogICAgICAgICAgICAgKiBSZXNvbHZlcyBhIGNsYWltIHdpdGggYSB1c2VyIHByb2ZpbGUgYXR0cmlidXRlIHZhbHVlLgogICAgICAgICAgICAgKiBSZXR1cm5zIHVuZGVmaW5lZCBpZiB0aGUgaWRlbnRpdHkgYXR0cmlidXRlIGlzIG5vdCBwb3B1bGF0ZWQsCiAgICAgICAgICAgICAqIE9SIGlmIHRoZSBjbGFpbSBoYXMgcmVxdWVzdGVkIHZhbHVlcyB0aGF0IGRvIG5vdCBjb250YWluIHRoZSBpZGVudGl0eSBhdHRyaWJ1dGUgdmFsdWUuCiAgICAgICAgICAgICAqIEFUVEVOVElPTjogdGhlIGFmb3JlbWVudGlvbmVkIGNvbXBhcmlzb24gaXMgY2FzZS1zZW5zaXRpdmUuCiAgICAgICAgICAgICAqIEBwYXJhbSB7b3JnLmZvcmdlcm9jay5vcGVuaWRjb25uZWN0LkNsYWltfSBjbGFpbQogICAgICAgICAgICAgKiBBbiBvYmplY3QgdGhhdCBwcm92aWRlcyBtZXRob2RzIHRvIG9idGFpbiBpbmZvcm1hdGlvbi9yZXF1aXJlbWVudHMgYXNzb2NpYXRlZCB3aXRoIGEgY2xhaW0uCiAgICAgICAgICAgICAqIEBzZWUge0BsaW5rIGh0dHBzOi8vYmFja3N0YWdlLmZvcmdlcm9jay5jb20vZG9jcy9hbS83L2FwaWRvY3Mvb3JnL2Zvcmdlcm9jay9vcGVuaWRjb25uZWN0L0NsYWltLmh0bWx9IGZvciBkZXRhaWxzLgogICAgICAgICAgICAgKiBAcmV0dXJucyB7c3RyaW5nfEhhc2hTZXR8dW5kZWZpbmVkfQogICAgICAgICAgICAgKi8KICAgICAgICAgICAgZnVuY3Rpb24gcmVzb2x2ZUNsYWltKGNsYWltKSB7CiAgICAgICAgICAgICAgICB2YXIgdXNlclByb2ZpbGVWYWx1ZTsKCiAgICAgICAgICAgICAgICBpZiAoaWRlbnRpdHkpIHsKICAgICAgICAgICAgICAgICAgICB1c2VyUHJvZmlsZVZhbHVlID0gZ2V0Q2xhaW1WYWx1ZUZyb21TZXQoY2xhaW0sIGlkZW50aXR5LmdldEF0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lKSk7CgogICAgICAgICAgICAgICAgICAgIGlmICh1c2VyUHJvZmlsZVZhbHVlICYmICF1c2VyUHJvZmlsZVZhbHVlLmlzRW1wdHkoKSkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWNsYWltLmdldFZhbHVlcygpIHx8IGNsYWltLmdldFZhbHVlcygpLmlzRW1wdHkoKSB8fCBjbGFpbS5nZXRWYWx1ZXMoKS5jb250YWlucyh1c2VyUHJvZmlsZVZhbHVlKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVzZXJQcm9maWxlVmFsdWU7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiByZXNvbHZlQ2xhaW07CiAgICAgICAgfQoKICAgICAgICAvKioKICAgICAgICAgKiBSZXR1cm5zIGFuIGFkZHJlc3MgY2xhaW0gcmVzb2x2ZXIgYmFzZWQgb24gYSBjbGFpbSB2YWx1ZSBvYnRhaW5lZCB3aXRoIGFub3RoZXIgY2xhaW0gcmVzb2x2ZXIuCiAgICAgICAgICogQHBhcmFtIHtmdW5jdGlvbn0gcmVzb2x2ZUNsYWltIC0gQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBjbGFpbSB2YWx1ZS4KICAgICAgICAgKiBAcmV0dXJucyB7ZnVuY3Rpb259IEEgZnVuY3Rpb24gdGhhdCB3aWxsIGFjY2VwdCBhIGNsYWltIGFzIGFuIGFyZ3VtZW50LAogICAgICAgICAqIHJ1biB0aGUgY2xhaW0gcmVzb2x2ZXIgZnVuY3Rpb24gZm9yIHRoZSBjbGFpbSBhbmQgb2J0YWluIHRoZSBjbGFpbSB2YWx1ZSwKICAgICAgICAgKiBhbmQgYXBwbHkgYWRkaXRpb25hbCBmb3JtYXR0aW5nIHRvIHRoZSB2YWx1ZSBiZWZvcmUgcmV0dXJuaW5nIGl0LgogICAgICAgICAqLwogICAgICAgIGZ1bmN0aW9uIGdldEFkZHJlc3NDbGFpbVJlc29sdmVyIChyZXNvbHZlQ2xhaW0pIHsKICAgICAgICAgICAgLyoqCiAgICAgICAgICAgICAqIENyZWF0ZXMgYW4gYWRkcmVzcyBjbGFpbSBvYmplY3QgZnJvbSBhIHZhbHVlIHJldHVybmVkIGJ5IGEgY2xhaW0gcmVzb2x2ZXIsCiAgICAgICAgICAgICAqIGFuZCByZXR1cm5zIHRoZSBhZGRyZXNzIGNsYWltIG9iamVjdCBhcyB0aGUgY2xhaW0gdmFsdWUuCiAgICAgICAgICAgICAqIEBzZWUge0BsaW5rIGh0dHBzOi8vb3BlbmlkLm5ldC9zcGVjcy9vcGVuaWQtY29ubmVjdC1jb3JlLTFfMC5odG1sI0FkZHJlc3NDbGFpbX0uCiAgICAgICAgICAgICAqIFRoZSBjbGFpbSB2YWx1ZSBpcyBvYnRhaW5lZCB3aXRoIGEgY2xhaW0gcmVzb2x2aW5nIGZ1bmN0aW9uIGF2YWlsYWJsZSBmcm9tIHRoZSBjbG9zdXJlLgogICAgICAgICAgICAgKiBAcGFyYW0ge29yZy5mb3JnZXJvY2sub3BlbmlkY29ubmVjdC5DbGFpbX0gY2xhaW0KICAgICAgICAgICAgICogQW4gb2JqZWN0IHRoYXQgcHJvdmlkZXMgbWV0aG9kcyB0byBvYnRhaW4gaW5mb3JtYXRpb24vcmVxdWlyZW1lbnRzIGFzc29jaWF0ZWQgd2l0aCBhIGNsYWltLgogICAgICAgICAgICAgKiBAc2VlIHtAbGluayBodHRwczovL2JhY2tzdGFnZS5mb3JnZXJvY2suY29tL2RvY3MvYW0vNy9hcGlkb2NzL29yZy9mb3JnZXJvY2svb3BlbmlkY29ubmVjdC9DbGFpbS5odG1sfSBmb3IgZGV0YWlscy4KICAgICAgICAgICAgICogQHJldHVybnMge2phdmEudXRpbC5MaW5rZWRIYXNoTWFwfHVuZGVmaW5lZH0gVGhlIGFkZHJlc3MgY2xhaW0gb2JqZWN0IGNyZWF0ZWQgZnJvbSBhIGNsYWltIHZhbHVlLgogICAgICAgICAgICAgKi8KICAgICAgICAgICAgZnVuY3Rpb24gcmVzb2x2ZUFkZHJlc3NDbGFpbShjbGFpbSkgewogICAgICAgICAgICAgICAgdmFyIGNsYWltVmFsdWUgPSByZXNvbHZlQ2xhaW0oY2xhaW0pOwogICAgICAgICAgICAgICAgdmFyIGFkZHJlc3NPYmplY3Q7CgogICAgICAgICAgICAgICAgaWYgKGlzQ2xhaW1WYWx1ZVZhbGlkKGNsYWltVmFsdWUpKSB7CiAgICAgICAgICAgICAgICAgICAgYWRkcmVzc09iamVjdCA9IG5ldyBmckphdmEuTGlua2VkSGFzaE1hcCgpOwoKICAgICAgICAgICAgICAgICAgICBhZGRyZXNzT2JqZWN0LnB1dCgnZm9ybWF0dGVkJywgY2xhaW1WYWx1ZSk7CgogICAgICAgICAgICAgICAgICAgIHJldHVybiBhZGRyZXNzT2JqZWN0OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gcmVzb2x2ZUFkZHJlc3NDbGFpbTsKICAgICAgICB9CgogICAgICAgIC8qKgogICAgICAgICAqIFJldHVybnMgYW4gZXNzZW50aWFsIGNsYWltIHJlc29sdmVyIGJhc2VkIG9uIGEgY2xhaW0gdmFsdWUgb2J0YWluZWQgd2l0aCBhbm90aGVyIGNsYWltIHJlc29sdmVyLgogICAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IHJlc29sdmVDbGFpbSAtIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgY2xhaW0gdmFsdWUuCiAgICAgICAgICogQHJldHVybnMge2Z1bmN0aW9ufSBBIGZ1bmN0aW9uIHRoYXQgd2lsbCBhY2NlcHQgYSBjbGFpbSBhcyBhbiBhcmd1bWVudCwKICAgICAgICAgKiBydW4gdGhlIGNsYWltIHJlc29sdmVyIGZ1bmN0aW9uIGZvciB0aGUgY2xhaW0gYW5kIG9idGFpbiB0aGUgY2xhaW0gdmFsdWUsCiAgICAgICAgICogYW5kIGFwcGx5IGFkZGl0aW9uYWwgbG9naWMgZm9yIGVzc2VudGlhbCBjbGFpbXMuCiAgICAgICAgICovCiAgICAgICAgZnVuY3Rpb24gZ2V0RXNzZW50aWFsQ2xhaW1SZXNvbHZlciAocmVzb2x2ZUNsYWltKSB7CiAgICAgICAgICAgIC8qKgogICAgICAgICAgICAgKiBSZXR1cm5zIGEgY2xhaW0gdmFsdWUgb3IgdGhyb3dzIGFuIGVycm9yLgogICAgICAgICAgICAgKiBUaGUgY2xhaW0gdmFsdWUgaXMgb2J0YWluZWQgd2l0aCBhIGNsYWltIHJlc29sdmluZyBmdW5jdGlvbiBhdmFpbGFibGUgZnJvbSB0aGUgY2xvc3VyZS4KICAgICAgICAgICAgICogVGhyb3dzIGFuIGV4Y2VwdGlvbiBpZiB0aGUgY2xhaW0gaXMgZXNzZW50aWFsIGFuZCBubyB2YWx1ZSBpcyByZXR1cm5lZCBmb3IgdGhlIGNsYWltLgogICAgICAgICAgICAgKgogICAgICAgICAgICAgKiBVc2Ugb2YgdGhpcyByZXNvbHZlciBpcyBvcHRpb25hbC4KICAgICAgICAgICAgICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9vcGVuaWQubmV0L3NwZWNzL29wZW5pZC1jb25uZWN0LWNvcmUtMV8wLmh0bWwjSW5kaXZpZHVhbENsYWltc1JlcXVlc3RzfSBzdGF0aW5nOgogICAgICAgICAgICAgKiAiTm90ZSB0aGF0IGV2ZW4gaWYgdGhlIENsYWltcyBhcmUgbm90IGF2YWlsYWJsZSBiZWNhdXNlIHRoZSBFbmQtVXNlciBkaWQgbm90IGF1dGhvcml6ZSB0aGVpciByZWxlYXNlIG9yIHRoZXkgYXJlIG5vdCBwcmVzZW50LAogICAgICAgICAgICAgKiB0aGUgQXV0aG9yaXphdGlvbiBTZXJ2ZXIgTVVTVCBOT1QgZ2VuZXJhdGUgYW4gZXJyb3Igd2hlbiBDbGFpbXMgYXJlIG5vdCByZXR1cm5lZCwgd2hldGhlciB0aGV5IGFyZSBFc3NlbnRpYWwgb3IgVm9sdW50YXJ5LAogICAgICAgICAgICAgKiB1bmxlc3Mgb3RoZXJ3aXNlIHNwZWNpZmllZCBpbiB0aGUgZGVzY3JpcHRpb24gb2YgdGhlIHNwZWNpZmljIGNsYWltLiIKICAgICAgICAgICAgICoKICAgICAgICAgICAgICogQHBhcmFtIHtvcmcuZm9yZ2Vyb2NrLm9wZW5pZGNvbm5lY3QuQ2xhaW19IGNsYWltCiAgICAgICAgICAgICAqIEFuIG9iamVjdCB0aGF0IHByb3ZpZGVzIG1ldGhvZHMgdG8gb2J0YWluIGluZm9ybWF0aW9uL3JlcXVpcmVtZW50cyBhc3NvY2lhdGVkIHdpdGggYSBjbGFpbS4KICAgICAgICAgICAgICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9iYWNrc3RhZ2UuZm9yZ2Vyb2NrLmNvbS9kb2NzL2FtLzcvYXBpZG9jcy9vcmcvZm9yZ2Vyb2NrL29wZW5pZGNvbm5lY3QvQ2xhaW0uaHRtbH0gZm9yIGRldGFpbHMuCiAgICAgICAgICAgICAqIEByZXR1cm5zIHsqfQogICAgICAgICAgICAgKiBAdGhyb3dzIHtvcmcuZm9yZ2Vyb2NrLm9hdXRoMi5jb3JlLmV4Y2VwdGlvbnMuSW52YWxpZFJlcXVlc3RFeGNlcHRpb259CiAgICAgICAgICAgICAqLwogICAgICAgICAgICBmdW5jdGlvbiByZXNvbHZlRXNzZW50aWFsQ2xhaW0oY2xhaW0pIHsKICAgICAgICAgICAgICAgIHZhciBjbGFpbVZhbHVlID0gcmVzb2x2ZUNsYWltKGNsYWltKTsKCiAgICAgICAgICAgICAgICBpZiAoY2xhaW0uaXNFc3NlbnRpYWwoKSAmJiAhaXNDbGFpbVZhbHVlVmFsaWQoY2xhaW1WYWx1ZSkpIHsKICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZnJKYXZhLkludmFsaWRSZXF1ZXN0RXhjZXB0aW9uKCdDb3VsZCBub3QgcHJvdmlkZSB2YWx1ZSBmb3IgZXNzZW50aWFsIGNsYWltOiAnICsgY2xhaW0uZ2V0TmFtZSgpKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gY2xhaW1WYWx1ZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIHJlc29sdmVFc3NlbnRpYWxDbGFpbTsKICAgICAgICB9CgogICAgICAgIC8qKgogICAgICAgICAqIFByb3ZpZGVzIGRlZmF1bHQgcmVzb2x1dGlvbiBmb3IgYSBjbGFpbS4KICAgICAgICAgKiBVc2UgaXQgaWYgYSBjbGFpbS1zcGVjaWZpYyByZXNvbHZlciBpcyBub3QgZGVmaW5lZCBpbiB0aGUgY29uZmlndXJhdGlvbi4KICAgICAgICAgKiBAcGFyYW0ge29yZy5mb3JnZXJvY2sub3BlbmlkY29ubmVjdC5DbGFpbX0gY2xhaW0KICAgICAgICAgKiBBbiBvYmplY3QgdGhhdCBwcm92aWRlcyBtZXRob2RzIHRvIG9idGFpbiBpbmZvcm1hdGlvbi9yZXF1aXJlbWVudHMgYXNzb2NpYXRlZCB3aXRoIGEgY2xhaW0uCiAgICAgICAgICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9iYWNrc3RhZ2UuZm9yZ2Vyb2NrLmNvbS9kb2NzL2FtLzcvYXBpZG9jcy9vcmcvZm9yZ2Vyb2NrL29wZW5pZGNvbm5lY3QvQ2xhaW0uaHRtbH0gZm9yIGRldGFpbHMuCiAgICAgICAgICogQHJldHVybnMgeyp9IEEgc2luZ2xlIHZhbHVlIGFzc29jaWF0ZWQgd2l0aCB0aGlzIGNsYWltLgogICAgICAgICAqLwogICAgICAgIGZ1bmN0aW9uIHJlc29sdmVBbnlDbGFpbSAoY2xhaW0pIHsKICAgICAgICAgICAgaWYgKGNsYWltLmdldFZhbHVlcygpLnNpemUoKSA9PT0gMSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGNsYWltLmdldFZhbHVlcygpLnRvQXJyYXkoKVswXTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLy8gVVRJTElUSUVTCgogICAgICAgIC8qKgogICAgICAgICAqIFJldHVybnMgY2xhaW0gdmFsdWUgZnJvbSBhIHNldC4KICAgICAgICAgKiBJZiB0aGUgc2V0IGNvbnRhaW5zIGEgc2luZ2xlIHZhbHVlLCByZXR1cm5zIHRoZSB2YWx1ZS4KICAgICAgICAgKiBJZiB0aGUgc2V0IGNvbnRhaW5zIG11bHRpcGxlIHZhbHVlcywgcmV0dXJucyB0aGUgc2V0LgogICAgICAgICAqIE90aGVyd2lzZSwgcmV0dXJucyB1bmRlZmluZWQuCiAgICAgICAgICoKICAgICAgICAgKiBAcGFyYW0ge29yZy5mb3JnZXJvY2sub3BlbmlkY29ubmVjdC5DbGFpbX0gY2xhaW0KICAgICAgICAgKiBBbiBvYmplY3QgdGhhdCBwcm92aWRlcyBtZXRob2RzIHRvIG9idGFpbiBpbmZvcm1hdGlvbi9yZXF1aXJlbWVudHMgYXNzb2NpYXRlZCB3aXRoIGEgY2xhaW0uCiAgICAgICAgICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9iYWNrc3RhZ2UuZm9yZ2Vyb2NrLmNvbS9kb2NzL2FtLzcvYXBpZG9jcy9vcmcvZm9yZ2Vyb2NrL29wZW5pZGNvbm5lY3QvQ2xhaW0uaHRtbH0gZm9yIGRldGFpbHMuCiAgICAgICAgICogQHBhcmFtIHtqYXZhLnV0aWwuSGFzaFNldH0gc2V0IFRoZSBzZXTigJRmb3IgZXhhbXBsZSwgYSB1c2VyIHByb2ZpbGUgYXR0cmlidXRlIHZhbHVlLgogICAgICAgICAqIEByZXR1cm5zIHtzdHJpbmd8amF2YS51dGlsLkhhc2hTZXR8dW5kZWZpbmVkfQogICAgICAgICAqLwogICAgICAgIGZ1bmN0aW9uIGdldENsYWltVmFsdWVGcm9tU2V0IChjbGFpbSwgc2V0KSB7CiAgICAgICAgICAgIGlmIChzZXQgJiYgc2V0LnNpemUoKSkgewogICAgICAgICAgICAgICAgaWYgKHNldC5zaXplKCkgPT09IDEpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2V0LnRvQXJyYXkoKVswXTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNldDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIGlmIChsb2dnZXIud2FybmluZ0VuYWJsZWQoKSkgewogICAgICAgICAgICAgICAgbG9nZ2VyLndhcm5pbmcoJ09JREMgQ2xhaW1zIHNjcmlwdC4gR290IGFuIGVtcHR5IHNldCBmb3IgY2xhaW06ICcgKyBjbGFpbS5nZXROYW1lKCkpOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBpc0NsYWltVmFsdWVWYWxpZCAoY2xhaW1WYWx1ZSkgewogICAgICAgICAgICBpZiAodHlwZW9mIGNsYWltVmFsdWUgPT09ICd1bmRlZmluZWQnIHx8IGNsYWltVmFsdWUgPT09IG51bGwpIHsKICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQoKICAgICAgICAvLyBDTEFJTSBQUk9DRVNTSU5HCgogICAgICAgIC8qKgogICAgICAgICAqIENvbnN0cnVjdHMgYW5kIHJldHVybnMgYW4gb2JqZWN0IHBvcHVsYXRlZCB3aXRoIHRoZSBjb21wdXRlZCBjbGFpbSB2YWx1ZXMKICAgICAgICAgKiBhbmQgdGhlIHJlcXVlc3RlZCBzY29wZXMgbWFwcGVkIHRvIHRoZSBjbGFpbSBuYW1lcy4KICAgICAgICAgKiBAcmV0dXJucyB7b3JnLmZvcmdlcm9jay5vYXV0aDIuY29yZS5Vc2VySW5mb0NsYWltc30gVGhlIG9iamVjdCB0byBiZSByZXR1cm5lZCB0byB0aGUgYXV0aG9yaXphdGlvbiBzZXJ2ZXIuCiAgICAgICAgICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9iYWNrc3RhZ2UuZm9yZ2Vyb2NrLmNvbS9kb2NzL2FtLzcvYXBpZG9jcy9vcmcvZm9yZ2Vyb2NrL29hdXRoMi9jb3JlL1VzZXJJbmZvQ2xhaW1zLmh0bWx9LgogICAgICAgICAqIEBzZWUgUkVTVUxUUyBzZWN0aW9uIGZvciB0aGUgdXNlIG9mIHRoaXMgZnVuY3Rpb24uCiAgICAgICAgICovCiAgICAgICAgZnVuY3Rpb24gZ2V0VXNlckluZm9DbGFpbXMgKCkgewogICAgICAgICAgICByZXR1cm4gbmV3IGZySmF2YS5Vc2VySW5mb0NsYWltcyhnZXRDb21wdXRlZENsYWltcygpLCBnZXRDb21wb3NpdGVTY29wZXMoKSk7CiAgICAgICAgfQoKICAgICAgICAvKioKICAgICAgICAgKiBDcmVhdGVzIGEgbWFwIG9mIChyZXF1ZXN0ZWQpIGNsYWltIG5hbWVzIHBvcHVsYXRlZCB3aXRoIHRoZSBjb21wdXRlZCBjbGFpbSB2YWx1ZXMuCiAgICAgICAgICogQHJldHVybnMge2phdmEudXRpbC5MaW5rZWRIYXNoTWFwfQogICAgICAgICAqIEEgbWFwIG9mIHRoZSByZXF1ZXN0ZWQgY2xhaW0gbmFtZXMgYW5kIHRoZSBjb3JyZXNwb25kaW5nIGNsYWltIHZhbHVlcy4KICAgICAgICAgKi8KICAgICAgICBmdW5jdGlvbiBnZXRDb21wdXRlZENsYWltcyAoKSB7CiAgICAgICAgICAgIC8qKgogICAgICAgICAgICAgKiBDcmVhdGVzIGEgY29tcGxldGUgbGlzdCBvZiBjbGFpbSBvYmplY3RzIGZyb206CiAgICAgICAgICAgICAqIHRoZSBjbGFpbXMgZGVyaXZlZCBmcm9tIHRoZSBzY29wZXMsCiAgICAgICAgICAgICAqIHRoZSBjbGFpbXMgcHJvdmlkZWQgYnkgdGhlIGF1dGhvcml6YXRpb24gc2VydmVyLAogICAgICAgICAgICAgKiBhbmQgdGhlIGNsYWltcyByZXF1ZXN0ZWQgYnkgdGhlIGNsaWVudC4KICAgICAgICAgICAgICogQHJldHVybnMge2phdmEudXRpbC5BcnJheUxpc3R9CiAgICAgICAgICAgICAqIFJldHVybnMgYSBjb21wbGV0ZSBsaXN0IG9mIG9yZy5mb3JnZXJvY2sub3BlbmlkY29ubmVjdC5DbGFpbSBvYmplY3RzIGF2YWlsYWJsZSB0byB0aGUgc2NyaXB0LgogICAgICAgICAgICAgKiBAc2VlIHtAbGluayBodHRwczovL2JhY2tzdGFnZS5mb3JnZXJvY2suY29tL2RvY3MvYW0vNy9hcGlkb2NzL29yZy9mb3JnZXJvY2svb3BlbmlkY29ubmVjdC9DbGFpbS5odG1sfSBmb3IgdGhlIGNsYWltIG9iamVjdCBkZXRhaWxzLgogICAgICAgICAgICAgKi8KICAgICAgICAgICAgZnVuY3Rpb24gZ2V0Q2xhaW1zKCkgewogICAgICAgICAgICAgICAgLyoqCiAgICAgICAgICAgICAgICAgKiBSZXR1cm5zIGEgbGlzdCBvZiBjbGFpbSBvYmplY3RzIGZvciB0aGUgcmVxdWVzdGVkIHNjb3Blcy4KICAgICAgICAgICAgICAgICAqIFVzZXMgdGhlIHNjb3BlQ2xhaW1zTWFwIGNvbmZpZ3VyYXRpb24gb3B0aW9uIHRvIGRlcml2ZSB0aGUgY2xhaW0gbmFtZXM7CiAgICAgICAgICAgICAgICAgKiBubyBvdGhlciBwcm9wZXJ0aWVzIG9mIGEgY2xhaW0gZGVyaXZlZCBmcm9tIGEgc2NvcGUgYXJlIHBvcHVsYXRlZC4KICAgICAgICAgICAgICAgICAqIEByZXR1cm5zIHtqYXZhLnV0aWwuQXJyYXlMaXN0fQogICAgICAgICAgICAgICAgICogQSBsaXN0IG9mIG9yZy5mb3JnZXJvY2sub3BlbmlkY29ubmVjdC5DbGFpbSBvYmplY3RzIGRlcml2ZWQgZnJvbSB0aGUgcmVxdWVzdGVkIHNjb3Blcy4KICAgICAgICAgICAgICAgICAqIEBzZWUge0BsaW5rIGh0dHBzOi8vYmFja3N0YWdlLmZvcmdlcm9jay5jb20vZG9jcy9hbS83L2FwaWRvY3Mvb3JnL2Zvcmdlcm9jay9vcGVuaWRjb25uZWN0L0NsYWltLmh0bWx9IGZvciB0aGUgY2xhaW0gb2JqZWN0IGRldGFpbHMuCiAgICAgICAgICAgICAgICAgKi8KICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNvbnZlcnRTY29wZVRvQ2xhaW1zKCkgewogICAgICAgICAgICAgICAgICAgIHZhciBjbGFpbXMgPSBuZXcgZnJKYXZhLkFycmF5TGlzdCgpOwoKICAgICAgICAgICAgICAgICAgICBzY29wZXMudG9BcnJheSgpLmZvckVhY2goZnVuY3Rpb24gKHNjb3BlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChTdHJpbmcoc2NvcGUpICE9PSAnb3BlbmlkJyAmJiBzY29wZUNsYWltc01hcFtzY29wZV0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlQ2xhaW1zTWFwW3Njb3BlXS5mb3JFYWNoKGZ1bmN0aW9uIChjbGFpbU5hbWUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFpbXMuYWRkKG5ldyBmckphdmEuQ2xhaW0oY2xhaW1OYW1lKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2xhaW1zOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHZhciBjbGFpbXMgPSBuZXcgZnJKYXZhLkFycmF5TGlzdCgpOwoKICAgICAgICAgICAgICAgIGNsYWltcy5hZGRBbGwoY29udmVydFNjb3BlVG9DbGFpbXMoKSk7CiAgICAgICAgICAgICAgICBjbGFpbXMuYWRkQWxsKGNsYWltT2JqZWN0cyk7CiAgICAgICAgICAgICAgICBjbGFpbXMuYWRkQWxsKHJlcXVlc3RlZFR5cGVkQ2xhaW1zKTsKCiAgICAgICAgICAgICAgICByZXR1cm4gY2xhaW1zOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvKioKICAgICAgICAgICAgICogQ29tcHV0ZXMgYW5kIHJldHVybnMgYSBjbGFpbSB2YWx1ZS4KICAgICAgICAgICAgICogVG8gb2J0YWluIHRoZSBjbGFpbSB2YWx1ZSwgdXNlcyB0aGUgcmVzb2x2ZXIgZnVuY3Rpb24gc3BlY2lmaWVkIGZvciB0aGUgY2xhaW0gaW4gdGhlIGNsYWltUmVzb2x2ZXJzIGNvbmZpZ3VyYXRpb24gb2JqZWN0LgogICAgICAgICAgICAgKiBAc2VlIGNsYWltUmVzb2x2ZXJzCiAgICAgICAgICAgICAqIElmIG5vIHJlc29sdmVyIGZ1bmN0aW9uIGlzIGZvdW5kLCB1c2VzIHRoZSBkZWZhdWx0IGNsYWltIHJlc29sdmVyIGZ1bmN0aW9uLgogICAgICAgICAgICAgKgogICAgICAgICAgICAgKiBAcGFyYW0ge29yZy5mb3JnZXJvY2sub3BlbmlkY29ubmVjdC5DbGFpbX0gY2xhaW0KICAgICAgICAgICAgICogQW4gb2JqZWN0IHRoYXQgcHJvdmlkZXMgbWV0aG9kcyB0byBvYnRhaW4gaW5mb3JtYXRpb24vcmVxdWlyZW1lbnRzIGFzc29jaWF0ZWQgd2l0aCBhIGNsYWltLgogICAgICAgICAgICAgKiBAc2VlIHtAbGluayBodHRwczovL2JhY2tzdGFnZS5mb3JnZXJvY2suY29tL2RvY3MvYW0vNy9hcGlkb2NzL29yZy9mb3JnZXJvY2svb3BlbmlkY29ubmVjdC9DbGFpbS5odG1sfSBmb3IgZGV0YWlscy4KICAgICAgICAgICAgICogQHJldHVybnMgeyp9IENsYWltIHZhbHVlLgogICAgICAgICAgICAgKiBAdGhyb3dzIHtvcmcuZm9yZ2Vyb2NrLm9hdXRoMi5jb3JlLmV4Y2VwdGlvbnMuSW52YWxpZFJlcXVlc3RFeGNlcHRpb259CiAgICAgICAgICAgICAqIFJldGhyb3dzIHRoaXMgZXhjZXB0aW9uIGlmIGEgY2xhaW0gcmVzb2x2ZXIgdGhyb3dzIGl0LgogICAgICAgICAgICAgKiBZb3UgY2FuIHRocm93IG9yZy5mb3JnZXJvY2sub2F1dGgyLmNvcmUuZXhjZXB0aW9ucy5JbnZhbGlkUmVxdWVzdEV4Y2VwdGlvbiBmcm9tIHlvdXIgY3VzdG9tIGNsYWltIHJlc29sdmVyCiAgICAgICAgICAgICAqIGlmIHlvdSB3YW50IHRvIHRlcm1pbmF0ZSB0aGUgY2xhaW0gcHJvY2Vzc2luZy4KICAgICAgICAgICAgICovCiAgICAgICAgICAgIGZ1bmN0aW9uIGNvbXB1dGVDbGFpbShjbGFpbSkgewogICAgICAgICAgICAgICAgdmFyIHJlc29sdmVDbGFpbTsKICAgICAgICAgICAgICAgIHZhciBtZXNzYWdlOwoKICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZUNsYWltID0gY2xhaW1SZXNvbHZlcnNbY2xhaW0uZ2V0TmFtZSgpXSB8fCByZXNvbHZlQW55Q2xhaW07CgogICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlQ2xhaW0oY2xhaW0pOwogICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSAnT0lEQyBDbGFpbXMgc2NyaXB0IGV4Y2VwdGlvbi4gVW5hYmxlIHRvIHJlc29sdmUgT0lEQyBDbGFpbS4gJyArIGU7CgogICAgICAgICAgICAgICAgICAgIGlmIChTdHJpbmcoZSkuaW5kZXhPZignb3JnLmZvcmdlcm9jay5vYXV0aDIuY29yZS5leGNlcHRpb25zLkludmFsaWRSZXF1ZXN0RXhjZXB0aW9uJykgIT09IC0xKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IGU7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBpZiAobG9nZ2VyLndhcm5pbmdFbmFibGVkKCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLndhcm5pbmcobWVzc2FnZSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICB2YXIgY29tcHV0ZWRDbGFpbXMgPSBuZXcgZnJKYXZhLkxpbmtlZEhhc2hNYXAoKTsKCiAgICAgICAgICAgIGdldENsYWltcygpLnRvQXJyYXkoKS5mb3JFYWNoKGZ1bmN0aW9uIChjbGFpbSkgewogICAgICAgICAgICAgICAgdmFyIGNsYWltVmFsdWUgPSBjb21wdXRlQ2xhaW0oY2xhaW0pOwoKICAgICAgICAgICAgICAgIGlmIChpc0NsYWltVmFsdWVWYWxpZChjbGFpbVZhbHVlKSkgewogICAgICAgICAgICAgICAgICAgIGNvbXB1dGVkQ2xhaW1zLnB1dChjbGFpbS5nZXROYW1lKCksIGNsYWltVmFsdWUpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAvKioKICAgICAgICAgICAgICAgICAgICAgKiBJZiBhIGNsYWltIGhhcyBiZWVuIHByb2Nlc3NlZCwgYnV0IGFwcGVhcnMgaW4gdGhlIGxpc3QgYWdhaW4sCiAgICAgICAgICAgICAgICAgICAgICogYW5kIGl0cyB2YWx1ZSBjYW5ub3QgYmUgY29tcHV0ZWQgdW5kZXIgdGhlIG5ldyBjb25kaXRpb25zLAogICAgICAgICAgICAgICAgICAgICAqIHRoZSBjbGFpbSBpcyByZW1vdmVkIGZyb20gdGhlIGZpbmFsIHJlc3VsdC4KICAgICAgICAgICAgICAgICAgICAgKgogICAgICAgICAgICAgICAgICAgICAqIEZvciBleGFtcGxlLCBhIGNsYWltIGNvdWxkIGJlIG1hcHBlZCB0byBhIHNjb3BlIGFuZCBmb3VuZCBpbiB0aGUgdXNlciBwcm9maWxlLAogICAgICAgICAgICAgICAgICAgICAqIGJ1dCBhbHNvIHJlcXVlc3RlZCBieSB0aGUgY2xpZW50IHdpdGggcmVxdWlyZWQgdmFsdWVzIHRoYXQgZG9uJ3QgbWF0Y2ggdGhlIGNvbXB1dGVkIG9uZS4KICAgICAgICAgICAgICAgICAgICAgKiBAc2VlIHtsaW5rIGh0dHBzOi8vb3BlbmlkLm5ldC9zcGVjcy9vcGVuaWQtY29ubmVjdC1jb3JlLTFfMC5odG1sI0luZGl2aWR1YWxDbGFpbXNSZXF1ZXN0c30uCiAgICAgICAgICAgICAgICAgICAgICogZm9yIHRoZSByZWxldmFudCBPSURDIHNwZWNpZmljYXRpb24gZGV0YWlscy4KICAgICAgICAgICAgICAgICAgICAgKi8KICAgICAgICAgICAgICAgICAgICBjb21wdXRlZENsYWltcy5yZW1vdmUoY2xhaW0uZ2V0TmFtZSgpKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CgogICAgICAgICAgICByZXR1cm4gY29tcHV0ZWRDbGFpbXM7CiAgICAgICAgfQoKICAgICAgICAvKioKICAgICAgICAgKiBDcmVhdGVzIGEgbWFwIG9mIHJlcXVlc3RlZCBzY29wZXMgYW5kIHRoZSBjb3JyZXNwb25kaW5nIGNsYWltIG5hbWVzLgogICAgICAgICAqIEByZXR1cm5zIHtqYXZhLnV0aWwuTGlua2VkSGFzaE1hcH0KICAgICAgICAgKi8KICAgICAgICBmdW5jdGlvbiBnZXRDb21wb3NpdGVTY29wZXMgKCkgewogICAgICAgICAgICB2YXIgY29tcG9zaXRlU2NvcGVzID0gbmV3IGZySmF2YS5MaW5rZWRIYXNoTWFwKCk7CgogICAgICAgICAgICBzY29wZXMudG9BcnJheSgpLmZvckVhY2goZnVuY3Rpb24gKHNjb3BlKSB7CiAgICAgICAgICAgICAgICB2YXIgc2NvcGVDbGFpbXMgPSBuZXcgZnJKYXZhLkFycmF5TGlzdCgpOwoKICAgICAgICAgICAgICAgIGlmIChzY29wZUNsYWltc01hcFtzY29wZV0pIHsKICAgICAgICAgICAgICAgICAgICBzY29wZUNsYWltc01hcFtzY29wZV0uZm9yRWFjaChmdW5jdGlvbiAoY2xhaW1OYW1lKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlQ2xhaW1zLmFkZChjbGFpbU5hbWUpOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmIChzY29wZUNsYWltcy5zaXplKCkpIHsKICAgICAgICAgICAgICAgICAgICBjb21wb3NpdGVTY29wZXMucHV0KHNjb3BlLCBzY29wZUNsYWltcyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgcmV0dXJuIGNvbXBvc2l0ZVNjb3BlczsKICAgICAgICB9CgogICAgICAgIC8vIFBVQkxJQyBNRVRIT0RTCgogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIHNldFNjb3BlQ2xhaW1zTWFwOiBzZXRTY29wZUNsYWltc01hcCwKICAgICAgICAgICAgc2V0Q2xhaW1SZXNvbHZlcnM6IHNldENsYWltUmVzb2x2ZXJzLAogICAgICAgICAgICBnZXRVc2VyUHJvZmlsZUNsYWltUmVzb2x2ZXI6IGdldFVzZXJQcm9maWxlQ2xhaW1SZXNvbHZlciwKICAgICAgICAgICAgZ2V0QWRkcmVzc0NsYWltUmVzb2x2ZXI6IGdldEFkZHJlc3NDbGFpbVJlc29sdmVyLAogICAgICAgICAgICBnZXRFc3NlbnRpYWxDbGFpbVJlc29sdmVyOiBnZXRFc3NlbnRpYWxDbGFpbVJlc29sdmVyLAogICAgICAgICAgICBnZXRVc2VySW5mb0NsYWltczogZ2V0VXNlckluZm9DbGFpbXMKICAgICAgICB9OwogICAgfQoKICAgIC8vIFJFU1VMVFMKCiAgICAvKioKICAgICAqIFRoaXMgc2NyaXB0IHJldHVybnMgYW4gaW5zdGFuY2Ugb2YgdGhlIG9yZy5mb3JnZXJvY2sub2F1dGgyLmNvcmUuVXNlckluZm9DbGFpbXMgY2xhc3MKICAgICAqIHBvcHVsYXRlZCB3aXRoIHRoZSBjb21wdXRlZCBjbGFpbSB2YWx1ZXMgYW5kCiAgICAgKiB0aGUgcmVxdWVzdGVkIHNjb3BlcyBtYXBwZWQgdG8gdGhlIGNsYWltIG5hbWVzLgogICAgICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9iYWNrc3RhZ2UuZm9yZ2Vyb2NrLmNvbS9kb2NzL2FtLzcvYXBpZG9jcy9vcmcvZm9yZ2Vyb2NrL29hdXRoMi9jb3JlL1VzZXJJbmZvQ2xhaW1zLmh0bWx9LgogICAgICoKICAgICAqIEFzc2lnbmluZyBpdCB0byBhIHZhcmlhYmxlIGdpdmVzIHlvdSBhbiBvcHBvcnR1bml0eQogICAgICogdG8gbG9nIHRoZSBjb250ZW50IG9mIHRoZSByZXR1cm5lZCB2YWx1ZSBkdXJpbmcgZGV2ZWxvcG1lbnQuCiAgICAgKi8KICAgIHZhciB1c2VySW5mb0NsYWltcyA9IHV0aWxzLmdldFVzZXJJbmZvQ2xhaW1zKCk7CgogICAgLyoKICAgIGxvZ2dlci5lcnJvcihzY3JpcHROYW1lICsgJyByZXN1bHRzOicpCiAgICBsb2dnZXIuZXJyb3IoJ1ZhbHVlczogJyArIHVzZXJJbmZvQ2xhaW1zLmdldFZhbHVlcygpKQogICAgbG9nZ2VyLmVycm9yKCdTY29wZXM6ICcgKyB1c2VySW5mb0NsYWltcy5nZXRDb21wb3NpdGVTY29wZXMoKSkKICAgICovCgogICAgcmV0dXJuIHVzZXJJbmZvQ2xhaW1zOwp9KCkpOwo=",
  },
  {
    "_id": "6c49bebe-3a62-11ed-a261-0242ac120002",
    "context": "LIBRARY",
    "createdBy": "id=dsameuser,ou=user,dc=openam,dc=forgerock,dc=org",
    "creationDate": 1433147666269,
    "default": true,
    "description": "Default global library script to be referenced from other scripts",
    "evaluatorVersion": "2.0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "id=dsameuser,ou=user,dc=openam,dc=forgerock,dc=org",
    "lastModifiedDate": 1433147666269,
    "name": "Library Script",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjItMjAyMyBGb3JnZVJvY2sgQVMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQKICoKICogVXNlIG9mIHRoaXMgY29kZSByZXF1aXJlcyBhIGNvbW1lcmNpYWwgc29mdHdhcmUgbGljZW5zZSB3aXRoIEZvcmdlUm9jayBBUy4KICogb3Igd2l0aCBvbmUgb2YgaXRzIGFmZmlsaWF0ZXMuIEFsbCB1c2Ugc2hhbGwgYmUgZXhjbHVzaXZlbHkgc3ViamVjdAogKiB0byBzdWNoIGxpY2Vuc2UgYmV0d2VlbiB0aGUgbGljZW5zZWUgYW5kIEZvcmdlUm9jayBBUy4KICovCgovKgogKiBUaGlzIGlzIGFuIGV4YW1wbGUgbGlicmFyeSBzY3JpcHQgd2l0aCBtZXRob2RzIHRoYXQgY2FuIGJlIHVzZWQgaW4gb3RoZXIgc2NyaXB0cy4KICogVG8gcmVmZXJlbmNlIGl0LCB1c2UgdGhlIGZvbGxvd2luZzoKICoKICogdmFyIGxpYnJhcnkgPSByZXF1aXJlKCJMaWJyYXJ5IFNjcmlwdCIpOwogKgogKiBsaWJyYXJ5LmxvZ0Vycm9yKGxvZ2dlciwgIkVycm9yIG1lc3NhZ2UiKTsKICogbGlicmFyeS5sb2dEZWJ1Zyhsb2dnZXIsICJEZWJ1ZyBtZXNzYWdlIik7CiAqLwoKZnVuY3Rpb24gbG9nRXJyb3IobG9nLCBlcnJvck1lc3NhZ2UpIHsKICBsb2cuZXJyb3IoZXJyb3JNZXNzYWdlKTsKfQoKZnVuY3Rpb24gbG9nV2FybmluZyhsb2csIHdhcm5pbmdNZXNzYWdlKSB7CiAgbG9nLndhcm4od2FybmluZ01lc3NhZ2UpOwp9CgpleHBvcnRzLmxvZ0Vycm9yID0gbG9nRXJyb3I7CmV4cG9ydHMubG9nV2FybmluZyA9IGxvZ1dhcm5pbmc7CgovLyBBbHRlcm5hdGl2ZWx5LCBleHBvcnRzIGNhbiBiZSBkZWNsYXJlZCB1c2luZyBhbiBpbmxpbmUgYXJyb3cgZnVuY3Rpb24KCmV4cG9ydHMubG9nSW5mbyA9IChsb2csIGluZm9NZXNzYWdlKSA9PiBsb2cuaW5mbyhpbmZvTWVzc2FnZSk7CmV4cG9ydHMubG9nRGVidWcgPSAobG9nLCBkZWJ1Z01lc3NhZ2UpID0+IGxvZy5kZWJ1ZyhkZWJ1Z01lc3NhZ2UpOw==",
  },
]
`;

exports[`ScriptOps updateScript() 1: Update script '3b2f6836-184c-4ee9-8a1d-557cb01837a5' 1`] = `
{
  "_id": "3b2f6836-184c-4ee9-8a1d-557cb01837a5",
  "_rev": "-1564408225",
  "context": "AUTHENTICATION_TREE_DECISION_NODE",
  "createdBy": "id=ba58ff99-76d3-4c69-9c4a-7f150ac70e2c,ou=user,ou=am-config",
  "creationDate": 1718832502358,
  "default": false,
  "description": "Check if username has already been collected.",
  "evaluatorVersion": "1.0",
  "language": "JAVASCRIPT",
  "lastModifiedBy": "id=ba58ff99-76d3-4c69-9c4a-7f150ac70e2c,ou=user,ou=am-config",
  "lastModifiedDate": 1718832502358,
  "name": "FrodoTestScript3",
  "script": "LyogQ2hlY2sgVXNlcm5hbWUKICoKICogQXV0aG9yOiB2b2xrZXIuc2NoZXViZXJAZm9yZ2Vyb2NrLmNvbQogKiAKICogQ2hlY2sgaWYgdXNlcm5hbWUgaGFzIGFscmVhZHkgYmVlbiBjb2xsZWN0ZWQuCiAqIFJldHVybiAia25vd24iIGlmIHllcywgInVua25vd24iIG90aGVyd2lzZS4KICogCiAqIFRoaXMgc2NyaXB0IGRvZXMgbm90IG5lZWQgdG8gYmUgcGFyYW1ldHJpemVkLiBJdCB3aWxsIHdvcmsgcHJvcGVybHkgYXMgaXMuCiAqIAogKiBUaGUgU2NyaXB0ZWQgRGVjaXNpb24gTm9kZSBuZWVkcyB0aGUgZm9sbG93aW5nIG91dGNvbWVzIGRlZmluZWQ6CiAqIC0ga25vd24KICogLSB1bmtub3duCiAqLwooZnVuY3Rpb24gKCkgewogICAgaWYgKG51bGwgIT0gc2hhcmVkU3RhdGUuZ2V0KCJ1c2VybmFtZSIpKSB7CiAgICAgICAgb3V0Y29tZSA9ICJrbm93biI7CiAgICB9CiAgICBlbHNlIHsKICAgICAgICBvdXRjb21lID0gInVua25vd24iOwogICAgfQp9KCkpOw==",
}
`;
